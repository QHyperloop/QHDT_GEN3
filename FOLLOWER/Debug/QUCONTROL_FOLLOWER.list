
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006988  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d10  08006d10  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d18  08006d18  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  2000005c  08006d7c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000acc  08006d7c  00020acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023211  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7d  00000000  00000000  000432e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea0  00000000  00000000  00047060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ef  00000000  00000000  00048f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000484e  00000000  00000000  0004a6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f65  00000000  00000000  0004ef3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120322  00000000  00000000  00073ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087f4  00000000  00000000  001941c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b48 	.word	0x08006b48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08006b48 	.word	0x08006b48

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 fb2d 	bl	8001b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f821 	bl	8000562 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fca4 	bl	8000e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fc60 	bl	8000de8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000528:	f000 f86c 	bl	8000604 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f96c 	bl	8000808 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000530:	f000 f9b0 	bl	8000894 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8000534:	f000 f9f4 	bl	8000920 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8000538:	f000 fa38 	bl	80009ac <MX_I2C1_Init>
  MX_SPI1_Init();
 800053c:	f000 fb62 	bl	8000c04 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000540:	f000 fc2a 	bl	8000d98 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000544:	f000 fa72 	bl	8000a2c <MX_I2C2_Init>
  MX_IWDG_Init();
 8000548:	f000 faf0 	bl	8000b2c <MX_IWDG_Init>
  MX_ADC5_Init();
 800054c:	f000 f8f6 	bl	800073c <MX_ADC5_Init>
  MX_I2C3_Init();
 8000550:	f000 faac 	bl	8000aac <MX_I2C3_Init>
  MX_SPI3_Init();
 8000554:	f000 fb94 	bl	8000c80 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 8000558:	f000 fb06 	bl	8000b68 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800055c:	f000 fbce 	bl	8000cfc <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x4c>

08000562 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b094      	sub	sp, #80	; 0x50
 8000566:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	2238      	movs	r2, #56	; 0x38
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f006 fab7 	bl	8006ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000584:	2000      	movs	r0, #0
 8000586:	f003 fd0b 	bl	8003fa0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800058a:	2329      	movs	r3, #41	; 0x29
 800058c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	2303      	movs	r3, #3
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a8:	2355      	movs	r3, #85	; 0x55
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0318 	add.w	r3, r7, #24
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fda3 	bl	8004108 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005c8:	f000 fd20 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2303      	movs	r3, #3
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2104      	movs	r1, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 f89f 	bl	800472c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f4:	f000 fd0a 	bl	800100c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005f8:	f004 fa6e 	bl	8004ad8 <HAL_RCC_EnableCSS>
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2220      	movs	r2, #32
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f006 fa61 	bl	8006ae4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000622:	4b44      	ldr	r3, [pc, #272]	; (8000734 <MX_ADC1_Init+0x130>)
 8000624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000628:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062a:	4b42      	ldr	r3, [pc, #264]	; (8000734 <MX_ADC1_Init+0x130>)
 800062c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000632:	4b40      	ldr	r3, [pc, #256]	; (8000734 <MX_ADC1_Init+0x130>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <MX_ADC1_Init+0x130>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <MX_ADC1_Init+0x130>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <MX_ADC1_Init+0x130>)
 8000646:	2201      	movs	r2, #1
 8000648:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <MX_ADC1_Init+0x130>)
 800064c:	2204      	movs	r2, #4
 800064e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <MX_ADC1_Init+0x130>)
 8000652:	2200      	movs	r2, #0
 8000654:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <MX_ADC1_Init+0x130>)
 8000658:	2201      	movs	r2, #1
 800065a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <MX_ADC1_Init+0x130>)
 800065e:	2204      	movs	r2, #4
 8000660:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC1_Init+0x130>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066a:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_ADC1_Init+0x130>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_ADC1_Init+0x130>)
 8000672:	2200      	movs	r2, #0
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC1_Init+0x130>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC1_Init+0x130>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_ADC1_Init+0x130>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	4829      	ldr	r0, [pc, #164]	; (8000734 <MX_ADC1_Init+0x130>)
 800068e:	f001 fcb9 	bl	8002004 <HAL_ADC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000698:	f000 fcb8 	bl	800100c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4823      	ldr	r0, [pc, #140]	; (8000734 <MX_ADC1_Init+0x130>)
 80006a8:	f002 face 	bl	8002c48 <HAL_ADCEx_MultiModeConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006b2:	f000 fcab 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ADC1_Init+0x134>)
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ba:	2306      	movs	r3, #6
 80006bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c2:	237f      	movs	r3, #127	; 0x7f
 80006c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c6:	2304      	movs	r3, #4
 80006c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_ADC1_Init+0x130>)
 80006d4:	f001 fe52 	bl	800237c <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006de:	f000 fc95 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006e2:	230c      	movs	r3, #12
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_ADC1_Init+0x130>)
 80006ec:	f001 fe46 	bl	800237c <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006f6:	f000 fc89 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006fa:	2312      	movs	r3, #18
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_ADC1_Init+0x130>)
 8000704:	f001 fe3a 	bl	800237c <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800070e:	f000 fc7d 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000712:	2318      	movs	r3, #24
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_ADC1_Init+0x130>)
 800071c:	f001 fe2e 	bl	800237c <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000726:	f000 fc71 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	; 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000078 	.word	0x20000078
 8000738:	04300002 	.word	0x04300002

0800073c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2220      	movs	r2, #32
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f006 f9cb 	bl	8006ae4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000750:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <MX_ADC5_Init+0xc4>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000756:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800075a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC5_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC5_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000776:	2204      	movs	r2, #4
 8000778:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_ADC5_Init+0xc0>)
 800077c:	2200      	movs	r2, #0
 800077e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_ADC5_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC5_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_ADC5_Init+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC5_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC5_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_ADC5_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_ADC5_Init+0xc0>)
 80007b8:	f001 fc24 	bl	8002004 <HAL_ADC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80007c2:	f000 fc23 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC5_Init+0xc8>)
 80007c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ca:	2306      	movs	r3, #6
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d2:	237f      	movs	r3, #127	; 0x7f
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d6:	2304      	movs	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC5_Init+0xc0>)
 80007e4:	f001 fdca 	bl	800237c <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80007ee:	f000 fc0d 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000e4 	.word	0x200000e4
 8000800:	50000600 	.word	0x50000600
 8000804:	08600004 	.word	0x08600004

08000808 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_FDCAN1_Init+0x84>)
 800080e:	4a20      	ldr	r2, [pc, #128]	; (8000890 <MX_FDCAN1_Init+0x88>)
 8000810:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_FDCAN1_Init+0x84>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000826:	2200      	movs	r2, #0
 8000828:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_FDCAN1_Init+0x84>)
 800082c:	2200      	movs	r2, #0
 800082e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000832:	2200      	movs	r2, #0
 8000834:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000838:	2210      	movs	r2, #16
 800083a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_FDCAN1_Init+0x84>)
 800083e:	2201      	movs	r2, #1
 8000840:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000844:	2202      	movs	r2, #2
 8000846:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_FDCAN1_Init+0x84>)
 800084a:	2202      	movs	r2, #2
 800084c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000850:	2201      	movs	r2, #1
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000856:	2201      	movs	r2, #1
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_FDCAN1_Init+0x84>)
 800085c:	2201      	movs	r2, #1
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000862:	2201      	movs	r2, #1
 8000864:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000868:	2200      	movs	r2, #0
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_FDCAN1_Init+0x84>)
 800086e:	2200      	movs	r2, #0
 8000870:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_FDCAN1_Init+0x84>)
 8000874:	2200      	movs	r2, #0
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_FDCAN1_Init+0x84>)
 800087a:	f002 fdb7 	bl	80033ec <HAL_FDCAN_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000884:	f000 fbc2 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001b0 	.word	0x200001b0
 8000890:	40006400 	.word	0x40006400

08000894 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_FDCAN2_Init+0x84>)
 800089a:	4a20      	ldr	r2, [pc, #128]	; (800091c <MX_FDCAN2_Init+0x88>)
 800089c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008be:	2200      	movs	r2, #0
 80008c0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008dc:	2201      	movs	r2, #1
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_FDCAN2_Init+0x84>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_FDCAN2_Init+0x84>)
 8000900:	2200      	movs	r2, #0
 8000902:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_FDCAN2_Init+0x84>)
 8000906:	f002 fd71 	bl	80033ec <HAL_FDCAN_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000910:	f000 fb7c 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000214 	.word	0x20000214
 800091c:	40006800 	.word	0x40006800

08000920 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000926:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <MX_FDCAN3_Init+0x88>)
 8000928:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800093e:	2200      	movs	r2, #0
 8000940:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000944:	2200      	movs	r2, #0
 8000946:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800094a:	2200      	movs	r2, #0
 800094c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000950:	2210      	movs	r2, #16
 8000952:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000956:	2201      	movs	r2, #1
 8000958:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800095c:	2202      	movs	r2, #2
 800095e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000962:	2202      	movs	r2, #2
 8000964:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000968:	2201      	movs	r2, #1
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800096e:	2201      	movs	r2, #1
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000974:	2201      	movs	r2, #1
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800097a:	2201      	movs	r2, #1
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000980:	2200      	movs	r2, #0
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000986:	2200      	movs	r2, #0
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 800098c:	2200      	movs	r2, #0
 800098e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_FDCAN3_Init+0x84>)
 8000992:	f002 fd2b 	bl	80033ec <HAL_FDCAN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 800099c:	f000 fb36 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000278 	.word	0x20000278
 80009a8:	40006c00 	.word	0x40006c00

080009ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e8:	f003 f860 	bl	8003aac <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 fb0b 	bl	800100c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009fa:	f003 f8f2 	bl	8003be2 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 fb02 	bl	800100c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C1_Init+0x74>)
 8000a0c:	f003 f934 	bl	8003c78 <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 faf9 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002dc 	.word	0x200002dc
 8000a24:	40005400 	.word	0x40005400
 8000a28:	10a0a6fb 	.word	0x10a0a6fb

08000a2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_I2C2_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_I2C2_Init+0x7c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a68:	f003 f820 	bl	8003aac <HAL_I2C_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a72:	f000 facb 	bl	800100c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a7a:	f003 f8b2 	bl	8003be2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 fac2 	bl	800100c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_I2C2_Init+0x74>)
 8000a8c:	f003 f8f4 	bl	8003c78 <HAL_I2CEx_ConfigDigitalFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 fab9 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000330 	.word	0x20000330
 8000aa4:	40005800 	.word	0x40005800
 8000aa8:	10a0a6fb 	.word	0x10a0a6fb

08000aac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C3_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C3_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ae8:	f002 ffe0 	bl	8003aac <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 fa8b 	bl	800100c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000afa:	f003 f872 	bl	8003be2 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 fa82 	bl	800100c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000b0c:	f003 f8b4 	bl	8003c78 <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 fa79 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000384 	.word	0x20000384
 8000b24:	40007800 	.word	0x40007800
 8000b28:	10a0a6fb 	.word	0x10a0a6fb

08000b2c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_IWDG_Init+0x34>)
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <MX_IWDG_Init+0x38>)
 8000b34:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_IWDG_Init+0x34>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_IWDG_Init+0x34>)
 8000b3e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b42:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_IWDG_Init+0x34>)
 8000b46:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b4a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_IWDG_Init+0x34>)
 8000b4e:	f003 f8df 	bl	8003d10 <HAL_IWDG_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000b58:	f000 fa58 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200004f8 	.word	0x200004f8
 8000b64:	40003000 	.word	0x40003000

08000b68 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_LPUART1_UART_Init+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <MX_LPUART1_UART_Init+0x98>)
 8000b76:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000bb0:	f005 fd61 	bl	8006676 <HAL_RS485Ex_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 fa27 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000bc2:	f005 fdfa 	bl	80067ba <HAL_UARTEx_SetTxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000bcc:	f000 fa1e 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000bd4:	f005 fe2f 	bl	8006836 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000bde:	f000 fa15 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_LPUART1_UART_Init+0x90>)
 8000be4:	f005 fdb0 	bl	8006748 <HAL_UARTEx_DisableFifoMode>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 fa0d 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000508 	.word	0x20000508
 8000bfc:	40008000 	.word	0x40008000
 8000c00:	00033324 	.word	0x00033324

08000c04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_SPI1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c64:	f004 f9f8 	bl	8005058 <HAL_SPI_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 f9cd 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000059c 	.word	0x2000059c
 8000c7c:	40013000 	.word	0x40013000

08000c80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <MX_SPI3_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c9e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cce:	2207      	movs	r2, #7
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000ce0:	f004 f9ba 	bl	8005058 <HAL_SPI_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 f98f 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000600 	.word	0x20000600
 8000cf8:	40003c00 	.word	0x40003c00

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d24:	f244 2267 	movw	r2, #16999	; 0x4267
 8000d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d46:	f004 fa32 	bl	80051ae <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f95c 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d62:	f004 fbf9 	bl	8005558 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d6c:	f000 f94e 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d7e:	f004 fe83 	bl	8005a88 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d88:	f000 f940 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000664 	.word	0x20000664

08000d98 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <MX_USB_PCD_Init+0x4c>)
 8000da0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000da4:	2208      	movs	r2, #8
 8000da6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_USB_PCD_Init+0x48>)
 8000dce:	f002 ffee 	bl	8003dae <HAL_PCD_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000dd8:	f000 f918 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200006b0 	.word	0x200006b0
 8000de4:	40005c00 	.word	0x40005c00

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_DMA_Init+0x80>)
 8000df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <MX_DMA_Init+0x80>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6493      	str	r3, [r2, #72]	; 0x48
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_DMA_Init+0x80>)
 8000dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_DMA_Init+0x80>)
 8000e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_DMA_Init+0x80>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6493      	str	r3, [r2, #72]	; 0x48
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_DMA_Init+0x80>)
 8000e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	200b      	movs	r0, #11
 8000e24:	f002 f8f3 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e28:	200b      	movs	r0, #11
 8000e2a:	f002 f90a 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	200c      	movs	r0, #12
 8000e34:	f002 f8eb 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e38:	200c      	movs	r0, #12
 8000e3a:	f002 f902 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	200d      	movs	r0, #13
 8000e44:	f002 f8e3 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e48:	200d      	movs	r0, #13
 8000e4a:	f002 f8fa 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200e      	movs	r0, #14
 8000e54:	f002 f8db 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e58:	200e      	movs	r0, #14
 8000e5a:	f002 f8f2 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a5c      	ldr	r2, [pc, #368]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a50      	ldr	r2, [pc, #320]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000eb8:	f043 0320 	orr.w	r3, r3, #32
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0320 	and.w	r3, r3, #32
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a4a      	ldr	r2, [pc, #296]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b3c      	ldr	r3, [pc, #240]	; (8000ff8 <MX_GPIO_Init+0x18c>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f12:	2200      	movs	r2, #0
 8000f14:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8000f18:	4838      	ldr	r0, [pc, #224]	; (8000ffc <MX_GPIO_Init+0x190>)
 8000f1a:	f002 fdaf 	bl	8003a7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	4836      	ldr	r0, [pc, #216]	; (8001000 <MX_GPIO_Init+0x194>)
 8000f26:	f002 fda9 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f30:	4834      	ldr	r0, [pc, #208]	; (8001004 <MX_GPIO_Init+0x198>)
 8000f32:	f002 fda3 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f36:	2200      	movs	r2, #0
 8000f38:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8000f3c:	4832      	ldr	r0, [pc, #200]	; (8001008 <MX_GPIO_Init+0x19c>)
 8000f3e:	f002 fd9d 	bl	8003a7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f42:	233c      	movs	r3, #60	; 0x3c
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4829      	ldr	r0, [pc, #164]	; (8000ffc <MX_GPIO_Init+0x190>)
 8000f56:	f002 fc0f 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f5a:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8000f5e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4822      	ldr	r0, [pc, #136]	; (8000ffc <MX_GPIO_Init+0x190>)
 8000f74:	f002 fc00 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481b      	ldr	r0, [pc, #108]	; (8001000 <MX_GPIO_Init+0x194>)
 8000f92:	f002 fbf1 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_GPIO_Init+0x198>)
 8000fb0:	f002 fbe2 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fb4:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8000fb8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <MX_GPIO_Init+0x19c>)
 8000fce:	f002 fbd3 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f002 fbc5 	bl	8003778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	; 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001000 	.word	0x48001000
 8001000:	48000800 	.word	0x48000800
 8001004:	48000400 	.word	0x48000400
 8001008:	48000c00 	.word	0x48000c00

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>
	...

08001018 <HV_on>:
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
	HAL_TIM_Base_Start_IT(&htim2);
}
void HV_on(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <HV_on+0x58>)
 800101e:	f005 fcd0 	bl	80069c2 <atoi>
 8001022:	4603      	mov	r3, r0
 8001024:	b29b      	uxth	r3, r3
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <HV_on+0x5c>)
 800102c:	f002 fd26 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <HV_on+0x60>)
 8001032:	f005 fcc6 	bl	80069c2 <atoi>
 8001036:	4603      	mov	r3, r0
 8001038:	b29b      	uxth	r3, r3
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <HV_on+0x5c>)
 8001040:	f002 fd1c 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <HV_on+0x64>)
 8001046:	f005 fcbc 	bl	80069c2 <atoi>
 800104a:	4603      	mov	r3, r0
 800104c:	b29b      	uxth	r3, r3
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <HV_on+0x5c>)
 8001054:	f002 fd12 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <HV_on+0x68>)
 800105a:	f005 fcb2 	bl	80069c2 <atoi>
 800105e:	4603      	mov	r3, r0
 8001060:	b29b      	uxth	r3, r3
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <HV_on+0x5c>)
 8001068:	f002 fd08 	bl	8003a7c <HAL_GPIO_WritePin>

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08006b90 	.word	0x08006b90
 8001074:	48001000 	.word	0x48001000
 8001078:	08006b9c 	.word	0x08006b9c
 800107c:	08006b78 	.word	0x08006b78
 8001080:	08006b84 	.word	0x08006b84

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010ba:	f003 f815 	bl	80040e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a0      	sub	sp, #128	; 0x80
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	2254      	movs	r2, #84	; 0x54
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 fcf9 	bl	8006ae4 <memset>
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fa:	d160      	bne.n	80011be <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001100:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001102:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001106:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fd55 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001118:	f7ff ff78 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_ADC_MspInit+0x170>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	4a46      	ldr	r2, [pc, #280]	; (800123c <HAL_ADC_MspInit+0x170>)
 8001122:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <HAL_ADC_MspInit+0x170>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b41      	ldr	r3, [pc, #260]	; (800123c <HAL_ADC_MspInit+0x170>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_ADC_MspInit+0x170>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <HAL_ADC_MspInit+0x170>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800114c:	230f      	movs	r3, #15
 800114e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f002 fb09 	bl	8003778 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_ADC_MspInit+0x174>)
 8001168:	4a36      	ldr	r2, [pc, #216]	; (8001244 <HAL_ADC_MspInit+0x178>)
 800116a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800116c:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_ADC_MspInit+0x174>)
 800116e:	2205      	movs	r2, #5
 8001170:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_ADC_MspInit+0x174>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_ADC_MspInit+0x174>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_ADC_MspInit+0x174>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_ADC_MspInit+0x174>)
 8001186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_ADC_MspInit+0x174>)
 800118e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001192:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_ADC_MspInit+0x174>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_ADC_MspInit+0x174>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a0:	4827      	ldr	r0, [pc, #156]	; (8001240 <HAL_ADC_MspInit+0x174>)
 80011a2:	f001 ff69 	bl	8003078 <HAL_DMA_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80011ac:	f7ff ff2e 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_ADC_MspInit+0x174>)
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_ADC_MspInit+0x174>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80011bc:	e03a      	b.n	8001234 <HAL_ADC_MspInit+0x168>
  else if(hadc->Instance==ADC5)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a21      	ldr	r2, [pc, #132]	; (8001248 <HAL_ADC_MspInit+0x17c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d135      	bne.n	8001234 <HAL_ADC_MspInit+0x168>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011d2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fcef 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 80011e4:	f7ff ff12 	bl	800100c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_ADC_MspInit+0x170>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_ADC_MspInit+0x170>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_ADC_MspInit+0x170>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_ADC_MspInit+0x170>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_ADC_MspInit+0x170>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_ADC_MspInit+0x170>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f002 faa2 	bl	8003778 <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3780      	adds	r7, #128	; 0x80
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	20000150 	.word	0x20000150
 8001244:	40020008 	.word	0x40020008
 8001248:	50000600 	.word	0x50000600

0800124c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0a2      	sub	sp, #136	; 0x88
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	2254      	movs	r2, #84	; 0x54
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f005 fc39 	bl	8006ae4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6e      	ldr	r2, [pc, #440]	; (8001430 <HAL_FDCAN_MspInit+0x1e4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d143      	bne.n	8001304 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001286:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fc95 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001298:	f7ff feb8 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800129c:	4b65      	ldr	r3, [pc, #404]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a64      	ldr	r2, [pc, #400]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 80012a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10b      	bne.n	80012c6 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a61      	ldr	r2, [pc, #388]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80012b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a5b      	ldr	r2, [pc, #364]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012de:	2303      	movs	r3, #3
 80012e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012f0:	2309      	movs	r3, #9
 80012f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012fa:	4619      	mov	r1, r3
 80012fc:	484f      	ldr	r0, [pc, #316]	; (800143c <HAL_FDCAN_MspInit+0x1f0>)
 80012fe:	f002 fa3b 	bl	8003778 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001302:	e091      	b.n	8001428 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_FDCAN_MspInit+0x1f4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d144      	bne.n	8001398 <HAL_FDCAN_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001312:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001318:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fc4c 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 800132a:	f7ff fe6f 	bl	800100c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a3f      	ldr	r2, [pc, #252]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 8001336:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10b      	bne.n	8001358 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001340:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134a:	6593      	str	r3, [r2, #88]	; 0x58
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b37      	ldr	r3, [pc, #220]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a36      	ldr	r2, [pc, #216]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001370:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001374:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001384:	2309      	movs	r3, #9
 8001386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800138e:	4619      	mov	r1, r3
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <HAL_FDCAN_MspInit+0x1f8>)
 8001392:	f002 f9f1 	bl	8003778 <HAL_GPIO_Init>
}
 8001396:	e047      	b.n	8001428 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN3)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <HAL_FDCAN_MspInit+0x1fc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d142      	bne.n	8001428 <HAL_FDCAN_MspInit+0x1dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80013a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ac:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fc02 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_FDCAN_MspInit+0x176>
      Error_Handler();
 80013be:	f7ff fe25 	bl	800100c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_FDCAN_MspInit+0x1e8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10b      	bne.n	80013ec <HAL_FDCAN_MspInit+0x1a0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80013da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013de:	6593      	str	r3, [r2, #88]	; 0x58
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_FDCAN_MspInit+0x1ec>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001404:	2318      	movs	r3, #24
 8001406:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8001416:	230b      	movs	r3, #11
 8001418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001420:	4619      	mov	r1, r3
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <HAL_FDCAN_MspInit+0x1f8>)
 8001424:	f002 f9a8 	bl	8003778 <HAL_GPIO_Init>
}
 8001428:	bf00      	nop
 800142a:	3788      	adds	r7, #136	; 0x88
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40006400 	.word	0x40006400
 8001434:	2000098c 	.word	0x2000098c
 8001438:	40021000 	.word	0x40021000
 800143c:	48000c00 	.word	0x48000c00
 8001440:	40006800 	.word	0x40006800
 8001444:	48000400 	.word	0x48000400
 8001448:	40006c00 	.word	0x40006c00

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0a4      	sub	sp, #144	; 0x90
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001468:	2254      	movs	r2, #84	; 0x54
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fb39 	bl	8006ae4 <memset>
  if(hi2c->Instance==I2C1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a8a      	ldr	r2, [pc, #552]	; (80016a0 <HAL_I2C_MspInit+0x254>)
 8001478:	4293      	cmp	r3, r2
 800147a:	f040 80af 	bne.w	80015dc <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001482:	2300      	movs	r3, #0
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fb96 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001496:	f7ff fdb9 	bl	800100c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a81      	ldr	r2, [pc, #516]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a7b      	ldr	r2, [pc, #492]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d0:	2312      	movs	r3, #18
 80014d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e2:	2304      	movs	r3, #4
 80014e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f002 f941 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fa:	2312      	movs	r3, #18
 80014fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150c:	2304      	movs	r3, #4
 800150e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001516:	4619      	mov	r1, r3
 8001518:	4863      	ldr	r0, [pc, #396]	; (80016a8 <HAL_I2C_MspInit+0x25c>)
 800151a:	f002 f92d 	bl	8003778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a60      	ldr	r2, [pc, #384]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001538:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <HAL_I2C_MspInit+0x264>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_I2C_MspInit+0x260>)
 800153e:	2210      	movs	r2, #16
 8001540:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_I2C_MspInit+0x260>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155a:	4b54      	ldr	r3, [pc, #336]	; (80016ac <HAL_I2C_MspInit+0x260>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001560:	4b52      	ldr	r3, [pc, #328]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800156c:	484f      	ldr	r0, [pc, #316]	; (80016ac <HAL_I2C_MspInit+0x260>)
 800156e:	f001 fd83 	bl	8003078 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8001578:	f7ff fd48 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c
 8001582:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <HAL_I2C_MspInit+0x260>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 800158a:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_I2C_MspInit+0x26c>)
 800158c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800158e:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 8001590:	2211      	movs	r2, #17
 8001592:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001594:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 8001596:	2210      	movs	r2, #16
 8001598:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800159a:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015a0:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a6:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ac:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015b8:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015be:	483d      	ldr	r0, [pc, #244]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015c0:	f001 fd5a 	bl	8003078 <HAL_DMA_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 80015ca:	f7ff fd1f 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
 80015d4:	4a37      	ldr	r2, [pc, #220]	; (80016b4 <HAL_I2C_MspInit+0x268>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015da:	e0dd      	b.n	8001798 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a36      	ldr	r2, [pc, #216]	; (80016bc <HAL_I2C_MspInit+0x270>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d16e      	bne.n	80016c4 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fae2 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80015fe:	f7ff fd05 	bl	800100c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001632:	2310      	movs	r3, #16
 8001634:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001648:	2304      	movs	r3, #4
 800164a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001652:	4619      	mov	r1, r3
 8001654:	481a      	ldr	r0, [pc, #104]	; (80016c0 <HAL_I2C_MspInit+0x274>)
 8001656:	f002 f88f 	bl	8003778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001660:	2312      	movs	r3, #18
 8001662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001672:	2304      	movs	r3, #4
 8001674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f002 f879 	bl	8003778 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 800168c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001690:	6593      	str	r3, [r2, #88]	; 0x58
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_I2C_MspInit+0x258>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
}
 800169e:	e07b      	b.n	8001798 <HAL_I2C_MspInit+0x34c>
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000400 	.word	0x48000400
 80016ac:	200003d8 	.word	0x200003d8
 80016b0:	4002001c 	.word	0x4002001c
 80016b4:	20000438 	.word	0x20000438
 80016b8:	40020030 	.word	0x40020030
 80016bc:	40005800 	.word	0x40005800
 80016c0:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a35      	ldr	r2, [pc, #212]	; (80017a0 <HAL_I2C_MspInit+0x354>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d164      	bne.n	8001798 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fa6d 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 80016e8:	f7ff fc90 	bl	800100c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_I2C_MspInit+0x358>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a2c      	ldr	r2, [pc, #176]	; (80017a4 <HAL_I2C_MspInit+0x358>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_I2C_MspInit+0x358>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001708:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800171c:	2308      	movs	r3, #8
 800171e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001726:	4619      	mov	r1, r3
 8001728:	481f      	ldr	r0, [pc, #124]	; (80017a8 <HAL_I2C_MspInit+0x35c>)
 800172a:	f002 f825 	bl	8003778 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_I2C_MspInit+0x358>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_I2C_MspInit+0x358>)
 8001734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001738:	6593      	str	r3, [r2, #88]	; 0x58
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_I2C_MspInit+0x358>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_I2C_MspInit+0x364>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_I2C_MspInit+0x360>)
 800174e:	2214      	movs	r2, #20
 8001750:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_I2C_MspInit+0x360>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_I2C_MspInit+0x360>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <HAL_I2C_MspInit+0x360>)
 800177e:	f001 fc7b 	bl	8003078 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_MspInit+0x340>
      Error_Handler();
 8001788:	f7ff fc40 	bl	800100c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c
 8001792:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_I2C_MspInit+0x360>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001798:	bf00      	nop
 800179a:	3790      	adds	r7, #144	; 0x90
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40007800 	.word	0x40007800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000800 	.word	0x48000800
 80017ac:	20000498 	.word	0x20000498
 80017b0:	40020044 	.word	0x40020044

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0a0      	sub	sp, #128	; 0x80
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	2254      	movs	r2, #84	; 0x54
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 f985 	bl	8006ae4 <memset>
  if(huart->Instance==LPUART1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <HAL_UART_MspInit+0xdc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d151      	bne.n	8001888 <HAL_UART_MspInit+0xd4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017e4:	2320      	movs	r3, #32
 80017e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 f9e3 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017fc:	f7ff fc06 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_UART_MspInit+0xe0>)
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	4a23      	ldr	r2, [pc, #140]	; (8001894 <HAL_UART_MspInit+0xe0>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_UART_MspInit+0xe0>)
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_UART_MspInit+0xe0>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_UART_MspInit+0xe0>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_UART_MspInit+0xe0>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_UART_MspInit+0xe0>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_UART_MspInit+0xe0>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_MspInit+0xe0>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001848:	2303      	movs	r3, #3
 800184a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001858:	2308      	movs	r3, #8
 800185a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001860:	4619      	mov	r1, r3
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <HAL_UART_MspInit+0xe4>)
 8001864:	f001 ff88 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001868:	2302      	movs	r3, #2
 800186a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001878:	230c      	movs	r3, #12
 800187a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <HAL_UART_MspInit+0xe8>)
 8001884:	f001 ff78 	bl	8003778 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3780      	adds	r7, #128	; 0x80
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40008000 	.word	0x40008000
 8001894:	40021000 	.word	0x40021000
 8001898:	48000800 	.word	0x48000800
 800189c:	48000400 	.word	0x48000400

080018a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a2f      	ldr	r2, [pc, #188]	; (800197c <HAL_SPI_MspInit+0xdc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d129      	bne.n	8001916 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	4a2e      	ldr	r2, [pc, #184]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 80018c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018cc:	6613      	str	r3, [r2, #96]	; 0x60
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018f2:	23e0      	movs	r3, #224	; 0xe0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001902:	2305      	movs	r3, #5
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f001 ff32 	bl	8003778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001914:	e02d      	b.n	8001972 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <HAL_SPI_MspInit+0xe4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d128      	bne.n	8001972 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a16      	ldr	r2, [pc, #88]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_SPI_MspInit+0xe0>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001950:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001962:	2306      	movs	r3, #6
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4806      	ldr	r0, [pc, #24]	; (8001988 <HAL_SPI_MspInit+0xe8>)
 800196e:	f001 ff03 	bl	8003778 <HAL_GPIO_Init>
}
 8001972:	bf00      	nop
 8001974:	3730      	adds	r7, #48	; 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40013000 	.word	0x40013000
 8001980:	40021000 	.word	0x40021000
 8001984:	40003c00 	.word	0x40003c00
 8001988:	48000800 	.word	0x48000800

0800198c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d113      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_TIM_Base_MspInit+0x44>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_TIM_Base_MspInit+0x44>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6593      	str	r3, [r2, #88]	; 0x58
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_TIM_Base_MspInit+0x44>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	201c      	movs	r0, #28
 80019bc:	f001 fb27 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c0:	201c      	movs	r0, #28
 80019c2:	f001 fb3e 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b098      	sub	sp, #96	; 0x60
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2254      	movs	r2, #84	; 0x54
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f005 f87d 	bl	8006ae4 <memset>
  if(hpcd->Instance==USB)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_PCD_MspInit+0x60>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d11a      	bne.n	8001a2a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80019fa:	2300      	movs	r3, #0
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 f8da 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001a0e:	f7ff fafd 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_PCD_MspInit+0x64>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_PCD_MspInit+0x64>)
 8001a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_PCD_MspInit+0x64>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3760      	adds	r7, #96	; 0x60
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40005c00 	.word	0x40005c00
 8001a38:	40021000 	.word	0x40021000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a40:	f003 f85a 	bl	8004af8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x8>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 f8c6 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA1_Channel1_IRQHandler+0x10>)
 8001a9a:	f001 fb95 	bl	80031c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000150 	.word	0x20000150

08001aa8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Channel2_IRQHandler+0x10>)
 8001aae:	f001 fb8b 	bl	80031c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200003d8 	.word	0x200003d8

08001abc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA1_Channel3_IRQHandler+0x10>)
 8001ac2:	f001 fb81 	bl	80031c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000438 	.word	0x20000438

08001ad0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ad6:	f001 fb77 	bl	80031c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000498 	.word	0x20000498

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <TIM2_IRQHandler+0x18>)
 8001aea:	f003 fbe6 	bl	80052ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 8001aee:	4803      	ldr	r0, [pc, #12]	; (8001afc <TIM2_IRQHandler+0x18>)
 8001af0:	f003 fbb4 	bl	800525c <HAL_TIM_Base_Stop_IT>
  HV_on();
 8001af4:	f7ff fa90 	bl	8001018 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000664 	.word	0x20000664

08001b00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <LoopForever+0xe>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	; (8001b70 <LoopForever+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f004 ffd5 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7fe fcdd 	bl	8000514 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   r0, =_estack
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b68:	08006d20 	.word	0x08006d20
  ldr r2, =_sbss
 8001b6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b70:	20000acc 	.word	0x20000acc

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>

08001b76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f001 fa39 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b86:	200f      	movs	r0, #15
 8001b88:	f000 f80e 	bl	8001ba8 <HAL_InitTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	e001      	b.n	8001b9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b98:	f7ff fa74 	bl	8001084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_InitTick+0x68>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d022      	beq.n	8001c02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_InitTick+0x6c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_InitTick+0x68>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fa44 	bl	800305e <HAL_SYSTICK_Config>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10f      	bne.n	8001bfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	d809      	bhi.n	8001bf6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be2:	2200      	movs	r2, #0
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bea:	f001 fa10 	bl	800300e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_InitTick+0x70>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e007      	b.n	8001c06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e004      	b.n	8001c06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e001      	b.n	8001c06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x1c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_IncTick+0x20>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_IncTick+0x1c>)
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20000990 	.word	0x20000990
 8001c3c:	20000008 	.word	0x20000008

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000990 	.word	0x20000990

08001c58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3360      	adds	r3, #96	; 0x60
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <LL_ADC_SetOffset+0x44>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cf8:	bf00      	nop
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	03fff000 	.word	0x03fff000

08001d08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3360      	adds	r3, #96	; 0x60
 8001d16:	461a      	mov	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3360      	adds	r3, #96	; 0x60
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d5e:	bf00      	nop
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3360      	adds	r3, #96	; 0x60
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3360      	adds	r3, #96	; 0x60
 8001db0:	461a      	mov	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	615a      	str	r2, [r3, #20]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3330      	adds	r3, #48	; 0x30
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	4413      	add	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	211f      	movs	r1, #31
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	f003 011f 	and.w	r1, r3, #31
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	431a      	orrs	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3314      	adds	r3, #20
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	0e5b      	lsrs	r3, r3, #25
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0d1b      	lsrs	r3, r3, #20
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2107      	movs	r1, #7
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0d1b      	lsrs	r3, r3, #20
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0318 	and.w	r3, r3, #24
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	0007ffff 	.word	0x0007ffff

08001ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6093      	str	r3, [r2, #8]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2c:	d101      	bne.n	8001f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_IsEnabled+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_IsEnabled+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d101      	bne.n	8001fce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d101      	bne.n	8001ff4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1a9      	b.n	8002372 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff f84d 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff67 	bl	8001f18 <LL_ADC_IsDeepPowerDownEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff4d 	bl	8001ef4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff82 	bl	8001f68 <LL_ADC_IsInternalRegulatorEnabled>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff66 	bl	8001f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002074:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <HAL_ADC_Init+0x2e4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	4a9c      	ldr	r2, [pc, #624]	; (80022ec <HAL_ADC_Init+0x2e8>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002088:	e002      	b.n	8002090 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3b01      	subs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f9      	bne.n	800208a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff64 	bl	8001f68 <LL_ADC_IsInternalRegulatorEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10d      	bne.n	80020c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff75 	bl	8001fb6 <LL_ADC_REG_IsConversionOngoing>
 80020cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 8142 	bne.w	8002360 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 813e 	bne.w	8002360 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff49 	bl	8001f90 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d141      	bne.n	8002188 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210c:	d004      	beq.n	8002118 <HAL_ADC_Init+0x114>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a77      	ldr	r2, [pc, #476]	; (80022f0 <HAL_ADC_Init+0x2ec>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10f      	bne.n	8002138 <HAL_ADC_Init+0x134>
 8002118:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800211c:	f7ff ff38 	bl	8001f90 <LL_ADC_IsEnabled>
 8002120:	4604      	mov	r4, r0
 8002122:	4873      	ldr	r0, [pc, #460]	; (80022f0 <HAL_ADC_Init+0x2ec>)
 8002124:	f7ff ff34 	bl	8001f90 <LL_ADC_IsEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	4323      	orrs	r3, r4
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e012      	b.n	800215e <HAL_ADC_Init+0x15a>
 8002138:	486e      	ldr	r0, [pc, #440]	; (80022f4 <HAL_ADC_Init+0x2f0>)
 800213a:	f7ff ff29 	bl	8001f90 <LL_ADC_IsEnabled>
 800213e:	4604      	mov	r4, r0
 8002140:	486d      	ldr	r0, [pc, #436]	; (80022f8 <HAL_ADC_Init+0x2f4>)
 8002142:	f7ff ff25 	bl	8001f90 <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	431c      	orrs	r4, r3
 800214a:	486c      	ldr	r0, [pc, #432]	; (80022fc <HAL_ADC_Init+0x2f8>)
 800214c:	f7ff ff20 	bl	8001f90 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	4323      	orrs	r3, r4
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216a:	d004      	beq.n	8002176 <HAL_ADC_Init+0x172>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <HAL_ADC_Init+0x2ec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x176>
 8002176:	4a62      	ldr	r2, [pc, #392]	; (8002300 <HAL_ADC_Init+0x2fc>)
 8002178:	e000      	b.n	800217c <HAL_ADC_Init+0x178>
 800217a:	4a62      	ldr	r2, [pc, #392]	; (8002304 <HAL_ADC_Init+0x300>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f7ff fd68 	bl	8001c58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7f5b      	ldrb	r3, [r3, #29]
 800218c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002192:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002198:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800219e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d106      	bne.n	80021c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	045b      	lsls	r3, r3, #17
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_ADC_Init+0x304>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fee4 	bl	8001fdc <LL_ADC_INJ_IsConversionOngoing>
 8002214:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d17f      	bne.n	800231c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d17c      	bne.n	800231c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002226:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800222e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	430b      	orrs	r3, r1
 800224a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d017      	beq.n	8002284 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002262:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800226c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6911      	ldr	r1, [r2, #16]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	430b      	orrs	r3, r1
 800227e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002282:	e013      	b.n	80022ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002292:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d12a      	bne.n	800230c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022d8:	430a      	orrs	r2, r1
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	e019      	b.n	800231c <HAL_ADC_Init+0x318>
 80022e8:	20000000 	.word	0x20000000
 80022ec:	053e2d63 	.word	0x053e2d63
 80022f0:	50000100 	.word	0x50000100
 80022f4:	50000400 	.word	0x50000400
 80022f8:	50000500 	.word	0x50000500
 80022fc:	50000600 	.word	0x50000600
 8002300:	50000300 	.word	0x50000300
 8002304:	50000700 	.word	0x50000700
 8002308:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10c      	bne.n	800233e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f023 010f 	bic.w	r1, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
 800233c:	e007      	b.n	800234e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 020f 	bic.w	r2, r2, #15
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	65da      	str	r2, [r3, #92]	; 0x5c
 800235e:	e007      	b.n	8002370 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	f043 0210 	orr.w	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	bf00      	nop

0800237c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0b6      	sub	sp, #216	; 0xd8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x24>
 800239a:	2302      	movs	r3, #2
 800239c:	f000 bc13 	b.w	8002bc6 <HAL_ADC_ConfigChannel+0x84a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe02 	bl	8001fb6 <LL_ADC_REG_IsConversionOngoing>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 83f3 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f7ff fd18 	bl	8001dfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fdf0 	bl	8001fb6 <LL_ADC_REG_IsConversionOngoing>
 80023d6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fdfc 	bl	8001fdc <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 81d9 	bne.w	80027a4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 81d4 	bne.w	80027a4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002404:	d10f      	bne.n	8002426 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	f7ff fd1f 	bl	8001e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fcd9 	bl	8001dd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002424:	e00e      	b.n	8002444 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	461a      	mov	r2, r3
 8002434:	f7ff fd0e 	bl	8001e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fcc9 	bl	8001dd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d022      	beq.n	80024ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002476:	f7ff fc23 	bl	8001cc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6919      	ldr	r1, [r3, #16]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	461a      	mov	r2, r3
 8002488:	f7ff fc6f 	bl	8001d6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002498:	2b01      	cmp	r3, #1
 800249a:	d102      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x126>
 800249c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a0:	e000      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x128>
 80024a2:	2300      	movs	r3, #0
 80024a4:	461a      	mov	r2, r3
 80024a6:	f7ff fc7b 	bl	8001da0 <LL_ADC_SetOffsetSaturation>
 80024aa:	e17b      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fc28 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x15c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fc1d 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 021f 	and.w	r2, r3, #31
 80024d6:	e01e      	b.n	8002516 <HAL_ADC_ConfigChannel+0x19a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fc12 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002506:	2320      	movs	r3, #32
 8002508:	e004      	b.n	8002514 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800250a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_ADC_ConfigChannel+0x1b2>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	e018      	b.n	8002560 <HAL_ADC_ConfigChannel+0x1e4>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800254a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e004      	b.n	8002560 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fbe1 	bl	8001d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fbc5 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x222>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fbba 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	e01e      	b.n	80025dc <HAL_ADC_ConfigChannel+0x260>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2101      	movs	r1, #1
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fbaf 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e004      	b.n	80025da <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x278>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	e018      	b.n	8002626 <HAL_ADC_ConfigChannel+0x2aa>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002608:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800260c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	e004      	b.n	8002626 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800261c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002626:	429a      	cmp	r2, r3
 8002628:	d106      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fb7e 	bl	8001d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2102      	movs	r1, #2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fb62 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10a      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x2e8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb57 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	0e9b      	lsrs	r3, r3, #26
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	e01e      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x326>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2102      	movs	r1, #2
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fb4c 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800268a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e004      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x33e>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	e016      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x36c>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e004      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d106      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2102      	movs	r1, #2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fb1d 	bl	8001d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2103      	movs	r1, #3
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fb01 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x3aa>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2103      	movs	r1, #3
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff faf6 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	e017      	b.n	8002756 <HAL_ADC_ConfigChannel+0x3da>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2103      	movs	r1, #3
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff faeb 	bl	8001d08 <LL_ADC_GetOffsetChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800273e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002740:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800274c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <HAL_ADC_ConfigChannel+0x3f2>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	e011      	b.n	8002792 <HAL_ADC_ConfigChannel+0x416>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800277c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800277e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002786:	2320      	movs	r3, #32
 8002788:	e003      	b.n	8002792 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002792:	429a      	cmp	r2, r3
 8002794:	d106      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	2103      	movs	r1, #3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fac8 	bl	8001d34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fbf1 	bl	8001f90 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 813d 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7ff fb72 	bl	8001eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4aa2      	ldr	r2, [pc, #648]	; (8002a58 <HAL_ADC_ConfigChannel+0x6dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f040 812e 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x480>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	bf94      	ite	ls
 80027f4:	2301      	movls	r3, #1
 80027f6:	2300      	movhi	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e019      	b.n	8002830 <HAL_ADC_ConfigChannel+0x4b4>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800280a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800280c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800280e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2b09      	cmp	r3, #9
 8002828:	bf94      	ite	ls
 800282a:	2301      	movls	r3, #1
 800282c:	2300      	movhi	r3, #0
 800282e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002830:	2b00      	cmp	r3, #0
 8002832:	d079      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x4d4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	3301      	adds	r3, #1
 8002848:	069b      	lsls	r3, r3, #26
 800284a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284e:	e015      	b.n	800287c <HAL_ADC_ConfigChannel+0x500>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800285e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002860:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002868:	2320      	movs	r3, #32
 800286a:	e003      	b.n	8002874 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3301      	adds	r3, #1
 8002876:	069b      	lsls	r3, r3, #26
 8002878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_ADC_ConfigChannel+0x520>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	3301      	adds	r3, #1
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	e017      	b.n	80028cc <HAL_ADC_ConfigChannel+0x550>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028b4:	2320      	movs	r3, #32
 80028b6:	e003      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	ea42 0103 	orr.w	r1, r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x576>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	051b      	lsls	r3, r3, #20
 80028f0:	e018      	b.n	8002924 <HAL_ADC_ConfigChannel+0x5a8>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800290e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f003 021f 	and.w	r2, r3, #31
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002924:	430b      	orrs	r3, r1
 8002926:	e07e      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x5c8>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	3301      	adds	r3, #1
 800293c:	069b      	lsls	r3, r3, #26
 800293e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002942:	e015      	b.n	8002970 <HAL_ADC_ConfigChannel+0x5f4>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e003      	b.n	8002968 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	069b      	lsls	r3, r3, #26
 800296c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x614>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	e017      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x644>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	61fb      	str	r3, [r7, #28]
  return result;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e003      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	ea42 0103 	orr.w	r1, r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10d      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x670>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	3301      	adds	r3, #1
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	3b1e      	subs	r3, #30
 80029e4:	051b      	lsls	r3, r3, #20
 80029e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ea:	e01b      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x6a8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	613b      	str	r3, [r7, #16]
  return result;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b1e      	subs	r3, #30
 8002a1e:	051b      	lsls	r3, r3, #20
 8002a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a24:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7ff fa12 	bl	8001e54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_ADC_ConfigChannel+0x6e0>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80be 	beq.w	8002bba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x6d6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10a      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x6ec>
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a54:	e009      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x6ee>
 8002a56:	bf00      	nop
 8002a58:	407f0000 	.word	0x407f0000
 8002a5c:	80080000 	.word	0x80080000
 8002a60:	50000100 	.word	0x50000100
 8002a64:	50000300 	.word	0x50000300
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_ADC_ConfigChannel+0x854>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f91a 	bl	8001ca4 <LL_ADC_GetCommonPathInternalCh>
 8002a70:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_ADC_ConfigChannel+0x858>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_ADC_ConfigChannel+0x70c>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a55      	ldr	r2, [pc, #340]	; (8002bd8 <HAL_ADC_ConfigChannel+0x85c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d13a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d134      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9c:	d005      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x72e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4e      	ldr	r2, [pc, #312]	; (8002bdc <HAL_ADC_ConfigChannel+0x860>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	f040 8085 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab2:	d004      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x742>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <HAL_ADC_ConfigChannel+0x864>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x746>
 8002abe:	4a49      	ldr	r2, [pc, #292]	; (8002be4 <HAL_ADC_ConfigChannel+0x868>)
 8002ac0:	e000      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x748>
 8002ac2:	4a43      	ldr	r2, [pc, #268]	; (8002bd0 <HAL_ADC_ConfigChannel+0x854>)
 8002ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ac8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f7ff f8d5 	bl	8001c7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad4:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_ADC_ConfigChannel+0x86c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	4a44      	ldr	r2, [pc, #272]	; (8002bec <HAL_ADC_ConfigChannel+0x870>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aee:	e002      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f9      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002afc:	e05a      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a3b      	ldr	r2, [pc, #236]	; (8002bf0 <HAL_ADC_ConfigChannel+0x874>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d125      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11f      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <HAL_ADC_ConfigChannel+0x864>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d104      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x7ac>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a34      	ldr	r2, [pc, #208]	; (8002bf4 <HAL_ADC_ConfigChannel+0x878>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d047      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b30:	d004      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0x7c0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <HAL_ADC_ConfigChannel+0x864>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x7c4>
 8002b3c:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_ADC_ConfigChannel+0x868>)
 8002b3e:	e000      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x7c6>
 8002b40:	4a23      	ldr	r2, [pc, #140]	; (8002bd0 <HAL_ADC_ConfigChannel+0x854>)
 8002b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f7ff f896 	bl	8001c7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b52:	e031      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_ADC_ConfigChannel+0x87c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12d      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d127      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_ADC_ConfigChannel+0x864>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7c:	d004      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x80c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_ADC_ConfigChannel+0x864>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x810>
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <HAL_ADC_ConfigChannel+0x868>)
 8002b8a:	e000      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x812>
 8002b8c:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_ADC_ConfigChannel+0x854>)
 8002b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f7ff f870 	bl	8001c7e <LL_ADC_SetCommonPathInternalCh>
 8002b9e:	e00c      	b.n	8002bba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bb2:	e002      	b.n	8002bba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bc2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	37d8      	adds	r7, #216	; 0xd8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	50000700 	.word	0x50000700
 8002bd4:	c3210000 	.word	0xc3210000
 8002bd8:	90c00010 	.word	0x90c00010
 8002bdc:	50000600 	.word	0x50000600
 8002be0:	50000100 	.word	0x50000100
 8002be4:	50000300 	.word	0x50000300
 8002be8:	20000000 	.word	0x20000000
 8002bec:	053e2d63 	.word	0x053e2d63
 8002bf0:	c7520000 	.word	0xc7520000
 8002bf4:	50000500 	.word	0x50000500
 8002bf8:	cb840000 	.word	0xcb840000

08002bfc <LL_ADC_IsEnabled>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <LL_ADC_IsEnabled+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_ADC_IsEnabled+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d101      	bne.n	8002c3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b0a1      	sub	sp, #132	; 0x84
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0e7      	b.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c72:	2300      	movs	r3, #0
 8002c74:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c7e:	d102      	bne.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c80:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	e009      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002c90:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	e001      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0be      	b.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ffb1 	bl	8002c22 <LL_ADC_REG_IsConversionOngoing>
 8002cc0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ffab 	bl	8002c22 <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 80a0 	bne.w	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 809c 	bne.w	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a55      	ldr	r2, [pc, #340]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002cf0:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002cf4:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002cf6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d04b      	beq.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d12:	035b      	lsls	r3, r3, #13
 8002d14:	430b      	orrs	r3, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d24:	d004      	beq.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a45      	ldr	r2, [pc, #276]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10f      	bne.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002d30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d34:	f7ff ff62 	bl	8002bfc <LL_ADC_IsEnabled>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	4841      	ldr	r0, [pc, #260]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d3c:	f7ff ff5e 	bl	8002bfc <LL_ADC_IsEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4323      	orrs	r3, r4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e012      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002d50:	483c      	ldr	r0, [pc, #240]	; (8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d52:	f7ff ff53 	bl	8002bfc <LL_ADC_IsEnabled>
 8002d56:	4604      	mov	r4, r0
 8002d58:	483b      	ldr	r0, [pc, #236]	; (8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d5a:	f7ff ff4f 	bl	8002bfc <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	431c      	orrs	r4, r3
 8002d62:	483c      	ldr	r0, [pc, #240]	; (8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d64:	f7ff ff4a 	bl	8002bfc <LL_ADC_IsEnabled>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4323      	orrs	r3, r4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d056      	beq.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d82:	f023 030f 	bic.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6811      	ldr	r1, [r2, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	6892      	ldr	r2, [r2, #8]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	431a      	orrs	r2, r3
 8002d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d96:	e047      	b.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dac:	d004      	beq.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d10f      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002db8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002dbc:	f7ff ff1e 	bl	8002bfc <LL_ADC_IsEnabled>
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	481f      	ldr	r0, [pc, #124]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dc4:	f7ff ff1a 	bl	8002bfc <LL_ADC_IsEnabled>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e012      	b.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002dd8:	481a      	ldr	r0, [pc, #104]	; (8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002dda:	f7ff ff0f 	bl	8002bfc <LL_ADC_IsEnabled>
 8002dde:	4604      	mov	r4, r0
 8002de0:	4819      	ldr	r0, [pc, #100]	; (8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002de2:	f7ff ff0b 	bl	8002bfc <LL_ADC_IsEnabled>
 8002de6:	4603      	mov	r3, r0
 8002de8:	431c      	orrs	r4, r3
 8002dea:	481a      	ldr	r0, [pc, #104]	; (8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002dec:	f7ff ff06 	bl	8002bfc <LL_ADC_IsEnabled>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4323      	orrs	r3, r4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e0a:	f023 030f 	bic.w	r3, r3, #15
 8002e0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e12:	e009      	b.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e26:	e000      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3784      	adds	r7, #132	; 0x84
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	50000100 	.word	0x50000100
 8002e44:	50000400 	.word	0x50000400
 8002e48:	50000500 	.word	0x50000500
 8002e4c:	50000300 	.word	0x50000300
 8002e50:	50000700 	.word	0x50000700
 8002e54:	50000600 	.word	0x50000600

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	; (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	; (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f7ff ff8e 	bl	8002ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff29 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff40 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff90 	bl	8002f4c <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff5f 	bl	8002ef8 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff33 	bl	8002ebc <__NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffa4 	bl	8002fb4 <SysTick_Config>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08d      	b.n	80031a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_DMA_Init+0x138>)
 8003092:	429a      	cmp	r2, r3
 8003094:	d80f      	bhi.n	80030b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b45      	ldr	r3, [pc, #276]	; (80031b4 <HAL_DMA_Init+0x13c>)
 800309e:	4413      	add	r3, r2
 80030a0:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <HAL_DMA_Init+0x140>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	009a      	lsls	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_DMA_Init+0x144>)
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
 80030b4:	e00e      	b.n	80030d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <HAL_DMA_Init+0x148>)
 80030be:	4413      	add	r3, r2
 80030c0:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_DMA_Init+0x140>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a3c      	ldr	r2, [pc, #240]	; (80031c4 <HAL_DMA_Init+0x14c>)
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8fe 	bl	8003328 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003134:	d102      	bne.n	800313c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003150:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_DMA_Init+0x104>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d80c      	bhi.n	800317c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f91e 	bl	80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	e008      	b.n	800318e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40020407 	.word	0x40020407
 80031b4:	bffdfff8 	.word	0xbffdfff8
 80031b8:	cccccccd 	.word	0xcccccccd
 80031bc:	40020000 	.word	0x40020000
 80031c0:	bffdfbf8 	.word	0xbffdfbf8
 80031c4:	40020400 	.word	0x40020400

080031c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2204      	movs	r2, #4
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d026      	beq.n	8003242 <HAL_DMA_IRQHandler+0x7a>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d021      	beq.n	8003242 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0204 	bic.w	r2, r2, #4
 800321a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2104      	movs	r1, #4
 800322a:	fa01 f202 	lsl.w	r2, r1, r2
 800322e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	2b00      	cmp	r3, #0
 8003236:	d071      	beq.n	800331c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003240:	e06c      	b.n	800331c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2202      	movs	r2, #2
 800324c:	409a      	lsls	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d02e      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d029      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 020a 	bic.w	r2, r2, #10
 800327c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2102      	movs	r1, #2
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d038      	beq.n	800331c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032b2:	e033      	b.n	800331c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2208      	movs	r2, #8
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d02a      	beq.n	800331e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d025      	beq.n	800331e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 020e 	bic.w	r2, r2, #14
 80032e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f003 021f 	and.w	r2, r3, #31
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800331c:	bf00      	nop
 800331e:	bf00      	nop
}
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d802      	bhi.n	8003342 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e001      	b.n	8003346 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003344:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b08      	subs	r3, #8
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	009a      	lsls	r2, r3, #2
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003372:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2201      	movs	r2, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40020407 	.word	0x40020407
 8003394:	40020800 	.word	0x40020800
 8003398:	40020820 	.word	0x40020820
 800339c:	cccccccd 	.word	0xcccccccd
 80033a0:	40020880 	.word	0x40020880

080033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	1000823f 	.word	0x1000823f
 80033e8:	40020940 	.word	0x40020940

080033ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e147      	b.n	800368e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd ff1a 	bl	800124c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0210 	bic.w	r2, r2, #16
 8003426:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003428:	f7fe fc0a 	bl	8001c40 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800342e:	e012      	b.n	8003456 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003430:	f7fe fc06 	bl	8001c40 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b0a      	cmp	r3, #10
 800343c:	d90b      	bls.n	8003456 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e11b      	b.n	800368e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d0e5      	beq.n	8003430 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003474:	f7fe fbe4 	bl	8001c40 <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800347a:	e012      	b.n	80034a2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800347c:	f7fe fbe0 	bl	8001c40 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b0a      	cmp	r3, #10
 8003488:	d90b      	bls.n	80034a2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0f5      	b.n	800368e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0e5      	beq.n	800347c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0202 	orr.w	r2, r2, #2
 80034be:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a74      	ldr	r2, [pc, #464]	; (8003698 <HAL_FDCAN_Init+0x2ac>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d103      	bne.n	80034d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80034ca:	4a74      	ldr	r2, [pc, #464]	; (800369c <HAL_FDCAN_Init+0x2b0>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7c1b      	ldrb	r3, [r3, #16]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e8:	619a      	str	r2, [r3, #24]
 80034ea:	e007      	b.n	80034fc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7c5b      	ldrb	r3, [r3, #17]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003512:	619a      	str	r2, [r3, #24]
 8003514:	e007      	b.n	8003526 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003524:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7c9b      	ldrb	r3, [r3, #18]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353c:	619a      	str	r2, [r3, #24]
 800353e:	e007      	b.n	8003550 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800354e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003574:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0210 	bic.w	r2, r2, #16
 8003584:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d108      	bne.n	80035a0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0204 	orr.w	r2, r2, #4
 800359c:	619a      	str	r2, [r3, #24]
 800359e:	e02c      	b.n	80035fa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d028      	beq.n	80035fa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d01c      	beq.n	80035ea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035be:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0210 	orr.w	r2, r2, #16
 80035ce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d110      	bne.n	80035fa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0220 	orr.w	r2, r2, #32
 80035e6:	619a      	str	r2, [r3, #24]
 80035e8:	e007      	b.n	80035fa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	3b01      	subs	r3, #1
 8003600:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	3b01      	subs	r3, #1
 8003608:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800360a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003612:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	3b01      	subs	r3, #1
 800361c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003622:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003624:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800362e:	d115      	bne.n	800365c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	3b01      	subs	r3, #1
 800363c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800363e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	3b01      	subs	r3, #1
 8003646:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003648:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	3b01      	subs	r3, #1
 8003652:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003658:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800365a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f814 	bl	80036a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40006400 	.word	0x40006400
 800369c:	40006500 	.word	0x40006500

080036a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80036a8:	4b30      	ldr	r3, [pc, #192]	; (800376c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80036aa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d103      	bne.n	80036be <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80036bc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80036ce:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	041a      	lsls	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003704:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	061a      	lsls	r2, r3, #24
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e005      	b.n	8003752 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3f3      	bcc.n	8003746 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	4000a400 	.word	0x4000a400
 8003770:	40006800 	.word	0x40006800
 8003774:	40006c00 	.word	0x40006c00

08003778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003786:	e15a      	b.n	8003a3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2101      	movs	r1, #1
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 814c 	beq.w	8003a38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d005      	beq.n	80037b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d130      	bne.n	800381a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ee:	2201      	movs	r2, #1
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0201 	and.w	r2, r3, #1
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b03      	cmp	r3, #3
 8003824:	d017      	beq.n	8003856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d123      	bne.n	80038aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	08da      	lsrs	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3208      	adds	r2, #8
 800386a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	6939      	ldr	r1, [r7, #16]
 80038a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0203 	and.w	r2, r3, #3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80a6 	beq.w	8003a38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ec:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <HAL_GPIO_Init+0x2e4>)
 80038ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f0:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_GPIO_Init+0x2e4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6613      	str	r3, [r2, #96]	; 0x60
 80038f8:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <HAL_GPIO_Init+0x2e4>)
 80038fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003904:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <HAL_GPIO_Init+0x2e8>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800392e:	d01f      	beq.n	8003970 <HAL_GPIO_Init+0x1f8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a4c      	ldr	r2, [pc, #304]	; (8003a64 <HAL_GPIO_Init+0x2ec>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d019      	beq.n	800396c <HAL_GPIO_Init+0x1f4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a4b      	ldr	r2, [pc, #300]	; (8003a68 <HAL_GPIO_Init+0x2f0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_GPIO_Init+0x1f0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a4a      	ldr	r2, [pc, #296]	; (8003a6c <HAL_GPIO_Init+0x2f4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00d      	beq.n	8003964 <HAL_GPIO_Init+0x1ec>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a49      	ldr	r2, [pc, #292]	; (8003a70 <HAL_GPIO_Init+0x2f8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d007      	beq.n	8003960 <HAL_GPIO_Init+0x1e8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a48      	ldr	r2, [pc, #288]	; (8003a74 <HAL_GPIO_Init+0x2fc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_GPIO_Init+0x1e4>
 8003958:	2305      	movs	r3, #5
 800395a:	e00a      	b.n	8003972 <HAL_GPIO_Init+0x1fa>
 800395c:	2306      	movs	r3, #6
 800395e:	e008      	b.n	8003972 <HAL_GPIO_Init+0x1fa>
 8003960:	2304      	movs	r3, #4
 8003962:	e006      	b.n	8003972 <HAL_GPIO_Init+0x1fa>
 8003964:	2303      	movs	r3, #3
 8003966:	e004      	b.n	8003972 <HAL_GPIO_Init+0x1fa>
 8003968:	2302      	movs	r3, #2
 800396a:	e002      	b.n	8003972 <HAL_GPIO_Init+0x1fa>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_GPIO_Init+0x1fa>
 8003970:	2300      	movs	r3, #0
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003982:	4937      	ldr	r1, [pc, #220]	; (8003a60 <HAL_GPIO_Init+0x2e8>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_GPIO_Init+0x300>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b4:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <HAL_GPIO_Init+0x300>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_GPIO_Init+0x300>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039de:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <HAL_GPIO_Init+0x300>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_GPIO_Init+0x300>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_GPIO_Init+0x300>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_GPIO_Init+0x300>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a32:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <HAL_GPIO_Init+0x300>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f ae9d 	bne.w	8003788 <HAL_GPIO_Init+0x10>
  }
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40010000 	.word	0x40010000
 8003a64:	48000400 	.word	0x48000400
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	48000c00 	.word	0x48000c00
 8003a70:	48001000 	.word	0x48001000
 8003a74:	48001400 	.word	0x48001400
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a8c:	787b      	ldrb	r3, [r7, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e08d      	b.n	8003bda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fcba 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003afc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d107      	bne.n	8003b26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	e006      	b.n	8003b34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d108      	bne.n	8003b4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	e007      	b.n	8003b5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69d9      	ldr	r1, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d138      	bne.n	8003c6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e032      	b.n	8003c6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2224      	movs	r2, #36	; 0x24
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d139      	bne.n	8003d02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e033      	b.n	8003d04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e041      	b.n	8003da6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f245 5255 	movw	r2, #21845	; 0x5555
 8003d34:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6852      	ldr	r2, [r2, #4]
 8003d3e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003d4a:	f7fd ff79 	bl	8001c40 <HAL_GetTick>
 8003d4e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d50:	e00f      	b.n	8003d72 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003d52:	f7fd ff75 	bl	8001c40 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b31      	cmp	r3, #49	; 0x31
 8003d5e:	d908      	bls.n	8003d72 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e019      	b.n	8003da6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e8      	bne.n	8003d52 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d005      	beq.n	8003d9a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	e004      	b.n	8003da4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0c0      	b.n	8003f42 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fd fdfd 	bl	80019d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fdb2 	bl	8006950 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e03e      	b.n	8003e70 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	3311      	adds	r3, #17
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	440b      	add	r3, r1
 8003e14:	3310      	adds	r3, #16
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	3313      	adds	r3, #19
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3320      	adds	r3, #32
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	440b      	add	r3, r1
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	791b      	ldrb	r3, [r3, #4]
 8003e74:	7bfa      	ldrb	r2, [r7, #15]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3bb      	bcc.n	8003df2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	e044      	b.n	8003f0a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	440b      	add	r3, r1
 8003eba:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	3301      	adds	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d3b5      	bcc.n	8003e80 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003f20:	f002 fd31 	bl	8006986 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7a9b      	ldrb	r3, [r3, #10]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f805 	bl	8003f4a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d141      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fae:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d131      	bne.n	8004020 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fbc:	4b47      	ldr	r3, [pc, #284]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc2:	4a46      	ldr	r2, [pc, #280]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fcc:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd4:	4a41      	ldr	r2, [pc, #260]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fdc:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2232      	movs	r2, #50	; 0x32
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	4a3f      	ldr	r2, [pc, #252]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	0c9b      	lsrs	r3, r3, #18
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff2:	e002      	b.n	8003ffa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d102      	bne.n	800400e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f2      	bne.n	8003ff4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800400e:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401a:	d158      	bne.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e057      	b.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004020:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004026:	4a2d      	ldr	r2, [pc, #180]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004030:	e04d      	b.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004038:	d141      	bne.n	80040be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800403a:	4b28      	ldr	r3, [pc, #160]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d131      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004048:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	4a23      	ldr	r2, [pc, #140]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004058:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2232      	movs	r2, #50	; 0x32
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0c9b      	lsrs	r3, r3, #18
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407e:	e002      	b.n	8004086 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d102      	bne.n	800409a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f2      	bne.n	8004080 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a6:	d112      	bne.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e011      	b.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040bc:	e007      	b.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40007000 	.word	0x40007000
 80040e0:	20000000 	.word	0x20000000
 80040e4:	431bde83 	.word	0x431bde83

080040e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a04      	ldr	r2, [pc, #16]	; (8004104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f6:	6093      	str	r3, [r2, #8]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40007000 	.word	0x40007000

08004108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e2fe      	b.n	8004718 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d075      	beq.n	8004212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004126:	4b97      	ldr	r3, [pc, #604]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004130:	4b94      	ldr	r3, [pc, #592]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d102      	bne.n	8004146 <HAL_RCC_OscConfig+0x3e>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d002      	beq.n	800414c <HAL_RCC_OscConfig+0x44>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	4b8d      	ldr	r3, [pc, #564]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05b      	beq.n	8004210 <HAL_RCC_OscConfig+0x108>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d157      	bne.n	8004210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e2d9      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416c:	d106      	bne.n	800417c <HAL_RCC_OscConfig+0x74>
 800416e:	4b85      	ldr	r3, [pc, #532]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a84      	ldr	r2, [pc, #528]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e01d      	b.n	80041b8 <HAL_RCC_OscConfig+0xb0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x98>
 8004186:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7e      	ldr	r2, [pc, #504]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800418c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b7c      	ldr	r3, [pc, #496]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7b      	ldr	r2, [pc, #492]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0xb0>
 80041a0:	4b78      	ldr	r3, [pc, #480]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a77      	ldr	r2, [pc, #476]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b75      	ldr	r3, [pc, #468]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a74      	ldr	r2, [pc, #464]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fd3e 	bl	8001c40 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fd fd3a 	bl	8001c40 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e29e      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041da:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0xc0>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fd2a 	bl	8001c40 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fd fd26 	bl	8001c40 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e28a      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004202:	4b60      	ldr	r3, [pc, #384]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0xe8>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d075      	beq.n	800430a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421e:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b0c      	cmp	r3, #12
 8004236:	d102      	bne.n	800423e <HAL_RCC_OscConfig+0x136>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d002      	beq.n	8004244 <HAL_RCC_OscConfig+0x13c>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11f      	bne.n	8004284 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004244:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_OscConfig+0x154>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e25d      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b49      	ldr	r3, [pc, #292]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	4946      	ldr	r1, [pc, #280]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004270:	4b45      	ldr	r3, [pc, #276]	; (8004388 <HAL_RCC_OscConfig+0x280>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd fc97 	bl	8001ba8 <HAL_InitTick>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d043      	beq.n	8004308 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e249      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3c      	ldr	r2, [pc, #240]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fcd2 	bl	8001c40 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a0:	f7fd fcce 	bl	8001c40 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e232      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	492d      	ldr	r1, [pc, #180]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
 80042d2:	e01a      	b.n	800430a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80042da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fcae 	bl	8001c40 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e8:	f7fd fcaa 	bl	8001c40 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e20e      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1e0>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d041      	beq.n	800439a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01c      	beq.n	8004358 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fd fc87 	bl	8001c40 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004336:	f7fd fc83 	bl	8001c40 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e1e7      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ef      	beq.n	8004336 <HAL_RCC_OscConfig+0x22e>
 8004356:	e020      	b.n	800439a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fd fc6a 	bl	8001c40 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800436e:	e00d      	b.n	800438c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004370:	f7fd fc66 	bl	8001c40 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d906      	bls.n	800438c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1ca      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800438c:	4b8c      	ldr	r3, [pc, #560]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ea      	bne.n	8004370 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80a6 	beq.w	80044f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ac:	4b84      	ldr	r3, [pc, #528]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_OscConfig+0x2b4>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x2b6>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b7f      	ldr	r3, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	4a7e      	ldr	r2, [pc, #504]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6593      	str	r3, [r2, #88]	; 0x58
 80043ce:	4b7c      	ldr	r3, [pc, #496]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043da:	2301      	movs	r3, #1
 80043dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043de:	4b79      	ldr	r3, [pc, #484]	; (80045c4 <HAL_RCC_OscConfig+0x4bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d118      	bne.n	800441c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ea:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <HAL_RCC_OscConfig+0x4bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a75      	ldr	r2, [pc, #468]	; (80045c4 <HAL_RCC_OscConfig+0x4bc>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f6:	f7fd fc23 	bl	8001c40 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fe:	f7fd fc1f 	bl	8001c40 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e183      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004410:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_RCC_OscConfig+0x4bc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d108      	bne.n	8004436 <HAL_RCC_OscConfig+0x32e>
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	4a65      	ldr	r2, [pc, #404]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004434:	e024      	b.n	8004480 <HAL_RCC_OscConfig+0x378>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d110      	bne.n	8004460 <HAL_RCC_OscConfig+0x358>
 800443e:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	4a5e      	ldr	r2, [pc, #376]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	4a5a      	ldr	r2, [pc, #360]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800445e:	e00f      	b.n	8004480 <HAL_RCC_OscConfig+0x378>
 8004460:	4b57      	ldr	r3, [pc, #348]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	4a56      	ldr	r2, [pc, #344]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004470:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	4a52      	ldr	r2, [pc, #328]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f023 0304 	bic.w	r3, r3, #4
 800447c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d016      	beq.n	80044b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fd fbda 	bl	8001c40 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fd fbd6 	bl	8001c40 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e138      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a6:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ed      	beq.n	8004490 <HAL_RCC_OscConfig+0x388>
 80044b4:	e015      	b.n	80044e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fd fbc3 	bl	8001c40 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd fbbf 	bl	8001c40 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e121      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d4:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1ed      	bne.n	80044be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e8:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03c      	beq.n	800457a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01c      	beq.n	8004542 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 800450a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800450e:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd fb92 	bl	8001c40 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004520:	f7fd fb8e 	bl	8001c40 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0f2      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004532:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ef      	beq.n	8004520 <HAL_RCC_OscConfig+0x418>
 8004540:	e01b      	b.n	800457a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004542:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004548:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fb75 	bl	8001c40 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800455a:	f7fd fb71 	bl	8001c40 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0d5      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 800456e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ef      	bne.n	800455a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80c9 	beq.w	8004716 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b0c      	cmp	r3, #12
 800458e:	f000 8083 	beq.w	8004698 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d15e      	bne.n	8004658 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fb4b 	bl	8001c40 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ac:	e00c      	b.n	80045c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fd fb47 	bl	8001c40 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d905      	bls.n	80045c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0ab      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c8:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ec      	bne.n	80045ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d4:	4b52      	ldr	r3, [pc, #328]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_RCC_OscConfig+0x61c>)
 80045da:	4013      	ands	r3, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6a11      	ldr	r1, [r2, #32]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045e4:	3a01      	subs	r2, #1
 80045e6:	0112      	lsls	r2, r2, #4
 80045e8:	4311      	orrs	r1, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045ee:	0212      	lsls	r2, r2, #8
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045f6:	0852      	lsrs	r2, r2, #1
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0552      	lsls	r2, r2, #21
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004602:	0852      	lsrs	r2, r2, #1
 8004604:	3a01      	subs	r2, #1
 8004606:	0652      	lsls	r2, r2, #25
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800460e:	06d2      	lsls	r2, r2, #27
 8004610:	430a      	orrs	r2, r1
 8004612:	4943      	ldr	r1, [pc, #268]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 8004614:	4313      	orrs	r3, r2
 8004616:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a40      	ldr	r2, [pc, #256]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800461e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004622:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd fb06 	bl	8001c40 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fd fb02 	bl	8001c40 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e066      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464a:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x530>
 8004656:	e05e      	b.n	8004716 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a30      	ldr	r2, [pc, #192]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fd faec 	bl	8001c40 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7fd fae8 	bl	8001c40 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04c      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800468a:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	4924      	ldr	r1, [pc, #144]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_OscConfig+0x620>)
 8004692:	4013      	ands	r3, r2
 8004694:	60cb      	str	r3, [r1, #12]
 8004696:	e03e      	b.n	8004716 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e039      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCC_OscConfig+0x618>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 0203 	and.w	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d12c      	bne.n	8004712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	3b01      	subs	r3, #1
 80046c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d123      	bne.n	8004712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d11b      	bne.n	8004712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d113      	bne.n	8004712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d109      	bne.n	8004712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	019f800c 	.word	0x019f800c
 8004728:	feeefffc 	.word	0xfeeefffc

0800472c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e11e      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b91      	ldr	r3, [pc, #580]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b8e      	ldr	r3, [pc, #568]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 020f 	bic.w	r2, r3, #15
 800475a:	498c      	ldr	r1, [pc, #560]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b8a      	ldr	r3, [pc, #552]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e106      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d073      	beq.n	8004868 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d129      	bne.n	80047dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004788:	4b81      	ldr	r3, [pc, #516]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0f4      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004798:	f000 f9ca 	bl	8004b30 <RCC_GetSysClockFreqFromPLLSource>
 800479c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4a7c      	ldr	r2, [pc, #496]	; (8004994 <HAL_RCC_ClockConfig+0x268>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d93f      	bls.n	8004826 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047a6:	4b7a      	ldr	r3, [pc, #488]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d033      	beq.n	8004826 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d12f      	bne.n	8004826 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ce:	4a70      	ldr	r2, [pc, #448]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e024      	b.n	8004826 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d107      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047e4:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0c6      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f4:	4b66      	ldr	r3, [pc, #408]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0be      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004804:	f000 f8ce 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004808:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4a61      	ldr	r2, [pc, #388]	; (8004994 <HAL_RCC_ClockConfig+0x268>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d909      	bls.n	8004826 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004812:	4b5f      	ldr	r3, [pc, #380]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481a:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004826:	4b5a      	ldr	r3, [pc, #360]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0203 	bic.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4957      	ldr	r1, [pc, #348]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd fa02 	bl	8001c40 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	e00a      	b.n	8004856 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004840:	f7fd f9fe 	bl	8001c40 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e095      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b4e      	ldr	r3, [pc, #312]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 020c 	and.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	429a      	cmp	r2, r3
 8004866:	d1eb      	bne.n	8004840 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d023      	beq.n	80048bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a42      	ldr	r2, [pc, #264]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800488a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004898:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048a0:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80048a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b39      	ldr	r3, [pc, #228]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4936      	ldr	r1, [pc, #216]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
 80048ba:	e008      	b.n	80048ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b80      	cmp	r3, #128	; 0x80
 80048c0:	d105      	bne.n	80048ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048c2:	4b33      	ldr	r3, [pc, #204]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a32      	ldr	r2, [pc, #200]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048ce:	4b2f      	ldr	r3, [pc, #188]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d21d      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048dc:	4b2b      	ldr	r3, [pc, #172]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 020f 	bic.w	r2, r3, #15
 80048e4:	4929      	ldr	r1, [pc, #164]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048ec:	f7fd f9a8 	bl	8001c40 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fd f9a4 	bl	8001c40 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e03b      	b.n	8004982 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d1ed      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004924:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4917      	ldr	r1, [pc, #92]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	490f      	ldr	r1, [pc, #60]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004956:	f000 f825 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 800495a:	4602      	mov	r2, r0
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <HAL_RCC_ClockConfig+0x264>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	490c      	ldr	r1, [pc, #48]	; (8004998 <HAL_RCC_ClockConfig+0x26c>)
 8004968:	5ccb      	ldrb	r3, [r1, r3]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <HAL_RCC_ClockConfig+0x270>)
 8004974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_ClockConfig+0x274>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd f914 	bl	8001ba8 <HAL_InitTick>
 8004980:	4603      	mov	r3, r0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40022000 	.word	0x40022000
 8004990:	40021000 	.word	0x40021000
 8004994:	04c4b400 	.word	0x04c4b400
 8004998:	08006bcc 	.word	0x08006bcc
 800499c:	20000000 	.word	0x20000000
 80049a0:	20000004 	.word	0x20000004

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049aa:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d102      	bne.n	80049bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049b6:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e047      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d102      	bne.n	80049ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049c8:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e03e      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049ce:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d136      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	3301      	adds	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d10c      	bne.n	8004a12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049f8:	4a1a      	ldr	r2, [pc, #104]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a02:	68d2      	ldr	r2, [r2, #12]
 8004a04:	0a12      	lsrs	r2, r2, #8
 8004a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	617b      	str	r3, [r7, #20]
      break;
 8004a10:	e00c      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a12:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	0a12      	lsrs	r2, r2, #8
 8004a20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
      break;
 8004a2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	0e5b      	lsrs	r3, r3, #25
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	e001      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a4c:	693b      	ldr	r3, [r7, #16]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000000 	.word	0x20000000

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08006bdc 	.word	0x08006bdc

08004aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ab0:	f7ff ffda 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0adb      	lsrs	r3, r3, #11
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	08006bdc 	.word	0x08006bdc

08004ad8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_EnableCSS+0x1c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <HAL_RCC_EnableCSS+0x1c>)
 8004ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000

08004af8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d105      	bne.n	8004b16 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004b0a:	f000 f809 	bl	8004b20 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004b0e:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b14:	621a      	str	r2, [r3, #32]
  }
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000

08004b20 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d10c      	bne.n	8004b6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5e:	68d2      	ldr	r2, [r2, #12]
 8004b60:	0a12      	lsrs	r2, r2, #8
 8004b62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	617b      	str	r3, [r7, #20]
    break;
 8004b6c:	e00c      	b.n	8004b88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	4a0e      	ldr	r2, [pc, #56]	; (8004bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b78:	68d2      	ldr	r2, [r2, #12]
 8004b7a:	0a12      	lsrs	r2, r2, #8
 8004b7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]
    break;
 8004b86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0e5b      	lsrs	r3, r3, #25
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	3301      	adds	r3, #1
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ba2:	687b      	ldr	r3, [r7, #4]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	007a1200 	.word	0x007a1200
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc8:	2300      	movs	r3, #0
 8004bca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8098 	beq.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	4b40      	ldr	r3, [pc, #256]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	4a3f      	ldr	r2, [pc, #252]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c02:	2301      	movs	r3, #1
 8004c04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c06:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a39      	ldr	r2, [pc, #228]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c12:	f7fd f815 	bl	8001c40 <HAL_GetTick>
 8004c16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c18:	e009      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1a:	f7fd f811 	bl	8001c40 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d902      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c2c:	e005      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c2e:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ef      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d159      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c40:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01e      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d019      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c78:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fc ffd1 	bl	8001c40 <HAL_GetTick>
 8004c9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca0:	e00b      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fc ffcd 	bl	8001c40 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d902      	bls.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	74fb      	strb	r3, [r7, #19]
            break;
 8004cb8:	e006      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ec      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	74bb      	strb	r3, [r7, #18]
 8004cea:	e005      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf8:	7c7b      	ldrb	r3, [r7, #17]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d105      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfe:	4ba7      	ldr	r3, [pc, #668]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	4aa6      	ldr	r2, [pc, #664]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d16:	4ba1      	ldr	r3, [pc, #644]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f023 0203 	bic.w	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	499d      	ldr	r1, [pc, #628]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d38:	4b98      	ldr	r3, [pc, #608]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 020c 	bic.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4995      	ldr	r1, [pc, #596]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d5a:	4b90      	ldr	r3, [pc, #576]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	498c      	ldr	r1, [pc, #560]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d7c:	4b87      	ldr	r3, [pc, #540]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	4984      	ldr	r1, [pc, #528]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d9e:	4b7f      	ldr	r3, [pc, #508]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	497b      	ldr	r1, [pc, #492]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dc0:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	4973      	ldr	r1, [pc, #460]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004de2:	4b6e      	ldr	r3, [pc, #440]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	496a      	ldr	r1, [pc, #424]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e04:	4b65      	ldr	r3, [pc, #404]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4962      	ldr	r1, [pc, #392]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e26:	4b5d      	ldr	r3, [pc, #372]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	4959      	ldr	r1, [pc, #356]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e48:	4b54      	ldr	r3, [pc, #336]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	4951      	ldr	r1, [pc, #324]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6a:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	4948      	ldr	r1, [pc, #288]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e8c:	4b43      	ldr	r3, [pc, #268]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	4940      	ldr	r1, [pc, #256]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eac:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d015      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ec4:	4b35      	ldr	r3, [pc, #212]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	4932      	ldr	r1, [pc, #200]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d015      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004efc:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	4924      	ldr	r1, [pc, #144]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f1a:	d105      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1c:	4b1f      	ldr	r3, [pc, #124]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	4916      	ldr	r1, [pc, #88]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f52:	d105      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d019      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	4908      	ldr	r1, [pc, #32]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a02      	ldr	r2, [pc, #8]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f96:	60d3      	str	r3, [r2, #12]
 8004f98:	e002      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fac:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	4926      	ldr	r1, [pc, #152]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff2:	4918      	ldr	r1, [pc, #96]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	490a      	ldr	r1, [pc, #40]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800503a:	d105      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005048:	7cbb      	ldrb	r3, [r7, #18]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000

08005058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e09d      	b.n	80051a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507a:	d009      	beq.n	8005090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	61da      	str	r2, [r3, #28]
 8005082:	e005      	b.n	8005090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc fbf8 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d0:	d902      	bls.n	80050d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e002      	b.n	80050de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050e6:	d007      	beq.n	80050f8 <HAL_SPI_Init+0xa0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f0:	d002      	beq.n	80050f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	ea42 0103 	orr.w	r1, r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	f003 0204 	and.w	r2, r3, #4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005174:	ea42 0103 	orr.w	r1, r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e049      	b.n	8005254 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc fbd9 	bl	800198c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f000 fafb 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	f241 1311 	movw	r3, #4369	; 0x1111
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10f      	bne.n	80052a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	f244 4344 	movw	r3, #17476	; 0x4444
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d020      	beq.n	800531e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01b      	beq.n	800531e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0202 	mvn.w	r2, #2
 80052ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fa51 	bl	80057ac <HAL_TIM_IC_CaptureCallback>
 800530a:	e005      	b.n	8005318 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa43 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa54 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01b      	beq.n	800536a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f06f 0204 	mvn.w	r2, #4
 800533a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fa2b 	bl	80057ac <HAL_TIM_IC_CaptureCallback>
 8005356:	e005      	b.n	8005364 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa1d 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa2e 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01b      	beq.n	80053b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0208 	mvn.w	r2, #8
 8005386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2204      	movs	r2, #4
 800538c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fa05 	bl	80057ac <HAL_TIM_IC_CaptureCallback>
 80053a2:	e005      	b.n	80053b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9f7 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa08 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01b      	beq.n	8005402 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0210 	mvn.w	r2, #16
 80053d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2208      	movs	r2, #8
 80053d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9df 	bl	80057ac <HAL_TIM_IC_CaptureCallback>
 80053ee:	e005      	b.n	80053fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9d1 	bl	8005798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9e2 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00c      	beq.n	8005426 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0201 	mvn.w	r2, #1
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9af 	bl	8005784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fbba 	bl	8005bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fbb2 	bl	8005bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00c      	beq.n	800549c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f99c 	bl	80057d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0220 	mvn.w	r2, #32
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb7a 	bl	8005bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fb86 	bl	8005bf0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb7e 	bl	8005c04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb76 	bl	8005c18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb6e 	bl	8005c2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIM_ConfigClockSource+0x1c>
 8005570:	2302      	movs	r3, #2
 8005572:	e0f6      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x20a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a6f      	ldr	r2, [pc, #444]	; (800576c <HAL_TIM_ConfigClockSource+0x214>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	f000 80c1 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 80055b4:	4a6d      	ldr	r2, [pc, #436]	; (800576c <HAL_TIM_ConfigClockSource+0x214>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	f200 80c6 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 80055bc:	4a6c      	ldr	r2, [pc, #432]	; (8005770 <HAL_TIM_ConfigClockSource+0x218>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	f000 80b9 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 80055c4:	4a6a      	ldr	r2, [pc, #424]	; (8005770 <HAL_TIM_ConfigClockSource+0x218>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	f200 80be 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 80055cc:	4a69      	ldr	r2, [pc, #420]	; (8005774 <HAL_TIM_ConfigClockSource+0x21c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f000 80b1 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 80055d4:	4a67      	ldr	r2, [pc, #412]	; (8005774 <HAL_TIM_ConfigClockSource+0x21c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	f200 80b6 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 80055dc:	4a66      	ldr	r2, [pc, #408]	; (8005778 <HAL_TIM_ConfigClockSource+0x220>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	f000 80a9 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 80055e4:	4a64      	ldr	r2, [pc, #400]	; (8005778 <HAL_TIM_ConfigClockSource+0x220>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	f200 80ae 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 80055ec:	4a63      	ldr	r2, [pc, #396]	; (800577c <HAL_TIM_ConfigClockSource+0x224>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	f000 80a1 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 80055f4:	4a61      	ldr	r2, [pc, #388]	; (800577c <HAL_TIM_ConfigClockSource+0x224>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	f200 80a6 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 80055fc:	4a60      	ldr	r2, [pc, #384]	; (8005780 <HAL_TIM_ConfigClockSource+0x228>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	f000 8099 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 8005604:	4a5e      	ldr	r2, [pc, #376]	; (8005780 <HAL_TIM_ConfigClockSource+0x228>)
 8005606:	4293      	cmp	r3, r2
 8005608:	f200 809e 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 800560c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005610:	f000 8091 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 8005614:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005618:	f200 8096 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 800561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005620:	f000 8089 	beq.w	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 8005624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005628:	f200 808e 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 800562c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005630:	d03e      	beq.n	80056b0 <HAL_TIM_ConfigClockSource+0x158>
 8005632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005636:	f200 8087 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	f000 8086 	beq.w	800574e <HAL_TIM_ConfigClockSource+0x1f6>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005646:	d87f      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005648:	2b70      	cmp	r3, #112	; 0x70
 800564a:	d01a      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x12a>
 800564c:	2b70      	cmp	r3, #112	; 0x70
 800564e:	d87b      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005650:	2b60      	cmp	r3, #96	; 0x60
 8005652:	d050      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x19e>
 8005654:	2b60      	cmp	r3, #96	; 0x60
 8005656:	d877      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005658:	2b50      	cmp	r3, #80	; 0x50
 800565a:	d03c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x17e>
 800565c:	2b50      	cmp	r3, #80	; 0x50
 800565e:	d873      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d058      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x1be>
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d86f      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005668:	2b30      	cmp	r3, #48	; 0x30
 800566a:	d064      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	d86b      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d060      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d867      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d05c      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 800567c:	2b10      	cmp	r3, #16
 800567e:	d05a      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x1de>
 8005680:	e062      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005692:	f000 f9d9 	bl	8005a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	609a      	str	r2, [r3, #8]
      break;
 80056ae:	e04f      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c0:	f000 f9c2 	bl	8005a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d2:	609a      	str	r2, [r3, #8]
      break;
 80056d4:	e03c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 f934 	bl	8005950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2150      	movs	r1, #80	; 0x50
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f98d 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80056f4:	e02c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005702:	461a      	mov	r2, r3
 8005704:	f000 f953 	bl	80059ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2160      	movs	r1, #96	; 0x60
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f97d 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005714:	e01c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	461a      	mov	r2, r3
 8005724:	f000 f914 	bl	8005950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f96d 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005734:	e00c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f000 f964 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005746:	e003      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      break;
 800574c:	e000      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800574e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	00100070 	.word	0x00100070
 8005770:	00100060 	.word	0x00100060
 8005774:	00100050 	.word	0x00100050
 8005778:	00100040 	.word	0x00100040
 800577c:	00100030 	.word	0x00100030
 8005780:	00100020 	.word	0x00100020

08005784 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a4c      	ldr	r2, [pc, #304]	; (800592c <TIM_Base_SetConfig+0x144>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d017      	beq.n	8005830 <TIM_Base_SetConfig+0x48>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005806:	d013      	beq.n	8005830 <TIM_Base_SetConfig+0x48>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a49      	ldr	r2, [pc, #292]	; (8005930 <TIM_Base_SetConfig+0x148>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_Base_SetConfig+0x48>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a48      	ldr	r2, [pc, #288]	; (8005934 <TIM_Base_SetConfig+0x14c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_Base_SetConfig+0x48>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a47      	ldr	r2, [pc, #284]	; (8005938 <TIM_Base_SetConfig+0x150>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0x48>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a46      	ldr	r2, [pc, #280]	; (800593c <TIM_Base_SetConfig+0x154>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0x48>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a45      	ldr	r2, [pc, #276]	; (8005940 <TIM_Base_SetConfig+0x158>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a39      	ldr	r2, [pc, #228]	; (800592c <TIM_Base_SetConfig+0x144>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d023      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005850:	d01f      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a36      	ldr	r2, [pc, #216]	; (8005930 <TIM_Base_SetConfig+0x148>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01b      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a35      	ldr	r2, [pc, #212]	; (8005934 <TIM_Base_SetConfig+0x14c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d017      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a34      	ldr	r2, [pc, #208]	; (8005938 <TIM_Base_SetConfig+0x150>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a33      	ldr	r2, [pc, #204]	; (800593c <TIM_Base_SetConfig+0x154>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00f      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a33      	ldr	r2, [pc, #204]	; (8005944 <TIM_Base_SetConfig+0x15c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00b      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a32      	ldr	r2, [pc, #200]	; (8005948 <TIM_Base_SetConfig+0x160>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a31      	ldr	r2, [pc, #196]	; (800594c <TIM_Base_SetConfig+0x164>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_Base_SetConfig+0xaa>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <TIM_Base_SetConfig+0x158>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d108      	bne.n	80058a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a18      	ldr	r2, [pc, #96]	; (800592c <TIM_Base_SetConfig+0x144>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <TIM_Base_SetConfig+0x110>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1a      	ldr	r2, [pc, #104]	; (800593c <TIM_Base_SetConfig+0x154>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0x110>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <TIM_Base_SetConfig+0x15c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0x110>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a19      	ldr	r2, [pc, #100]	; (8005948 <TIM_Base_SetConfig+0x160>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0x110>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <TIM_Base_SetConfig+0x164>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x110>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a13      	ldr	r2, [pc, #76]	; (8005940 <TIM_Base_SetConfig+0x158>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d103      	bne.n	8005900 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d105      	bne.n	800591e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	611a      	str	r2, [r3, #16]
  }
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40015000 	.word	0x40015000
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b087      	sub	sp, #28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f023 0210 	bic.w	r2, r3, #16
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f043 0307 	orr.w	r3, r3, #7
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	021a      	lsls	r2, r3, #8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e074      	b.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a33      	ldr	r2, [pc, #204]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a31      	ldr	r2, [pc, #196]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d108      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ae4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d022      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d01d      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d018      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10c      	bne.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40015000 	.word	0x40015000
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	40014000 	.word	0x40014000

08005bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b08c      	sub	sp, #48	; 0x30
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4baa      	ldr	r3, [pc, #680]	; (8005f18 <UART_SetConfig+0x2d8>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a9f      	ldr	r2, [pc, #636]	; (8005f1c <UART_SetConfig+0x2dc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	f023 010f 	bic.w	r1, r3, #15
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a90      	ldr	r2, [pc, #576]	; (8005f20 <UART_SetConfig+0x2e0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d125      	bne.n	8005d30 <UART_SetConfig+0xf0>
 8005ce4:	4b8f      	ldr	r3, [pc, #572]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d81a      	bhi.n	8005d28 <UART_SetConfig+0xe8>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0xb8>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	e116      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d16:	e112      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1e:	e10e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d26:	e10a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2e:	e106      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a7c      	ldr	r2, [pc, #496]	; (8005f28 <UART_SetConfig+0x2e8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d138      	bne.n	8005dac <UART_SetConfig+0x16c>
 8005d3a:	4b7a      	ldr	r3, [pc, #488]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d82d      	bhi.n	8005da4 <UART_SetConfig+0x164>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <UART_SetConfig+0x110>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005da5 	.word	0x08005da5
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8a:	e0d8      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d92:	e0d4      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9a:	e0d0      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da2:	e0cc      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005daa:	e0c8      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5e      	ldr	r2, [pc, #376]	; (8005f2c <UART_SetConfig+0x2ec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d125      	bne.n	8005e02 <UART_SetConfig+0x1c2>
 8005db6:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d016      	beq.n	8005df2 <UART_SetConfig+0x1b2>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d818      	bhi.n	8005dfa <UART_SetConfig+0x1ba>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d00a      	beq.n	8005de2 <UART_SetConfig+0x1a2>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d814      	bhi.n	8005dfa <UART_SetConfig+0x1ba>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <UART_SetConfig+0x19a>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d008      	beq.n	8005dea <UART_SetConfig+0x1aa>
 8005dd8:	e00f      	b.n	8005dfa <UART_SetConfig+0x1ba>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de0:	e0ad      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005de2:	2302      	movs	r3, #2
 8005de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de8:	e0a9      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005dea:	2304      	movs	r3, #4
 8005dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df0:	e0a5      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005df2:	2308      	movs	r3, #8
 8005df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df8:	e0a1      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e00:	e09d      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <UART_SetConfig+0x2f0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d125      	bne.n	8005e58 <UART_SetConfig+0x218>
 8005e0c:	4b45      	ldr	r3, [pc, #276]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e16:	2bc0      	cmp	r3, #192	; 0xc0
 8005e18:	d016      	beq.n	8005e48 <UART_SetConfig+0x208>
 8005e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e1c:	d818      	bhi.n	8005e50 <UART_SetConfig+0x210>
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d00a      	beq.n	8005e38 <UART_SetConfig+0x1f8>
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d814      	bhi.n	8005e50 <UART_SetConfig+0x210>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <UART_SetConfig+0x1f0>
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d008      	beq.n	8005e40 <UART_SetConfig+0x200>
 8005e2e:	e00f      	b.n	8005e50 <UART_SetConfig+0x210>
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e082      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e07e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e07a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e076      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e56:	e072      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <UART_SetConfig+0x2f4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d12a      	bne.n	8005eb8 <UART_SetConfig+0x278>
 8005e62:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e70:	d01a      	beq.n	8005ea8 <UART_SetConfig+0x268>
 8005e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e76:	d81b      	bhi.n	8005eb0 <UART_SetConfig+0x270>
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d00c      	beq.n	8005e98 <UART_SetConfig+0x258>
 8005e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e82:	d815      	bhi.n	8005eb0 <UART_SetConfig+0x270>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <UART_SetConfig+0x250>
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8c:	d008      	beq.n	8005ea0 <UART_SetConfig+0x260>
 8005e8e:	e00f      	b.n	8005eb0 <UART_SetConfig+0x270>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e052      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e04e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e04a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e046      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e042      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <UART_SetConfig+0x2dc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d13a      	bne.n	8005f38 <UART_SetConfig+0x2f8>
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed0:	d01a      	beq.n	8005f08 <UART_SetConfig+0x2c8>
 8005ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed6:	d81b      	bhi.n	8005f10 <UART_SetConfig+0x2d0>
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005edc:	d00c      	beq.n	8005ef8 <UART_SetConfig+0x2b8>
 8005ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee2:	d815      	bhi.n	8005f10 <UART_SetConfig+0x2d0>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <UART_SetConfig+0x2b0>
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d008      	beq.n	8005f00 <UART_SetConfig+0x2c0>
 8005eee:	e00f      	b.n	8005f10 <UART_SetConfig+0x2d0>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	e022      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e01e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e01a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e016      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e012      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f18:	cfff69f3 	.word	0xcfff69f3
 8005f1c:	40008000 	.word	0x40008000
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004800 	.word	0x40004800
 8005f30:	40004c00 	.word	0x40004c00
 8005f34:	40005000 	.word	0x40005000
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4aae      	ldr	r2, [pc, #696]	; (80061fc <UART_SetConfig+0x5bc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	f040 8097 	bne.w	8006078 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d823      	bhi.n	8005f9a <UART_SetConfig+0x35a>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <UART_SetConfig+0x318>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f9b 	.word	0x08005f9b
 8005f68:	08005f8b 	.word	0x08005f8b
 8005f6c:	08005f9b 	.word	0x08005f9b
 8005f70:	08005f9b 	.word	0x08005f9b
 8005f74:	08005f9b 	.word	0x08005f9b
 8005f78:	08005f93 	.word	0x08005f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fe fd80 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8005f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f82:	e010      	b.n	8005fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f84:	4b9e      	ldr	r3, [pc, #632]	; (8006200 <UART_SetConfig+0x5c0>)
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f88:	e00d      	b.n	8005fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7fe fd0b 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f90:	e009      	b.n	8005fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f98:	e005      	b.n	8005fa6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8130 	beq.w	800620e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	4a94      	ldr	r2, [pc, #592]	; (8006204 <UART_SetConfig+0x5c4>)
 8005fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	4413      	add	r3, r2
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d305      	bcc.n	8005fde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d903      	bls.n	8005fe6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fe4:	e113      	b.n	800620e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2200      	movs	r2, #0
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	60fa      	str	r2, [r7, #12]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	4a84      	ldr	r2, [pc, #528]	; (8006204 <UART_SetConfig+0x5c4>)
 8005ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006004:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006008:	f7fa f906 	bl	8000218 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	020b      	lsls	r3, r1, #8
 800601e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006022:	0202      	lsls	r2, r0, #8
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	6849      	ldr	r1, [r1, #4]
 8006028:	0849      	lsrs	r1, r1, #1
 800602a:	2000      	movs	r0, #0
 800602c:	460c      	mov	r4, r1
 800602e:	4605      	mov	r5, r0
 8006030:	eb12 0804 	adds.w	r8, r2, r4
 8006034:	eb43 0905 	adc.w	r9, r3, r5
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	469a      	mov	sl, r3
 8006040:	4693      	mov	fp, r2
 8006042:	4652      	mov	r2, sl
 8006044:	465b      	mov	r3, fp
 8006046:	4640      	mov	r0, r8
 8006048:	4649      	mov	r1, r9
 800604a:	f7fa f8e5 	bl	8000218 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4613      	mov	r3, r2
 8006054:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605c:	d308      	bcc.n	8006070 <UART_SetConfig+0x430>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006064:	d204      	bcs.n	8006070 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e0ce      	b.n	800620e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006076:	e0ca      	b.n	800620e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006080:	d166      	bne.n	8006150 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006086:	2b08      	cmp	r3, #8
 8006088:	d827      	bhi.n	80060da <UART_SetConfig+0x49a>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x450>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
 80060b0:	080060d3 	.word	0x080060d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fe fce4 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060ba:	e014      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fe fcf6 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060c2:	e010      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b4e      	ldr	r3, [pc, #312]	; (8006200 <UART_SetConfig+0x5c0>)
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c8:	e00d      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fe fc6b 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8090 	beq.w	800620e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	4a44      	ldr	r2, [pc, #272]	; (8006204 <UART_SetConfig+0x5c4>)
 80060f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006100:	005a      	lsls	r2, r3, #1
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	441a      	add	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d916      	bls.n	8006148 <UART_SetConfig+0x508>
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006120:	d212      	bcs.n	8006148 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f023 030f 	bic.w	r3, r3, #15
 800612a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	b29a      	uxth	r2, r3
 8006138:	8bfb      	ldrh	r3, [r7, #30]
 800613a:	4313      	orrs	r3, r2
 800613c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	8bfa      	ldrh	r2, [r7, #30]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	e062      	b.n	800620e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800614e:	e05e      	b.n	800620e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006154:	2b08      	cmp	r3, #8
 8006156:	d828      	bhi.n	80061aa <UART_SetConfig+0x56a>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x520>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006185 	.word	0x08006185
 8006164:	0800618d 	.word	0x0800618d
 8006168:	08006195 	.word	0x08006195
 800616c:	080061ab 	.word	0x080061ab
 8006170:	0800619b 	.word	0x0800619b
 8006174:	080061ab 	.word	0x080061ab
 8006178:	080061ab 	.word	0x080061ab
 800617c:	080061ab 	.word	0x080061ab
 8006180:	080061a3 	.word	0x080061a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fe fc7c 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8006188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800618a:	e014      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7fe fc8e 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006192:	e010      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006194:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <UART_SetConfig+0x5c0>)
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006198:	e00d      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619a:	f7fe fc03 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061a0:	e009      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061a8:	e005      	b.n	80061b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061b4:	bf00      	nop
    }

    if (pclk != 0U)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d028      	beq.n	800620e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	4a10      	ldr	r2, [pc, #64]	; (8006204 <UART_SetConfig+0x5c4>)
 80061c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	441a      	add	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	fbb2 f3f3 	udiv	r3, r2, r3
 80061de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	2b0f      	cmp	r3, #15
 80061e4:	d910      	bls.n	8006208 <UART_SetConfig+0x5c8>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ec:	d20c      	bcs.n	8006208 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0x5ce>
 80061fa:	bf00      	nop
 80061fc:	40008000 	.word	0x40008000
 8006200:	00f42400 	.word	0x00f42400
 8006204:	08006be4 	.word	0x08006be4
      }
      else
      {
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2201      	movs	r2, #1
 8006212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2201      	movs	r2, #1
 800621a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800622a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800622e:	4618      	mov	r0, r3
 8006230:	3730      	adds	r7, #48	; 0x30
 8006232:	46bd      	mov	sp, r7
 8006234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01a      	beq.n	800634e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006336:	d10a      	bne.n	800634e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b098      	sub	sp, #96	; 0x60
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800638c:	f7fb fc58 	bl	8001c40 <HAL_GetTick>
 8006390:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d12f      	bne.n	8006400 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a8:	2200      	movs	r2, #0
 80063aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f88e 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d022      	beq.n	8006400 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	653b      	str	r3, [r7, #80]	; 0x50
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e063      	b.n	80064c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b04      	cmp	r3, #4
 800640c:	d149      	bne.n	80064a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800640e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006416:	2200      	movs	r2, #0
 8006418:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f857 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d03c      	beq.n	80064a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	623b      	str	r3, [r7, #32]
   return(result);
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006446:	633b      	str	r3, [r7, #48]	; 0x30
 8006448:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800644c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e6      	bne.n	8006428 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	60fb      	str	r3, [r7, #12]
   return(result);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647a:	61fa      	str	r2, [r7, #28]
 800647c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	617b      	str	r3, [r7, #20]
   return(result);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e012      	b.n	80064c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3758      	adds	r7, #88	; 0x58
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e0:	e04f      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d04b      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fb fba9 	bl	8001c40 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e04e      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d037      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b80      	cmp	r3, #128	; 0x80
 8006516:	d034      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d031      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d110      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2208      	movs	r2, #8
 8006532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f838 	bl	80065aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2208      	movs	r2, #8
 800653e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e029      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655c:	d111      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f81e 	bl	80065aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e00f      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d0a0      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b095      	sub	sp, #84	; 0x54
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	643b      	str	r3, [r7, #64]	; 0x40
 80065d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800660e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e3      	bne.n	80065e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d118      	bne.n	8006656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	60bb      	str	r3, [r7, #8]
   return(result);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 0310 	bic.w	r3, r3, #16
 8006638:	647b      	str	r3, [r7, #68]	; 0x44
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6979      	ldr	r1, [r7, #20]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	613b      	str	r3, [r7, #16]
   return(result);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e6      	bne.n	8006624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	675a      	str	r2, [r3, #116]	; 0x74
}
 800666a:	bf00      	nop
 800666c:	3754      	adds	r7, #84	; 0x54
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e058      	b.n	8006740 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7fb f887 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2224      	movs	r2, #36	; 0x24
 80066aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fdb6 	bl	8006238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff fab7 	bl	8005c40 <UART_SetConfig>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e031      	b.n	8006740 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ea:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	055b      	lsls	r3, r3, #21
 8006704:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800671a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	6979      	ldr	r1, [r7, #20]
 8006724:	430b      	orrs	r3, r1
 8006726:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fe1f 	bl	800637c <UART_CheckIdleState>
 800673e:	4603      	mov	r3, r0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_UARTEx_DisableFifoMode+0x16>
 800675a:	2302      	movs	r3, #2
 800675c:	e027      	b.n	80067ae <HAL_UARTEx_DisableFifoMode+0x66>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2224      	movs	r2, #36	; 0x24
 800676a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800678c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e02d      	b.n	800682e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2224      	movs	r2, #36	; 0x24
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f850 	bl	80068b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800684a:	2302      	movs	r3, #2
 800684c:	e02d      	b.n	80068aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2224      	movs	r2, #36	; 0x24
 800685a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f812 	bl	80068b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d108      	bne.n	80068d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068d4:	e031      	b.n	800693a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068d6:	2308      	movs	r3, #8
 80068d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068da:	2308      	movs	r3, #8
 80068dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	0e5b      	lsrs	r3, r3, #25
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	0f5b      	lsrs	r3, r3, #29
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	7b3a      	ldrb	r2, [r7, #12]
 8006902:	4911      	ldr	r1, [pc, #68]	; (8006948 <UARTEx_SetNbDataToProcess+0x94>)
 8006904:	5c8a      	ldrb	r2, [r1, r2]
 8006906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800690a:	7b3a      	ldrb	r2, [r7, #12]
 800690c:	490f      	ldr	r1, [pc, #60]	; (800694c <UARTEx_SetNbDataToProcess+0x98>)
 800690e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006910:	fb93 f3f2 	sdiv	r3, r3, r2
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	7b7a      	ldrb	r2, [r7, #13]
 8006920:	4909      	ldr	r1, [pc, #36]	; (8006948 <UARTEx_SetNbDataToProcess+0x94>)
 8006922:	5c8a      	ldrb	r2, [r1, r2]
 8006924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006928:	7b7a      	ldrb	r2, [r7, #13]
 800692a:	4908      	ldr	r1, [pc, #32]	; (800694c <UARTEx_SetNbDataToProcess+0x98>)
 800692c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800692e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	08006bfc 	.word	0x08006bfc
 800694c:	08006c04 	.word	0x08006c04

08006950 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006958:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800695c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	b29b      	uxth	r3, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	b29b      	uxth	r3, r3
 800696e:	4013      	ands	r3, r2
 8006970:	b29a      	uxth	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <atoi>:
 80069c2:	220a      	movs	r2, #10
 80069c4:	2100      	movs	r1, #0
 80069c6:	f000 b883 	b.w	8006ad0 <strtol>
	...

080069cc <_strtol_l.constprop.0>:
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d2:	d001      	beq.n	80069d8 <_strtol_l.constprop.0+0xc>
 80069d4:	2b24      	cmp	r3, #36	; 0x24
 80069d6:	d906      	bls.n	80069e6 <_strtol_l.constprop.0+0x1a>
 80069d8:	f000 f88c 	bl	8006af4 <__errno>
 80069dc:	2316      	movs	r3, #22
 80069de:	6003      	str	r3, [r0, #0]
 80069e0:	2000      	movs	r0, #0
 80069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006acc <_strtol_l.constprop.0+0x100>
 80069ea:	460d      	mov	r5, r1
 80069ec:	462e      	mov	r6, r5
 80069ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80069f6:	f017 0708 	ands.w	r7, r7, #8
 80069fa:	d1f7      	bne.n	80069ec <_strtol_l.constprop.0+0x20>
 80069fc:	2c2d      	cmp	r4, #45	; 0x2d
 80069fe:	d132      	bne.n	8006a66 <_strtol_l.constprop.0+0x9a>
 8006a00:	782c      	ldrb	r4, [r5, #0]
 8006a02:	2701      	movs	r7, #1
 8006a04:	1cb5      	adds	r5, r6, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d05b      	beq.n	8006ac2 <_strtol_l.constprop.0+0xf6>
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d109      	bne.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006a0e:	2c30      	cmp	r4, #48	; 0x30
 8006a10:	d107      	bne.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006a12:	782c      	ldrb	r4, [r5, #0]
 8006a14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006a18:	2c58      	cmp	r4, #88	; 0x58
 8006a1a:	d14d      	bne.n	8006ab8 <_strtol_l.constprop.0+0xec>
 8006a1c:	786c      	ldrb	r4, [r5, #1]
 8006a1e:	2310      	movs	r3, #16
 8006a20:	3502      	adds	r5, #2
 8006a22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006a26:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a2a:	f04f 0e00 	mov.w	lr, #0
 8006a2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006a32:	4676      	mov	r6, lr
 8006a34:	fb03 8a19 	mls	sl, r3, r9, r8
 8006a38:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006a3c:	f1bc 0f09 	cmp.w	ip, #9
 8006a40:	d816      	bhi.n	8006a70 <_strtol_l.constprop.0+0xa4>
 8006a42:	4664      	mov	r4, ip
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	dd24      	ble.n	8006a92 <_strtol_l.constprop.0+0xc6>
 8006a48:	f1be 3fff 	cmp.w	lr, #4294967295
 8006a4c:	d008      	beq.n	8006a60 <_strtol_l.constprop.0+0x94>
 8006a4e:	45b1      	cmp	r9, r6
 8006a50:	d31c      	bcc.n	8006a8c <_strtol_l.constprop.0+0xc0>
 8006a52:	d101      	bne.n	8006a58 <_strtol_l.constprop.0+0x8c>
 8006a54:	45a2      	cmp	sl, r4
 8006a56:	db19      	blt.n	8006a8c <_strtol_l.constprop.0+0xc0>
 8006a58:	fb06 4603 	mla	r6, r6, r3, r4
 8006a5c:	f04f 0e01 	mov.w	lr, #1
 8006a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a64:	e7e8      	b.n	8006a38 <_strtol_l.constprop.0+0x6c>
 8006a66:	2c2b      	cmp	r4, #43	; 0x2b
 8006a68:	bf04      	itt	eq
 8006a6a:	782c      	ldrbeq	r4, [r5, #0]
 8006a6c:	1cb5      	addeq	r5, r6, #2
 8006a6e:	e7ca      	b.n	8006a06 <_strtol_l.constprop.0+0x3a>
 8006a70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a74:	f1bc 0f19 	cmp.w	ip, #25
 8006a78:	d801      	bhi.n	8006a7e <_strtol_l.constprop.0+0xb2>
 8006a7a:	3c37      	subs	r4, #55	; 0x37
 8006a7c:	e7e2      	b.n	8006a44 <_strtol_l.constprop.0+0x78>
 8006a7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a82:	f1bc 0f19 	cmp.w	ip, #25
 8006a86:	d804      	bhi.n	8006a92 <_strtol_l.constprop.0+0xc6>
 8006a88:	3c57      	subs	r4, #87	; 0x57
 8006a8a:	e7db      	b.n	8006a44 <_strtol_l.constprop.0+0x78>
 8006a8c:	f04f 3eff 	mov.w	lr, #4294967295
 8006a90:	e7e6      	b.n	8006a60 <_strtol_l.constprop.0+0x94>
 8006a92:	f1be 3fff 	cmp.w	lr, #4294967295
 8006a96:	d105      	bne.n	8006aa4 <_strtol_l.constprop.0+0xd8>
 8006a98:	2322      	movs	r3, #34	; 0x22
 8006a9a:	6003      	str	r3, [r0, #0]
 8006a9c:	4646      	mov	r6, r8
 8006a9e:	b942      	cbnz	r2, 8006ab2 <_strtol_l.constprop.0+0xe6>
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	e79e      	b.n	80069e2 <_strtol_l.constprop.0+0x16>
 8006aa4:	b107      	cbz	r7, 8006aa8 <_strtol_l.constprop.0+0xdc>
 8006aa6:	4276      	negs	r6, r6
 8006aa8:	2a00      	cmp	r2, #0
 8006aaa:	d0f9      	beq.n	8006aa0 <_strtol_l.constprop.0+0xd4>
 8006aac:	f1be 0f00 	cmp.w	lr, #0
 8006ab0:	d000      	beq.n	8006ab4 <_strtol_l.constprop.0+0xe8>
 8006ab2:	1e69      	subs	r1, r5, #1
 8006ab4:	6011      	str	r1, [r2, #0]
 8006ab6:	e7f3      	b.n	8006aa0 <_strtol_l.constprop.0+0xd4>
 8006ab8:	2430      	movs	r4, #48	; 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1b1      	bne.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	e7af      	b.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006ac2:	2c30      	cmp	r4, #48	; 0x30
 8006ac4:	d0a5      	beq.n	8006a12 <_strtol_l.constprop.0+0x46>
 8006ac6:	230a      	movs	r3, #10
 8006ac8:	e7ab      	b.n	8006a22 <_strtol_l.constprop.0+0x56>
 8006aca:	bf00      	nop
 8006acc:	08006c0d 	.word	0x08006c0d

08006ad0 <strtol>:
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	4601      	mov	r1, r0
 8006ad6:	4802      	ldr	r0, [pc, #8]	; (8006ae0 <strtol+0x10>)
 8006ad8:	6800      	ldr	r0, [r0, #0]
 8006ada:	f7ff bf77 	b.w	80069cc <_strtol_l.constprop.0>
 8006ade:	bf00      	nop
 8006ae0:	20000058 	.word	0x20000058

08006ae4 <memset>:
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d100      	bne.n	8006aee <memset+0xa>
 8006aec:	4770      	bx	lr
 8006aee:	f803 1b01 	strb.w	r1, [r3], #1
 8006af2:	e7f9      	b.n	8006ae8 <memset+0x4>

08006af4 <__errno>:
 8006af4:	4b01      	ldr	r3, [pc, #4]	; (8006afc <__errno+0x8>)
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000058 	.word	0x20000058

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4d0d      	ldr	r5, [pc, #52]	; (8006b38 <__libc_init_array+0x38>)
 8006b04:	4c0d      	ldr	r4, [pc, #52]	; (8006b3c <__libc_init_array+0x3c>)
 8006b06:	1b64      	subs	r4, r4, r5
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	4d0b      	ldr	r5, [pc, #44]	; (8006b40 <__libc_init_array+0x40>)
 8006b12:	4c0c      	ldr	r4, [pc, #48]	; (8006b44 <__libc_init_array+0x44>)
 8006b14:	f000 f818 	bl	8006b48 <_init>
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	42a6      	cmp	r6, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b28:	4798      	blx	r3
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b32:	4798      	blx	r3
 8006b34:	3601      	adds	r6, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	08006d18 	.word	0x08006d18
 8006b3c:	08006d18 	.word	0x08006d18
 8006b40:	08006d18 	.word	0x08006d18
 8006b44:	08006d1c 	.word	0x08006d1c

08006b48 <_init>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr

08006b54 <_fini>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr
