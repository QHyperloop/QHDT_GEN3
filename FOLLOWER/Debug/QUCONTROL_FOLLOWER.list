
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008348  08008348  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008350  08008350  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb0  2000005c  080083b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d0c  080083b4  00020d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000258c0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004303  00000000  00000000  0004598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa0  00000000  00000000  00049c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ae  00000000  00000000  0004bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000535e  00000000  00000000  0004d4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027940  00000000  00000000  00052844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122204  00000000  00000000  0007a184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b3c  00000000  00000000  0019c388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a4ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008170 	.word	0x08008170

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08008170 	.word	0x08008170

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <IMD_Req_Isolation>:
		err = CAN3_MSG_ERR;
	}
	return err;
}

error_handler IMD_Req_Isolation(){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 800051a:	2305      	movs	r3, #5
 800051c:	71fb      	strb	r3, [r7, #7]
	TxHeader_Pod.Identifier = IMD_ID;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <IMD_Req_Isolation+0x3c>)
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <IMD_Req_Isolation+0x40>)
 8000522:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_1;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <IMD_Req_Isolation+0x3c>)
 8000526:	2201      	movs	r2, #1
 8000528:	60da      	str	r2, [r3, #12]
	uint8_t temp_data[] = {0xE0};
 800052a:	23e0      	movs	r3, #224	; 0xe0
 800052c:	713b      	strb	r3, [r7, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_Pod, temp_data)!= HAL_OK){
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	461a      	mov	r2, r3
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <IMD_Req_Isolation+0x3c>)
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <IMD_Req_Isolation+0x44>)
 8000536:	f003 ff61 	bl	80043fc <HAL_FDCAN_AddMessageToTxFifoQ>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <IMD_Req_Isolation+0x30>
		err = CAN3_MSG_ERR;
 8000540:	2302      	movs	r3, #2
 8000542:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 8000544:	79fb      	ldrb	r3, [r7, #7]

}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000009c 	.word	0x2000009c
 8000554:	0a100101 	.word	0x0a100101
 8000558:	200003c8 	.word	0x200003c8

0800055c <Sensor_Data>:
	return err;


}

error_handler Sensor_Data(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 8000562:	2305      	movs	r3, #5
 8000564:	71fb      	strb	r3, [r7, #7]
	TxHeader_Master_Data.Identifier = 0x01000100 | FOLLOWER_ID;
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <Sensor_Data+0xbc>)
 8000568:	4a2c      	ldr	r2, [pc, #176]	; (800061c <Sensor_Data+0xc0>)
 800056a:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <Sensor_Data+0xbc>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <Sensor_Data+0xbc>)
 8000574:	220a      	movs	r2, #10
 8000576:	60da      	str	r2, [r3, #12]
	uint8_t Temperature_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Temperature_Data)!= HAL_OK){
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	461a      	mov	r2, r3
 800057c:	4926      	ldr	r1, [pc, #152]	; (8000618 <Sensor_Data+0xbc>)
 800057e:	4828      	ldr	r0, [pc, #160]	; (8000620 <Sensor_Data+0xc4>)
 8000580:	f003 ff3c 	bl	80043fc <HAL_FDCAN_AddMessageToTxFifoQ>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <Sensor_Data+0x32>
		err = CAN1_MSG_ERR;
 800058a:	2304      	movs	r3, #4
 800058c:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000200 | FOLLOWER_ID;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <Sensor_Data+0xbc>)
 8000590:	4a24      	ldr	r2, [pc, #144]	; (8000624 <Sensor_Data+0xc8>)
 8000592:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <Sensor_Data+0xbc>)
 8000596:	220a      	movs	r2, #10
 8000598:	60da      	str	r2, [r3, #12]
	uint8_t ESC_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, ESC_Data)!= HAL_OK){
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	461a      	mov	r2, r3
 800059e:	491e      	ldr	r1, [pc, #120]	; (8000618 <Sensor_Data+0xbc>)
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <Sensor_Data+0xc4>)
 80005a2:	f003 ff2b 	bl	80043fc <HAL_FDCAN_AddMessageToTxFifoQ>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <Sensor_Data+0x54>
		err = CAN2_MSG_ERR;
 80005ac:	2303      	movs	r3, #3
 80005ae:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000300 | FOLLOWER_ID;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <Sensor_Data+0xbc>)
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <Sensor_Data+0xcc>)
 80005b4:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_2;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <Sensor_Data+0xbc>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	60da      	str	r2, [r3, #12]
	uint8_t Relay_Data[] = {0x00,0x00};
 80005bc:	2300      	movs	r3, #0
 80005be:	803b      	strh	r3, [r7, #0]
	Relay_Data[0] = (RelayStates & 0xFF00) >> 8;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <Sensor_Data+0xd0>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	703b      	strb	r3, [r7, #0]
	Relay_Data[1] = (RelayStates & 0x00FF);
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <Sensor_Data+0xd0>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	707b      	strb	r3, [r7, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Relay_Data)!= HAL_OK){
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	490f      	ldr	r1, [pc, #60]	; (8000618 <Sensor_Data+0xbc>)
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <Sensor_Data+0xc4>)
 80005dc:	f003 ff0e 	bl	80043fc <HAL_FDCAN_AddMessageToTxFifoQ>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <Sensor_Data+0x8e>
		err = CAN2_MSG_ERR;
 80005e6:	2303      	movs	r3, #3
 80005e8:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000400 | FOLLOWER_ID;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <Sensor_Data+0xbc>)
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <Sensor_Data+0xd4>)
 80005ee:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <Sensor_Data+0xbc>)
 80005f2:	220a      	movs	r2, #10
 80005f4:	60da      	str	r2, [r3, #12]
	uint8_t Batt_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Batt_Data)!= HAL_OK){
 80005f6:	463b      	mov	r3, r7
 80005f8:	461a      	mov	r2, r3
 80005fa:	4907      	ldr	r1, [pc, #28]	; (8000618 <Sensor_Data+0xbc>)
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <Sensor_Data+0xc4>)
 80005fe:	f003 fefd 	bl	80043fc <HAL_FDCAN_AddMessageToTxFifoQ>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <Sensor_Data+0xb0>
		err = CAN2_MSG_ERR;
 8000608:	2303      	movs	r3, #3
 800060a:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000078 	.word	0x20000078
 800061c:	01000101 	.word	0x01000101
 8000620:	20000364 	.word	0x20000364
 8000624:	01000201 	.word	0x01000201
 8000628:	01000301 	.word	0x01000301
 800062c:	20000bbe 	.word	0x20000bbe
 8000630:	01000401 	.word	0x01000401

08000634 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Master, RxData_Master) != HAL_OK){
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000640:	4a35      	ldr	r2, [pc, #212]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f003 ff1d 	bl	8004484 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
	if((RxHeader_Master.Identifier & 0x000000FF) == 0x00){
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d147      	bne.n	80006e4 <HAL_FDCAN_RxFifo0Callback+0xb0>
		if(RxHeader_Master.Identifier == 0x00001000){
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800065c:	d102      	bne.n	8000664 <HAL_FDCAN_RxFifo0Callback+0x30>
			//init
			Curr_State = INIT;
 800065e:	4b2f      	ldr	r3, [pc, #188]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001100){
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800066c:	d102      	bne.n	8000674 <HAL_FDCAN_RxFifo0Callback+0x40>
			//Fault
			Curr_State = FAULT;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001200){
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800067c:	d102      	bne.n	8000684 <HAL_FDCAN_RxFifo0Callback+0x50>
			//safe to approach
			Curr_State = SAFE_TO_APPROACH;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000680:	2202      	movs	r2, #2
 8000682:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001300){
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 800068c:	d102      	bne.n	8000694 <HAL_FDCAN_RxFifo0Callback+0x60>
			//coast
			Curr_State = COAST;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000690:	2205      	movs	r2, #5
 8000692:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001400){
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800069c:	d102      	bne.n	80006a4 <HAL_FDCAN_RxFifo0Callback+0x70>
			//brake
			Curr_State = BRAKE;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006a0:	2206      	movs	r2, #6
 80006a2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001500){
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f5b3 5fa8 	cmp.w	r3, #5376	; 0x1500
 80006ac:	d102      	bne.n	80006b4 <HAL_FDCAN_RxFifo0Callback+0x80>
			//crawl
			Curr_State = CRAWL;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001600){
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80006bc:	d102      	bne.n	80006c4 <HAL_FDCAN_RxFifo0Callback+0x90>
			//track
			Curr_State = TRACK;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x0000FF00){
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80006cc:	d102      	bne.n	80006d4 <HAL_FDCAN_RxFifo0Callback+0xa0>
			//launch
			Curr_State = LAUNCH;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001700){
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f5b3 5fb8 	cmp.w	r3, #5888	; 0x1700
 80006dc:	d102      	bne.n	80006e4 <HAL_FDCAN_RxFifo0Callback+0xb0>
			//ready to launch
			Curr_State = READY;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006e0:	2203      	movs	r2, #3
 80006e2:	701a      	strb	r2, [r3, #0]
		}
	}
	if((RxHeader_Master.Identifier & 0x0000FFFF) == (0x0000FF00 | FOLLOWER_ID)){
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f64f 7201 	movw	r2, #65281	; 0xff01
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_FDCAN_RxFifo0Callback+0xc2>
		Sensor_Data();
 80006f2:	f7ff ff33 	bl	800055c <Sensor_Data>

	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80006fc:	f003 ffca 	bl	8004694 <HAL_FDCAN_ActivateNotification>
			//fault
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000706:	f003 ffc5 	bl	8004694 <HAL_FDCAN_ActivateNotification>
			//fault
	}


}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000118 	.word	0x20000118
 8000718:	200000c0 	.word	0x200000c0
 800071c:	20000bbd 	.word	0x20000bbd
 8000720:	20000300 	.word	0x20000300
 8000724:	20000364 	.word	0x20000364

08000728 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader_Pod, RxData_Pod) != HAL_OK){
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000734:	4a45      	ldr	r2, [pc, #276]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8000736:	2141      	movs	r1, #65	; 0x41
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f003 fea3 	bl	8004484 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
// HE NE HU - HV LV IS1 ISO
	if(RxHeader_Pod.Identifier == IMD_ID){
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <HAL_FDCAN_RxFifo1Callback+0x128>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d121      	bne.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
		if((RxData_Pod[1] & 0x40) == 0x40){
 8000748:	4b3f      	ldr	r3, [pc, #252]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	2b00      	cmp	r3, #0
 8000752:	d01b      	beq.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
			if((RxData_Pod[1] & 0x03) == 0b10){
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	f003 0303 	and.w	r3, r3, #3
 800075c:	2b02      	cmp	r3, #2
 800075e:	d105      	bne.n	800076c <HAL_FDCAN_RxFifo1Callback+0x44>
				ISO_STATE = 0xF0; //Warning set LED to yellow
 8000760:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8000762:	22f0      	movs	r2, #240	; 0xf0
 8000764:	701a      	strb	r2, [r3, #0]
				IMD_Req_Isolation();
 8000766:	f7ff fed5 	bl	8000514 <IMD_Req_Isolation>
 800076a:	e00f      	b.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
			}else if((RxData_Pod[1] & 0x03) == 0b11){
 800076c:	4b36      	ldr	r3, [pc, #216]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800076e:	785b      	ldrb	r3, [r3, #1]
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	2b03      	cmp	r3, #3
 8000776:	d106      	bne.n	8000786 <HAL_FDCAN_RxFifo1Callback+0x5e>
				ISO_STATE = 0xFF; //fault set LED to Red and full estop
 8000778:	4b36      	ldr	r3, [pc, #216]	; (8000854 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 800077a:	22ff      	movs	r2, #255	; 0xff
 800077c:	701a      	strb	r2, [r3, #0]
				Curr_State = FAULT;
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <HAL_FDCAN_RxFifo1Callback+0x130>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e002      	b.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
			}else{
				ISO_STATE = 0x00; //all good
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
			}
		}
	}else{
		//fault
	}
	if((RxHeader_Pod.Identifier & 0x000000FF) == BMS_ID){
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b99      	cmp	r3, #153	; 0x99
 8000794:	d14e      	bne.n	8000834 <HAL_FDCAN_RxFifo1Callback+0x10c>
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0900){
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800079e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80007a2:	d11c      	bne.n	80007de <HAL_FDCAN_RxFifo1Callback+0xb6>
			//status 1
			M_RPM = (RxData_Pod[7]<<24) | (RxData_Pod[6]<<16) | (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007a6:	79db      	ldrb	r3, [r3, #7]
 80007a8:	061a      	lsls	r2, r3, #24
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	431a      	orrs	r2, r3
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	4313      	orrs	r3, r2
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007bc:	7912      	ldrb	r2, [r2, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <HAL_FDCAN_RxFifo1Callback+0x134>)
 80007c4:	601a      	str	r2, [r3, #0]
			M_Current = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <HAL_FDCAN_RxFifo1Callback+0x138>)
 80007dc:	801a      	strh	r2, [r3, #0]
			//status 2
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0F00){
			//status 3
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1000){
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80007e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ea:	d123      	bne.n	8000834 <HAL_FDCAN_RxFifo1Callback+0x10c>
			//status 4
			M_Temp_fet = (RxData_Pod[7]<<8) | (RxData_Pod[6]);
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007ee:	79db      	ldrb	r3, [r3, #7]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007f6:	799b      	ldrb	r3, [r3, #6]
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 8000802:	801a      	strh	r2, [r3, #0]
			M_Temp_motor = (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000806:	795b      	ldrb	r3, [r3, #5]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_FDCAN_RxFifo1Callback+0x140>)
 800081a:	801a      	strh	r2, [r3, #0]
			M_Current_in = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800081e:	78db      	ldrb	r3, [r3, #3]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_FDCAN_RxFifo1Callback+0x144>)
 8000832:	801a      	strh	r2, [r3, #0]
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1B00){
			//status 5
		}
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <HAL_FDCAN_RxFifo1Callback+0x148>)
 800083a:	f003 ff2b 	bl	8004694 <HAL_FDCAN_ActivateNotification>
		//fault
	}

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000110 	.word	0x20000110
 800084c:	200000e8 	.word	0x200000e8
 8000850:	0a100101 	.word	0x0a100101
 8000854:	20000bbc 	.word	0x20000bbc
 8000858:	20000bbd 	.word	0x20000bbd
 800085c:	20000158 	.word	0x20000158
 8000860:	2000015c 	.word	0x2000015c
 8000864:	2000015e 	.word	0x2000015e
 8000868:	20000160 	.word	0x20000160
 800086c:	20000162 	.word	0x20000162
 8000870:	200003c8 	.word	0x200003c8

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f001 fd21 	bl	80022be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f830 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 fd52 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 8000884:	f000 fd06 	bl	8001294 <MX_DMA_Init>
  MX_ADC1_Init();
 8000888:	f000 f87c 	bl	8000984 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800088c:	f000 f988 	bl	8000ba0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000890:	f000 f9ce 	bl	8000c30 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8000894:	f000 fa14 	bl	8000cc0 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8000898:	f000 fa5a 	bl	8000d50 <MX_I2C1_Init>
  MX_SPI1_Init();
 800089c:	f000 fbce 	bl	800103c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80008a0:	f000 fcd0 	bl	8001244 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80008a4:	f000 fa94 	bl	8000dd0 <MX_I2C2_Init>
  MX_IWDG_Init();
 80008a8:	f000 fb12 	bl	8000ed0 <MX_IWDG_Init>
  MX_ADC5_Init();
 80008ac:	f000 f912 	bl	8000ad4 <MX_ADC5_Init>
  MX_I2C3_Init();
 80008b0:	f000 face 	bl	8000e50 <MX_I2C3_Init>
  MX_SPI3_Init();
 80008b4:	f000 fc00 	bl	80010b8 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 80008b8:	f000 fb28 	bl	8000f0c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80008bc:	f000 fc3a 	bl	8001134 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fb70 	bl	8000fa4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80008c4:	f000 fc86 	bl	80011d4 <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <main+0x68>)
 80008ce:	f004 fbcd 	bl	800506c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80008d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d6:	f001 fd63 	bl	80023a0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008da:	e7f5      	b.n	80008c8 <main+0x54>
 80008dc:	48000c00 	.word	0x48000c00

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	2238      	movs	r2, #56	; 0x38
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f007 fc0c 	bl	800810c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000906:	f004 fe45 	bl	8005594 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 800090a:	232a      	movs	r3, #42	; 0x2a
 800090c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4618      	mov	r0, r3
 8000942:	f004 fedb 	bl	80056fc <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800094c:	f000 fdd6 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2303      	movs	r3, #3
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000966:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f005 f9d7 	bl	8005d20 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000978:	f000 fdc0 	bl	80014fc <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f007 fbb5 	bl	800810c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009ca:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d6:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80009dc:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009de:	2204      	movs	r2, #4
 80009e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f0:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009fe:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a04:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0c:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a0e:	f001 ff01 	bl	8002814 <HAL_ADC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a18:	f000 fd70 	bl	80014fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a28:	f002 ffbc 	bl	80039a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a32:	f000 fd63 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_ADC1_Init+0x140>)
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a42:	237f      	movs	r3, #127	; 0x7f
 8000a44:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a46:	2304      	movs	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a54:	f002 fb0e 	bl	8003074 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a5e:	f000 fd4d 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC1_Init+0x144>)
 8000a64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a66:	230c      	movs	r3, #12
 8000a68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a70:	f002 fb00 	bl	8003074 <HAL_ADC_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000a7a:	f000 fd3f 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_ADC1_Init+0x148>)
 8000a80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a82:	2312      	movs	r3, #18
 8000a84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000a8c:	f002 faf2 	bl	8003074 <HAL_ADC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000a96:	f000 fd31 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_ADC1_Init+0x14c>)
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a9e:	2318      	movs	r3, #24
 8000aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_ADC1_Init+0x13c>)
 8000aa8:	f002 fae4 	bl	8003074 <HAL_ADC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000ab2:	f000 fd23 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3730      	adds	r7, #48	; 0x30
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000168 	.word	0x20000168
 8000ac4:	04300002 	.word	0x04300002
 8000ac8:	08600004 	.word	0x08600004
 8000acc:	0c900008 	.word	0x0c900008
 8000ad0:	10c00010 	.word	0x10c00010

08000ad4 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2220      	movs	r2, #32
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 fb13 	bl	800810c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000ae8:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <MX_ADC5_Init+0xc4>)
 8000aea:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000af2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b0e:	2204      	movs	r2, #4
 8000b10:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b50:	f001 fe60 	bl	8002814 <HAL_ADC_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000b5a:	f000 fccf 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_ADC5_Init+0xc8>)
 8000b60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b62:	2306      	movs	r3, #6
 8000b64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b6a:	237f      	movs	r3, #127	; 0x7f
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_ADC5_Init+0xc0>)
 8000b7c:	f002 fa7a 	bl	8003074 <HAL_ADC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000b86:	f000 fcb9 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001d4 	.word	0x200001d4
 8000b98:	50000600 	.word	0x50000600
 8000b9c:	08600004 	.word	0x08600004

08000ba0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <MX_FDCAN1_Init+0x8c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bb2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bb6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 167;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bde:	22a7      	movs	r2, #167	; 0xa7
 8000be0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 17;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bea:	2211      	movs	r2, #17
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_FDCAN1_Init+0x88>)
 8000c14:	f003 fa98 	bl	8004148 <HAL_FDCAN_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000c1e:	f000 fc6d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000300 	.word	0x20000300
 8000c2c:	40006400 	.word	0x40006400

08000c30 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c36:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <MX_FDCAN2_Init+0x8c>)
 8000c38:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c46:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 167;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c6e:	22a7      	movs	r2, #167	; 0xa7
 8000c70:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 17;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c7a:	2211      	movs	r2, #17
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c86:	2205      	movs	r2, #5
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_FDCAN2_Init+0x88>)
 8000ca4:	f003 fa50 	bl	8004148 <HAL_FDCAN_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000cae:	f000 fc25 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000364 	.word	0x20000364
 8000cbc:	40006800 	.word	0x40006800

08000cc0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <MX_FDCAN3_Init+0x8c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cd2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cd6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 2;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000cfe:	22a7      	movs	r2, #167	; 0xa7
 8000d00:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 17;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d0a:	2211      	movs	r2, #17
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 4;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 5;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d16:	2205      	movs	r2, #5
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_FDCAN3_Init+0x88>)
 8000d34:	f003 fa08 	bl	8004148 <HAL_FDCAN_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8000d3e:	f000 fbdd 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200003c8 	.word	0x200003c8
 8000d4c:	40006c00 	.word	0x40006c00

08000d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	f004 f988 	bl	80050a0 <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 fbb1 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9e:	f004 fa1a 	bl	80051d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 fba8 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000db0:	f004 fa5c 	bl	800526c <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fb9f 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000042c 	.word	0x2000042c
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40000a0b 	.word	0x40000a0b

08000dd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_I2C2_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40000A0B;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <MX_I2C2_Init+0x7c>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e0c:	f004 f948 	bl	80050a0 <HAL_I2C_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e16:	f000 fb71 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e1e:	f004 f9da 	bl	80051d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 fb68 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e30:	f004 fa1c 	bl	800526c <HAL_I2CEx_ConfigDigitalFilter>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fb5f 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000480 	.word	0x20000480
 8000e48:	40005800 	.word	0x40005800
 8000e4c:	40000a0b 	.word	0x40000a0b

08000e50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <MX_I2C3_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40000A0B;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <MX_I2C3_Init+0x7c>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e8c:	f004 f908 	bl	80050a0 <HAL_I2C_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e96:	f000 fb31 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000e9e:	f004 f99a 	bl	80051d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ea8:	f000 fb28 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_I2C3_Init+0x74>)
 8000eb0:	f004 f9dc 	bl	800526c <HAL_I2CEx_ConfigDigitalFilter>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 fb1f 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200004d4 	.word	0x200004d4
 8000ec8:	40007800 	.word	0x40007800
 8000ecc:	40000a0b 	.word	0x40000a0b

08000ed0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_IWDG_Init+0x34>)
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <MX_IWDG_Init+0x38>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_IWDG_Init+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_IWDG_Init+0x34>)
 8000ee2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ee6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_IWDG_Init+0x34>)
 8000eea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000eee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_IWDG_Init+0x34>)
 8000ef2:	f004 fa07 	bl	8005304 <HAL_IWDG_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000efc:	f000 fafe 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000648 	.word	0x20000648
 8000f08:	40003000 	.word	0x40003000

08000f0c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <MX_LPUART1_UART_Init+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	4811      	ldr	r0, [pc, #68]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f56:	f006 fea2 	bl	8007c9e <HAL_RS485Ex_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f60:	f000 facc 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f68:	f006 ff3b 	bl	8007de2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 fac3 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f7a:	f006 ff70 	bl	8007e5e <HAL_UARTEx_SetRxFifoThreshold>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f000 faba 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f8a:	f006 fef1 	bl	8007d70 <HAL_UARTEx_DisableFifoMode>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 fab2 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000658 	.word	0x20000658
 8000fa0:	40008000 	.word	0x40008000

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <MX_USART2_UART_Init+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fec:	4811      	ldr	r0, [pc, #68]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fee:	f006 f8eb 	bl	80071c8 <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f000 fa80 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8001000:	f006 feef 	bl	8007de2 <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800100a:	f000 fa77 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8001012:	f006 ff24 	bl	8007e5e <HAL_UARTEx_SetRxFifoThreshold>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800101c:	f000 fa6e 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8001022:	f006 fea5 	bl	8007d70 <HAL_UARTEx_DisableFifoMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 fa66 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200006ec 	.word	0x200006ec
 8001038:	40004400 	.word	0x40004400

0800103c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_SPI1_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800104c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001056:	f44f 7240 	mov.w	r2, #768	; 0x300
 800105a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_SPI1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_SPI1_Init+0x74>)
 800106a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_SPI1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_SPI1_Init+0x74>)
 800108a:	2207      	movs	r2, #7
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001096:	2208      	movs	r2, #8
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_SPI1_Init+0x74>)
 800109c:	f005 faaa 	bl	80065f4 <HAL_SPI_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 fa29 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000780 	.word	0x20000780
 80010b4:	40013000 	.word	0x40013000

080010b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_SPI3_Init+0x74>)
 80010be:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <MX_SPI3_Init+0x78>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_SPI3_Init+0x74>)
 80010c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_SPI3_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI3_Init+0x74>)
 80010d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI3_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_SPI3_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI3_Init+0x74>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI3_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI3_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI3_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_SPI3_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI3_Init+0x74>)
 8001106:	2207      	movs	r2, #7
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_SPI3_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI3_Init+0x74>)
 8001112:	2208      	movs	r2, #8
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_SPI3_Init+0x74>)
 8001118:	f005 fa6c 	bl	80065f4 <HAL_SPI_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 f9eb 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200007e4 	.word	0x200007e4
 8001130:	40003c00 	.word	0x40003c00

08001134 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_TIM2_Init+0x98>)
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_TIM2_Init+0x98>)
 800115c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM2_Init+0x98>)
 8001164:	2210      	movs	r2, #16
 8001166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_TIM2_Init+0x98>)
 800116a:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <MX_TIM2_Init+0x9c>)
 800116c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_TIM2_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_TIM2_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117a:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_TIM2_Init+0x98>)
 800117c:	f005 fae5 	bl	800674a <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001186:	f000 f9b9 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_TIM2_Init+0x98>)
 8001198:	f005 fcac 	bl	8006af4 <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011a2:	f000 f9ab 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_TIM2_Init+0x98>)
 80011b4:	f005 ff2c 	bl	8007010 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011be:	f000 f99d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000848 	.word	0x20000848
 80011d0:	004c4b40 	.word	0x004c4b40

080011d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM6_Init+0x68>)
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <MX_TIM6_Init+0x6c>)
 80011e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 26009;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_TIM6_Init+0x68>)
 80011ec:	f246 5299 	movw	r2, #26009	; 0x6599
 80011f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_TIM6_Init+0x68>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65358;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_TIM6_Init+0x68>)
 80011fa:	f64f 724e 	movw	r2, #65358	; 0xff4e
 80011fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_TIM6_Init+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM6_Init+0x68>)
 8001208:	f005 fa9f 	bl	800674a <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001212:	f000 f973 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM6_Init+0x68>)
 8001224:	f005 fef4 	bl	8007010 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800122e:	f000 f965 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000894 	.word	0x20000894
 8001240:	40001000 	.word	0x40001000

08001244 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <MX_USB_PCD_Init+0x48>)
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <MX_USB_PCD_Init+0x4c>)
 800124c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USB_PCD_Init+0x48>)
 8001250:	2208      	movs	r2, #8
 8001252:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <MX_USB_PCD_Init+0x48>)
 8001256:	2202      	movs	r2, #2
 8001258:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USB_PCD_Init+0x48>)
 800125c:	2202      	movs	r2, #2
 800125e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_USB_PCD_Init+0x48>)
 8001262:	2200      	movs	r2, #0
 8001264:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USB_PCD_Init+0x48>)
 8001268:	2200      	movs	r2, #0
 800126a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_USB_PCD_Init+0x48>)
 800126e:	2200      	movs	r2, #0
 8001270:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USB_PCD_Init+0x48>)
 8001274:	2200      	movs	r2, #0
 8001276:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_USB_PCD_Init+0x48>)
 800127a:	f004 f892 	bl	80053a2 <HAL_PCD_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001284:	f000 f93a 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200008e0 	.word	0x200008e0
 8001290:	40005c00 	.word	0x40005c00

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_DMA_Init+0x90>)
 800129c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129e:	4a21      	ldr	r2, [pc, #132]	; (8001324 <MX_DMA_Init+0x90>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6493      	str	r3, [r2, #72]	; 0x48
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_DMA_Init+0x90>)
 80012a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_DMA_Init+0x90>)
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <MX_DMA_Init+0x90>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6493      	str	r3, [r2, #72]	; 0x48
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_DMA_Init+0x90>)
 80012c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	200b      	movs	r0, #11
 80012d0:	f002 fd4b 	bl	8003d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012d4:	200b      	movs	r0, #11
 80012d6:	f002 fd62 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	200c      	movs	r0, #12
 80012e0:	f002 fd43 	bl	8003d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012e4:	200c      	movs	r0, #12
 80012e6:	f002 fd5a 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	200d      	movs	r0, #13
 80012f0:	f002 fd3b 	bl	8003d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012f4:	200d      	movs	r0, #13
 80012f6:	f002 fd52 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	200e      	movs	r0, #14
 8001300:	f002 fd33 	bl	8003d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001304:	200e      	movs	r0, #14
 8001306:	f002 fd4a 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	200f      	movs	r0, #15
 8001310:	f002 fd2b 	bl	8003d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001314:	200f      	movs	r0, #15
 8001316:	f002 fd42 	bl	8003d9e <HAL_NVIC_EnableIRQ>

}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133e:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a5b      	ldr	r2, [pc, #364]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <MX_GPIO_Init+0x188>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <MX_GPIO_Init+0x188>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <MX_GPIO_Init+0x188>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <MX_GPIO_Init+0x188>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <MX_GPIO_Init+0x188>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a43      	ldr	r2, [pc, #268]	; (80014b0 <MX_GPIO_Init+0x188>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <MX_GPIO_Init+0x188>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2140      	movs	r1, #64	; 0x40
 80013ba:	483e      	ldr	r0, [pc, #248]	; (80014b4 <MX_GPIO_Init+0x18c>)
 80013bc:	f003 fe3e 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	483c      	ldr	r0, [pc, #240]	; (80014b8 <MX_GPIO_Init+0x190>)
 80013c8:	f003 fe38 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013cc:	2201      	movs	r2, #1
 80013ce:	f64e 7180 	movw	r1, #61312	; 0xef80
 80013d2:	4838      	ldr	r0, [pc, #224]	; (80014b4 <MX_GPIO_Init+0x18c>)
 80013d4:	f003 fe32 	bl	800503c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_GPIO_Init+0x194>)
 80013e0:	f003 fe2c 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80013ea:	4835      	ldr	r0, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x198>)
 80013ec:	f003 fe26 	bl	800503c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	211c      	movs	r1, #28
 80013f4:	4832      	ldr	r0, [pc, #200]	; (80014c0 <MX_GPIO_Init+0x198>)
 80013f6:	f003 fe21 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013fa:	233c      	movs	r3, #60	; 0x3c
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4829      	ldr	r0, [pc, #164]	; (80014b4 <MX_GPIO_Init+0x18c>)
 800140e:	f003 fc93 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001412:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8001416:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4822      	ldr	r0, [pc, #136]	; (80014b4 <MX_GPIO_Init+0x18c>)
 800142c:	f003 fc84 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	481b      	ldr	r0, [pc, #108]	; (80014b8 <MX_GPIO_Init+0x190>)
 800144a:	f003 fc75 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800144e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <MX_GPIO_Init+0x194>)
 8001468:	f003 fc66 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800146c:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8001470:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480e      	ldr	r0, [pc, #56]	; (80014c0 <MX_GPIO_Init+0x198>)
 8001486:	f003 fc57 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f003 fc49 	bl	8004d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48001000 	.word	0x48001000
 80014b8:	48000800 	.word	0x48000800
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48000c00 	.word	0x48000c00

080014c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	test = test + 1;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014d6:	701a      	strb	r2, [r3, #0]
	if (htim == &htim6) {

		//UPDATE_TEMP();
		//Fault_Flag = IMD_Req_Isolation();
	}
	if (htim == &htim2) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d104      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0x26>
		HV_on();
 80014e0:	f000 f812 	bl	8001508 <HV_on>
		HAL_TIM_Base_Stop_IT(&htim2);
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014e6:	f005 f987 	bl	80067f8 <HAL_TIM_Base_Stop_IT>
	}
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000164 	.word	0x20000164
 80014f8:	20000848 	.word	0x20000848

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <HV_on>:
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
	RelayStates = RelayStates | 0x00C6;
	HAL_TIM_Base_Start_IT(&htim2);
}
void HV_on(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 800150c:	481b      	ldr	r0, [pc, #108]	; (800157c <HV_on+0x74>)
 800150e:	f006 fd6c 	bl	8007fea <atoi>
 8001512:	4603      	mov	r3, r0
 8001514:	b29b      	uxth	r3, r3
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	4819      	ldr	r0, [pc, #100]	; (8001580 <HV_on+0x78>)
 800151c:	f003 fd8e 	bl	800503c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 8001520:	4818      	ldr	r0, [pc, #96]	; (8001584 <HV_on+0x7c>)
 8001522:	f006 fd62 	bl	8007fea <atoi>
 8001526:	4603      	mov	r3, r0
 8001528:	b29b      	uxth	r3, r3
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	4814      	ldr	r0, [pc, #80]	; (8001580 <HV_on+0x78>)
 8001530:	f003 fd84 	bl	800503c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 8001534:	4814      	ldr	r0, [pc, #80]	; (8001588 <HV_on+0x80>)
 8001536:	f006 fd58 	bl	8007fea <atoi>
 800153a:	4603      	mov	r3, r0
 800153c:	b29b      	uxth	r3, r3
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <HV_on+0x78>)
 8001544:	f003 fd7a 	bl	800503c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <HV_on+0x84>)
 800154a:	f006 fd4e 	bl	8007fea <atoi>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	2200      	movs	r2, #0
 8001554:	4619      	mov	r1, r3
 8001556:	480a      	ldr	r0, [pc, #40]	; (8001580 <HV_on+0x78>)
 8001558:	f003 fd70 	bl	800503c <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x0021;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HV_on+0x88>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HV_on+0x88>)
 8001568:	801a      	strh	r2, [r3, #0]
	RelayStates = RelayStates & 0xFFBD;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HV_on+0x88>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f023 0342 	bic.w	r3, r3, #66	; 0x42
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HV_on+0x88>)
 8001576:	801a      	strh	r2, [r3, #0]

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	080081b8 	.word	0x080081b8
 8001580:	48001000 	.word	0x48001000
 8001584:	080081c4 	.word	0x080081c4
 8001588:	080081a0 	.word	0x080081a0
 800158c:	080081ac 	.word	0x080081ac
 8001590:	20000bbe 	.word	0x20000bbe

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ca:	f004 f887 	bl	80056dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a0      	sub	sp, #128	; 0x80
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	2254      	movs	r2, #84	; 0x54
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 fd85 	bl	800810c <memset>
  if(hadc->Instance==ADC1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800160a:	d168      	bne.n	80016de <HAL_ADC_MspInit+0x102>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800160c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001610:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001612:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001616:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fd9b 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001628:	f7ff ff68 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	4a60      	ldr	r2, [pc, #384]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 8001632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001638:	4b5e      	ldr	r3, [pc, #376]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800165c:	230f      	movs	r3, #15
 800165e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001660:	2303      	movs	r3, #3
 8001662:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f003 fb61 	bl	8004d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 8001678:	4a50      	ldr	r2, [pc, #320]	; (80017bc <HAL_ADC_MspInit+0x1e0>)
 800167a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800167c:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 800167e:	2205      	movs	r2, #5
 8001680:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001694:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800169c:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 800169e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016a4:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 80016a6:	2220      	movs	r2, #32
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016b0:	4841      	ldr	r0, [pc, #260]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 80016b2:	f002 fb8f 	bl	8003dd4 <HAL_DMA_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80016bc:	f7ff ff1e 	bl	80014fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
 80016c6:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <HAL_ADC_MspInit+0x1dc>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2012      	movs	r0, #18
 80016d2:	f002 fb4a 	bl	8003d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016d6:	2012      	movs	r0, #18
 80016d8:	f002 fb61 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80016dc:	e065      	b.n	80017aa <HAL_ADC_MspInit+0x1ce>
  else if(hadc->Instance==ADC5)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a37      	ldr	r2, [pc, #220]	; (80017c0 <HAL_ADC_MspInit+0x1e4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d160      	bne.n	80017aa <HAL_ADC_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016f2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fd2d 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_ADC_MspInit+0x12c>
      Error_Handler();
 8001704:	f7ff fefa 	bl	80014fc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001724:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_ADC_MspInit+0x1d8>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173e:	2303      	movs	r3, #3
 8001740:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f003 faf2 	bl	8004d38 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_ADC_MspInit+0x1ec>)
 8001758:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 800175c:	2227      	movs	r2, #39	; 0x27
 800175e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 8001774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001778:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001780:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 8001790:	f002 fb20 	bl	8003dd4 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_ADC_MspInit+0x1c2>
      Error_Handler();
 800179a:	f7ff feaf 	bl	80014fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 80017a2:	655a      	str	r2, [r3, #84]	; 0x54
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_ADC_MspInit+0x1e8>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017aa:	bf00      	nop
 80017ac:	3780      	adds	r7, #128	; 0x80
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	20000240 	.word	0x20000240
 80017bc:	40020008 	.word	0x40020008
 80017c0:	50000600 	.word	0x50000600
 80017c4:	200002a0 	.word	0x200002a0
 80017c8:	40020058 	.word	0x40020058

080017cc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0a2      	sub	sp, #136	; 0x88
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	2254      	movs	r2, #84	; 0x54
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 fc8d 	bl	800810c <memset>
  if(hfdcan->Instance==FDCAN1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_FDCAN_MspInit+0x214>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d14b      	bne.n	8001894 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001800:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001806:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fca3 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001818:	f7ff fe70 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800181c:	4b71      	ldr	r3, [pc, #452]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	4a70      	ldr	r2, [pc, #448]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 8001824:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10b      	bne.n	8001846 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800182e:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a6d      	ldr	r2, [pc, #436]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a67      	ldr	r2, [pc, #412]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800185e:	2303      	movs	r3, #3
 8001860:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001870:	2309      	movs	r3, #9
 8001872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800187a:	4619      	mov	r1, r3
 800187c:	485b      	ldr	r0, [pc, #364]	; (80019ec <HAL_FDCAN_MspInit+0x220>)
 800187e:	f003 fa5b 	bl	8004d38 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2015      	movs	r0, #21
 8001888:	f002 fa6f 	bl	8003d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800188c:	2015      	movs	r0, #21
 800188e:	f002 fa86 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001892:	e0a1      	b.n	80019d8 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <HAL_FDCAN_MspInit+0x224>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d14c      	bne.n	8001938 <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80018a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fc52 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 80018ba:	f7ff fe1f 	bl	80014fc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 80018c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80018c8:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d10b      	bne.n	80018e8 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 80018d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018da:	6593      	str	r3, [r2, #88]	; 0x58
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	4a3e      	ldr	r2, [pc, #248]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f4:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001900:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001904:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001914:	2309      	movs	r3, #9
 8001916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800191e:	4619      	mov	r1, r3
 8001920:	4834      	ldr	r0, [pc, #208]	; (80019f4 <HAL_FDCAN_MspInit+0x228>)
 8001922:	f003 fa09 	bl	8004d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2056      	movs	r0, #86	; 0x56
 800192c:	f002 fa1d 	bl	8003d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001930:	2056      	movs	r0, #86	; 0x56
 8001932:	f002 fa34 	bl	8003d9e <HAL_NVIC_EnableIRQ>
}
 8001936:	e04f      	b.n	80019d8 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_FDCAN_MspInit+0x22c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d14a      	bne.n	80019d8 <HAL_FDCAN_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fc00 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_FDCAN_MspInit+0x196>
      Error_Handler();
 800195e:	f7ff fdcd 	bl	80014fc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 800196a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_FDCAN_MspInit+0x218>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d10b      	bne.n	800198c <HAL_FDCAN_MspInit+0x1c0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 800197a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_FDCAN_MspInit+0x21c>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019a4:	2318      	movs	r3, #24
 80019a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80019b6:	230b      	movs	r3, #11
 80019b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019c0:	4619      	mov	r1, r3
 80019c2:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HAL_FDCAN_MspInit+0x228>)
 80019c4:	f003 f9b8 	bl	8004d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	2059      	movs	r0, #89	; 0x59
 80019ce:	f002 f9cc 	bl	8003d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 80019d2:	2059      	movs	r0, #89	; 0x59
 80019d4:	f002 f9e3 	bl	8003d9e <HAL_NVIC_EnableIRQ>
}
 80019d8:	bf00      	nop
 80019da:	3788      	adds	r7, #136	; 0x88
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40006400 	.word	0x40006400
 80019e4:	20000bc0 	.word	0x20000bc0
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	40006800 	.word	0x40006800
 80019f4:	48000400 	.word	0x48000400
 80019f8:	40006c00 	.word	0x40006c00

080019fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0a4      	sub	sp, #144	; 0x90
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a18:	2254      	movs	r2, #84	; 0x54
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f006 fb75 	bl	800810c <memset>
  if(hi2c->Instance==I2C1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a8a      	ldr	r2, [pc, #552]	; (8001c50 <HAL_I2C_MspInit+0x254>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	f040 80af 	bne.w	8001b8c <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a2e:	2340      	movs	r3, #64	; 0x40
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fb8c 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a46:	f7ff fd59 	bl	80014fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a81      	ldr	r2, [pc, #516]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a7b      	ldr	r2, [pc, #492]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b79      	ldr	r3, [pc, #484]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a80:	2312      	movs	r3, #18
 8001a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a92:	2304      	movs	r3, #4
 8001a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f003 f949 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	2312      	movs	r3, #18
 8001aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001abc:	2304      	movs	r3, #4
 8001abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4863      	ldr	r0, [pc, #396]	; (8001c58 <HAL_I2C_MspInit+0x25c>)
 8001aca:	f003 f935 	bl	8004d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	4a60      	ldr	r2, [pc, #384]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001ae8:	4a5d      	ldr	r2, [pc, #372]	; (8001c60 <HAL_I2C_MspInit+0x264>)
 8001aea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001aec:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001aee:	2210      	movs	r2, #16
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b58      	ldr	r3, [pc, #352]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b04:	4b55      	ldr	r3, [pc, #340]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001b1c:	484f      	ldr	r0, [pc, #316]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b1e:	f002 f959 	bl	8003dd4 <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8001b28:	f7ff fce8 	bl	80014fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b32:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <HAL_I2C_MspInit+0x260>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_I2C_MspInit+0x26c>)
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b40:	2211      	movs	r2, #17
 8001b42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b46:	2210      	movs	r2, #16
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b56:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001b6e:	483d      	ldr	r0, [pc, #244]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b70:	f002 f930 	bl	8003dd4 <HAL_DMA_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 8001b7a:	f7ff fcbf 	bl	80014fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b82:	639a      	str	r2, [r3, #56]	; 0x38
 8001b84:	4a37      	ldr	r2, [pc, #220]	; (8001c64 <HAL_I2C_MspInit+0x268>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b8a:	e0dd      	b.n	8001d48 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a36      	ldr	r2, [pc, #216]	; (8001c6c <HAL_I2C_MspInit+0x270>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d16e      	bne.n	8001c74 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fad8 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001bae:	f7ff fca5 	bl	80014fc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001be2:	2310      	movs	r3, #16
 8001be4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be6:	2312      	movs	r3, #18
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c02:	4619      	mov	r1, r3
 8001c04:	481a      	ldr	r0, [pc, #104]	; (8001c70 <HAL_I2C_MspInit+0x274>)
 8001c06:	f003 f897 	bl	8004d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c22:	2304      	movs	r3, #4
 8001c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f003 f881 	bl	8004d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_I2C_MspInit+0x258>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
}
 8001c4e:	e07b      	b.n	8001d48 <HAL_I2C_MspInit+0x34c>
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40021000 	.word	0x40021000
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	20000528 	.word	0x20000528
 8001c60:	4002001c 	.word	0x4002001c
 8001c64:	20000588 	.word	0x20000588
 8001c68:	40020030 	.word	0x40020030
 8001c6c:	40005800 	.word	0x40005800
 8001c70:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a35      	ldr	r2, [pc, #212]	; (8001d50 <HAL_I2C_MspInit+0x354>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d164      	bne.n	8001d48 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fa63 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 8001c98:	f7ff fc30 	bl	80014fc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_I2C_MspInit+0x358>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <HAL_I2C_MspInit+0x358>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_I2C_MspInit+0x358>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cba:	2312      	movs	r3, #18
 8001cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481f      	ldr	r0, [pc, #124]	; (8001d58 <HAL_I2C_MspInit+0x35c>)
 8001cda:	f003 f82d 	bl	8004d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_I2C_MspInit+0x358>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_I2C_MspInit+0x358>)
 8001ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_I2C_MspInit+0x358>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_I2C_MspInit+0x364>)
 8001cfa:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001cfe:	2214      	movs	r2, #20
 8001d00:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d2e:	f002 f851 	bl	8003dd4 <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_MspInit+0x340>
      Error_Handler();
 8001d38:	f7ff fbe0 	bl	80014fc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_I2C_MspInit+0x360>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d48:	bf00      	nop
 8001d4a:	3790      	adds	r7, #144	; 0x90
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40007800 	.word	0x40007800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	200005e8 	.word	0x200005e8
 8001d60:	40020044 	.word	0x40020044

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0a2      	sub	sp, #136	; 0x88
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	2254      	movs	r2, #84	; 0x54
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f006 f9c1 	bl	800810c <memset>
  if(huart->Instance==LPUART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a4e      	ldr	r2, [pc, #312]	; (8001ec8 <HAL_UART_MspInit+0x164>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d157      	bne.n	8001e44 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d94:	2320      	movs	r3, #32
 8001d96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f9d8 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dae:	f7ff fba5 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	4a45      	ldr	r2, [pc, #276]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e16:	4619      	mov	r1, r3
 8001e18:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <HAL_UART_MspInit+0x16c>)
 8001e1a:	f002 ff8d 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e30:	230c      	movs	r3, #12
 8001e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <HAL_UART_MspInit+0x170>)
 8001e3e:	f002 ff7b 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e42:	e03c      	b.n	8001ebe <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_UART_MspInit+0x174>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d137      	bne.n	8001ebe <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 f97c 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0x106>
      Error_Handler();
 8001e66:	f7ff fb49 	bl	80014fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_UART_MspInit+0x168>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e9a:	2360      	movs	r3, #96	; 0x60
 8001e9c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eac:	2307      	movs	r3, #7
 8001eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4808      	ldr	r0, [pc, #32]	; (8001edc <HAL_UART_MspInit+0x178>)
 8001eba:	f002 ff3d 	bl	8004d38 <HAL_GPIO_Init>
}
 8001ebe:	bf00      	nop
 8001ec0:	3788      	adds	r7, #136	; 0x88
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40008000 	.word	0x40008000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	48000c00 	.word	0x48000c00

08001ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <HAL_SPI_MspInit+0xdc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d129      	bne.n	8001f56 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	4a2e      	ldr	r2, [pc, #184]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23e0      	movs	r3, #224	; 0xe0
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f42:	2305      	movs	r3, #5
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f002 fef2 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f54:	e02d      	b.n	8001fb2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_SPI_MspInit+0xe4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d128      	bne.n	8001fb2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_MspInit+0xe0>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_SPI_MspInit+0xe8>)
 8001fae:	f002 fec3 	bl	8004d38 <HAL_GPIO_Init>
}
 8001fb2:	bf00      	nop
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40013000 	.word	0x40013000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40003c00 	.word	0x40003c00
 8001fc8:	48000800 	.word	0x48000800

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d114      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_TIM_Base_MspInit+0x78>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_Base_MspInit+0x78>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_TIM_Base_MspInit+0x78>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	201c      	movs	r0, #28
 8001ffc:	f001 feb5 	bl	8003d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002000:	201c      	movs	r0, #28
 8002002:	f001 fecc 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002006:	e018      	b.n	800203a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <HAL_TIM_Base_MspInit+0x7c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d113      	bne.n	800203a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_TIM_Base_MspInit+0x78>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_TIM_Base_MspInit+0x78>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_TIM_Base_MspInit+0x78>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	2036      	movs	r0, #54	; 0x36
 8002030:	f001 fe9b 	bl	8003d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002034:	2036      	movs	r0, #54	; 0x36
 8002036:	f001 feb2 	bl	8003d9e <HAL_NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40001000 	.word	0x40001000

0800204c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b098      	sub	sp, #96	; 0x60
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2254      	movs	r2, #84	; 0x54
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f006 f855 	bl	800810c <memset>
  if(hpcd->Instance==USB)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_PCD_MspInit+0x60>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d11a      	bne.n	80020a2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800206c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002070:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002072:	2300      	movs	r3, #0
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	4618      	mov	r0, r3
 800207c:	f004 f86c 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002086:	f7ff fa39 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_PCD_MspInit+0x64>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_PCD_MspInit+0x64>)
 8002090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_PCD_MspInit+0x64>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3760      	adds	r7, #96	; 0x60
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40005c00 	.word	0x40005c00
 80020b0:	40021000 	.word	0x40021000

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b8:	e7fe      	b.n	80020b8 <NMI_Handler+0x4>

080020ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <MemManage_Handler+0x4>

080020c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002100:	f000 f930 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <DMA1_Channel1_IRQHandler+0x10>)
 800210e:	f001 ff09 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000240 	.word	0x20000240

0800211c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <DMA1_Channel2_IRQHandler+0x10>)
 8002122:	f001 feff 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000528 	.word	0x20000528

08002130 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA1_Channel3_IRQHandler+0x10>)
 8002136:	f001 fef5 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000588 	.word	0x20000588

08002144 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA1_Channel4_IRQHandler+0x10>)
 800214a:	f001 feeb 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200005e8 	.word	0x200005e8

08002158 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <DMA1_Channel5_IRQHandler+0x10>)
 800215e:	f001 fee1 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200002a0 	.word	0x200002a0

0800216c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <ADC1_2_IRQHandler+0x10>)
 8002172:	f000 fd0b 	bl	8002b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000168 	.word	0x20000168

08002180 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <FDCAN1_IT0_IRQHandler+0x10>)
 8002186:	f002 fb6b 	bl	8004860 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000300 	.word	0x20000300

08002194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// T_out = ((ARR+1)(PSC+1))/F_clk

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM2_IRQHandler+0x10>)
 800219a:	f004 fb5c 	bl	8006856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000848 	.word	0x20000848

080021a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM6_DAC_IRQHandler+0x10>)
 80021ae:	f004 fb52 	bl	8006856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000894 	.word	0x20000894

080021bc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <FDCAN2_IT0_IRQHandler+0x10>)
 80021c2:	f002 fb4d 	bl	8004860 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000364 	.word	0x20000364

080021d0 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <FDCAN3_IT1_IRQHandler+0x10>)
 80021d6:	f002 fb43 	bl	8004860 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200003c8 	.word	0x200003c8

080021e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <HAL_ADC_ConvCpltCallback>:
		status = MCP1_TEMPFAULT; //temp fault
	}
	return status;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){ // inidcates which adc is done running conversion and raises flag
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002218:	d112      	bne.n	8002240 <HAL_ADC_ConvCpltCallback+0x38>
		if(adc1_pos == 3){
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_ADC_ConvCpltCallback+0x54>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d106      	bne.n	8002232 <HAL_ADC_ConvCpltCallback+0x2a>
			adc1_pos = 0;
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_ADC_ConvCpltCallback+0x54>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
			adc1_convert = 1;
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_ADC_ConvCpltCallback+0x58>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e006      	b.n	8002240 <HAL_ADC_ConvCpltCallback+0x38>
		}else{
			adc1_pos = adc1_pos+1;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_ADC_ConvCpltCallback+0x54>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_ADC_ConvCpltCallback+0x54>)
 800223e:	701a      	strb	r2, [r3, #0]
		}

	}
	if(hadc->Instance == ADC5){
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d102      	bne.n	8002250 <HAL_ADC_ConvCpltCallback+0x48>
		adc5_convert = 1;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_ADC_ConvCpltCallback+0x60>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
	}

}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	20000bcc 	.word	0x20000bcc
 8002260:	20000bc4 	.word	0x20000bc4
 8002264:	50000600 	.word	0x50000600
 8002268:	20000bc8 	.word	0x20000bc8

0800226c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800226e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002270:	f7ff ffb8 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <LoopForever+0xe>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <LoopForever+0x16>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229a:	f005 ff45 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229e:	f7fe fae9 	bl	8000874 <main>

080022a2 <LoopForever>:

LoopForever:
    b LoopForever
 80022a2:	e7fe      	b.n	80022a2 <LoopForever>
  ldr   r0, =_estack
 80022a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80022b0:	08008358 	.word	0x08008358
  ldr r2, =_sbss
 80022b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80022b8:	20000d0c 	.word	0x20000d0c

080022bc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC3_IRQHandler>

080022be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f001 fd43 	bl	8003d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ce:	200f      	movs	r0, #15
 80022d0:	f000 f80e 	bl	80022f0 <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	e001      	b.n	80022e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e0:	f7ff f958 	bl	8001594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e4:	79fb      	ldrb	r3, [r7, #7]

}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_InitTick+0x68>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d022      	beq.n	800234a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_InitTick+0x6c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_InitTick+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002310:	fbb1 f3f3 	udiv	r3, r1, r3
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4618      	mov	r0, r3
 800231a:	f001 fd4e 	bl	8003dba <HAL_SYSTICK_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d809      	bhi.n	800233e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232a:	2200      	movs	r2, #0
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	f04f 30ff 	mov.w	r0, #4294967295
 8002332:	f001 fd1a 	bl	8003d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_InitTick+0x70>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e007      	b.n	800234e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e004      	b.n	800234e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000008 	.word	0x20000008
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_IncTick+0x1c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_IncTick+0x20>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4413      	add	r3, r2
 8002372:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_IncTick+0x1c>)
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	20000bd0 	.word	0x20000bd0
 8002384:	20000008 	.word	0x20000008

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000bd0 	.word	0x20000bd0

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff ffee 	bl	8002388 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d004      	beq.n	80023c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_Delay+0x40>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c4:	bf00      	nop
 80023c6:	f7ff ffdf 	bl	8002388 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d8f7      	bhi.n	80023c6 <HAL_Delay+0x26>
  {
  }
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000008 	.word	0x20000008

080023e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3360      	adds	r3, #96	; 0x60
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <LL_ADC_SetOffset+0x44>)
 800246e:	4013      	ands	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	4313      	orrs	r3, r2
 800247c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	03fff000 	.word	0x03fff000

08002494 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3360      	adds	r3, #96	; 0x60
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3360      	adds	r3, #96	; 0x60
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b087      	sub	sp, #28
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3360      	adds	r3, #96	; 0x60
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	431a      	orrs	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3360      	adds	r3, #96	; 0x60
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	615a      	str	r2, [r3, #20]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3330      	adds	r3, #48	; 0x30
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	4413      	add	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	211f      	movs	r1, #31
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 011f 	and.w	r1, r3, #31
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3314      	adds	r3, #20
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0e5b      	lsrs	r3, r3, #25
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	0d1b      	lsrs	r3, r3, #20
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2107      	movs	r1, #7
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	401a      	ands	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0d1b      	lsrs	r3, r3, #20
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	431a      	orrs	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0318 	and.w	r3, r3, #24
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a8:	40d9      	lsrs	r1, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	400b      	ands	r3, r1
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	0007ffff 	.word	0x0007ffff

080026cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 031f 	and.w	r3, r3, #31
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6093      	str	r3, [r2, #8]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273c:	d101      	bne.n	8002742 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002764:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278c:	d101      	bne.n	8002792 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <LL_ADC_IsEnabled+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_ADC_IsEnabled+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d101      	bne.n	80027de <LL_ADC_REG_IsConversionOngoing+0x18>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d101      	bne.n	8002804 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1a9      	b.n	8002b82 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fe fecd 	bl	80015dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff67 	bl	8002728 <LL_ADC_IsDeepPowerDownEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff4d 	bl	8002704 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff82 	bl	8002778 <LL_ADC_IsInternalRegulatorEnabled>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff66 	bl	8002750 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002884:	4b9c      	ldr	r3, [pc, #624]	; (8002af8 <HAL_ADC_Init+0x2e4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	4a9c      	ldr	r2, [pc, #624]	; (8002afc <HAL_ADC_Init+0x2e8>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002898:	e002      	b.n	80028a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3b01      	subs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f9      	bne.n	800289a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff64 	bl	8002778 <LL_ADC_IsInternalRegulatorEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff75 	bl	80027c6 <LL_ADC_REG_IsConversionOngoing>
 80028dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 8142 	bne.w	8002b70 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 813e 	bne.w	8002b70 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028fc:	f043 0202 	orr.w	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff49 	bl	80027a0 <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d141      	bne.n	8002998 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291c:	d004      	beq.n	8002928 <HAL_ADC_Init+0x114>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_ADC_Init+0x2ec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10f      	bne.n	8002948 <HAL_ADC_Init+0x134>
 8002928:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800292c:	f7ff ff38 	bl	80027a0 <LL_ADC_IsEnabled>
 8002930:	4604      	mov	r4, r0
 8002932:	4873      	ldr	r0, [pc, #460]	; (8002b00 <HAL_ADC_Init+0x2ec>)
 8002934:	f7ff ff34 	bl	80027a0 <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	4323      	orrs	r3, r4
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_ADC_Init+0x15a>
 8002948:	486e      	ldr	r0, [pc, #440]	; (8002b04 <HAL_ADC_Init+0x2f0>)
 800294a:	f7ff ff29 	bl	80027a0 <LL_ADC_IsEnabled>
 800294e:	4604      	mov	r4, r0
 8002950:	486d      	ldr	r0, [pc, #436]	; (8002b08 <HAL_ADC_Init+0x2f4>)
 8002952:	f7ff ff25 	bl	80027a0 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	431c      	orrs	r4, r3
 800295a:	486c      	ldr	r0, [pc, #432]	; (8002b0c <HAL_ADC_Init+0x2f8>)
 800295c:	f7ff ff20 	bl	80027a0 <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	4323      	orrs	r3, r4
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Init+0x172>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_ADC_Init+0x2ec>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_ADC_Init+0x176>
 8002986:	4a62      	ldr	r2, [pc, #392]	; (8002b10 <HAL_ADC_Init+0x2fc>)
 8002988:	e000      	b.n	800298c <HAL_ADC_Init+0x178>
 800298a:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <HAL_ADC_Init+0x300>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f7ff fd26 	bl	80023e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7f5b      	ldrb	r3, [r3, #29]
 800299c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d106      	bne.n	80029d4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	045b      	lsls	r3, r3, #17
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_ADC_Init+0x304>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fee4 	bl	80027ec <LL_ADC_INJ_IsConversionOngoing>
 8002a24:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d17f      	bne.n	8002b2c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d17c      	bne.n	8002b2c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a36:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a4e:	f023 0302 	bic.w	r3, r3, #2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d017      	beq.n	8002a94 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6911      	ldr	r1, [r2, #16]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a92:	e013      	b.n	8002abc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d12a      	bne.n	8002b1c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	e019      	b.n	8002b2c <HAL_ADC_Init+0x318>
 8002af8:	20000000 	.word	0x20000000
 8002afc:	053e2d63 	.word	0x053e2d63
 8002b00:	50000100 	.word	0x50000100
 8002b04:	50000400 	.word	0x50000400
 8002b08:	50000500 	.word	0x50000500
 8002b0c:	50000600 	.word	0x50000600
 8002b10:	50000300 	.word	0x50000300
 8002b14:	50000700 	.word	0x50000700
 8002b18:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10c      	bne.n	8002b4e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f023 010f 	bic.w	r1, r3, #15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	1e5a      	subs	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4c:	e007      	b.n	8002b5e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 020f 	bic.w	r2, r2, #15
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b6e:	e007      	b.n	8002b80 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f043 0210 	orr.w	r2, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	bf00      	nop

08002b8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x30>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a8e      	ldr	r2, [pc, #568]	; (8002df0 <HAL_ADC_IRQHandler+0x264>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_IRQHandler+0x34>
 8002bbc:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <HAL_ADC_IRQHandler+0x268>)
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_IRQHandler+0x36>
 8002bc0:	4b8d      	ldr	r3, [pc, #564]	; (8002df8 <HAL_ADC_IRQHandler+0x26c>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fd82 	bl	80026cc <LL_ADC_GetMultimode>
 8002bc8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x78>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 feca 	bl	8003990 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x8c>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8094 	beq.w	8002d4c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 808e 	beq.w	8002d4c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fc9b 	bl	8002588 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d072      	beq.n	8002d3e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a64      	ldr	r2, [pc, #400]	; (8002df0 <HAL_ADC_IRQHandler+0x264>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_ADC_IRQHandler+0xea>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_ADC_IRQHandler+0x270>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d002      	beq.n	8002c72 <HAL_ADC_IRQHandler+0xe6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	e003      	b.n	8002c7a <HAL_ADC_IRQHandler+0xee>
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_ADC_IRQHandler+0x274>)
 8002c74:	e001      	b.n	8002c7a <HAL_ADC_IRQHandler+0xee>
 8002c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d008      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d002      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	d104      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	e014      	b.n	8002cc8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_ADC_IRQHandler+0x264>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_ADC_IRQHandler+0x130>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a53      	ldr	r2, [pc, #332]	; (8002dfc <HAL_ADC_IRQHandler+0x270>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d002      	beq.n	8002cb8 <HAL_ADC_IRQHandler+0x12c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_IRQHandler+0x134>
 8002cb8:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_ADC_IRQHandler+0x274>)
 8002cba:	e001      	b.n	8002cc0 <HAL_ADC_IRQHandler+0x134>
 8002cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cc0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d135      	bne.n	8002d3e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d12e      	bne.n	8002d3e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fd6e 	bl	80027c6 <LL_ADC_REG_IsConversionOngoing>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11a      	bne.n	8002d26 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020c 	bic.w	r2, r2, #12
 8002cfe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d112      	bne.n	8002d3e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d24:	e00b      	b.n	8002d3e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	f043 0210 	orr.w	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fa62 	bl	8002208 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	220c      	movs	r2, #12
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_ADC_IRQHandler+0x1d4>
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80b3 	beq.w	8002ed2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80ad 	beq.w	8002ed2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fc36 	bl	8002606 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d9a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fbf1 	bl	8002588 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002da6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_ADC_IRQHandler+0x264>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0x23a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_ADC_IRQHandler+0x270>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d002      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x236>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_IRQHandler+0x23e>
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_ADC_IRQHandler+0x274>)
 8002dc4:	e001      	b.n	8002dca <HAL_ADC_IRQHandler+0x23e>
 8002dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d008      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d002      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b07      	cmp	r3, #7
 8002de2:	d10f      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	e01f      	b.n	8002e2e <HAL_ADC_IRQHandler+0x2a2>
 8002dee:	bf00      	nop
 8002df0:	50000100 	.word	0x50000100
 8002df4:	50000300 	.word	0x50000300
 8002df8:	50000700 	.word	0x50000700
 8002dfc:	50000500 	.word	0x50000500
 8002e00:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a8b      	ldr	r2, [pc, #556]	; (8003038 <HAL_ADC_IRQHandler+0x4ac>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x296>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a8a      	ldr	r2, [pc, #552]	; (800303c <HAL_ADC_IRQHandler+0x4b0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d002      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_IRQHandler+0x29a>
 8002e1e:	4b88      	ldr	r3, [pc, #544]	; (8003040 <HAL_ADC_IRQHandler+0x4b4>)
 8002e20:	e001      	b.n	8002e26 <HAL_ADC_IRQHandler+0x29a>
 8002e22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e26:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d047      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_ADC_IRQHandler+0x2c2>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03f      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d13a      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d133      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12e      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fcbe 	bl	80027ec <LL_ADC_INJ_IsConversionOngoing>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11a      	bne.n	8002eac <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e84:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d112      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eaa:	e00b      	b.n	8002ec4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f043 0210 	orr.w	r2, r3, #16
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fd3b 	bl	8003940 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2260      	movs	r2, #96	; 0x60
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d011      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x374>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8aa 	bl	800304c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d012      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x3a4>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd21 	bl	8003968 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x3d4>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fd13 	bl	800397c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d043      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x466>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03e      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	e021      	b.n	8002fc6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f90:	d004      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x410>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a28      	ldr	r2, [pc, #160]	; (8003038 <HAL_ADC_IRQHandler+0x4ac>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0x414>
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_ADC_IRQHandler+0x4b8>)
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_IRQHandler+0x416>
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <HAL_ADC_IRQHandler+0x4bc>)
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fba0 	bl	80026e8 <LL_ADC_GetMultiDMATransfer>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e008      	b.n	8002fc6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10e      	bne.n	8002fea <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f83b 	bl	8003060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d018      	beq.n	800302e <HAL_ADC_IRQHandler+0x4a2>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003016:	f043 0208 	orr.w	r2, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003026:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fc93 	bl	8003954 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800302e:	bf00      	nop
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	50000100 	.word	0x50000100
 800303c:	50000500 	.word	0x50000500
 8003040:	50000400 	.word	0x50000400
 8003044:	50000300 	.word	0x50000300
 8003048:	50000700 	.word	0x50000700

0800304c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b0b6      	sub	sp, #216	; 0xd8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x24>
 8003092:	2302      	movs	r3, #2
 8003094:	f000 bc13 	b.w	80038be <HAL_ADC_ConfigChannel+0x84a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fb8e 	bl	80027c6 <LL_ADC_REG_IsConversionOngoing>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 83f3 	bne.w	8003898 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	f7ff fa75 	bl	80025ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fb7c 	bl	80027c6 <LL_ADC_REG_IsConversionOngoing>
 80030ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fb88 	bl	80027ec <LL_ADC_INJ_IsConversionOngoing>
 80030dc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 81d9 	bne.w	800349c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 81d4 	bne.w	800349c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030fc:	d10f      	bne.n	800311e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	4619      	mov	r1, r3
 800310a:	f7ff fa8f 	bl	800262c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fa23 	bl	8002562 <LL_ADC_SetSamplingTimeCommonConfig>
 800311c:	e00e      	b.n	800313c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	461a      	mov	r2, r3
 800312c:	f7ff fa7e 	bl	800262c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fa13 	bl	8002562 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	08db      	lsrs	r3, r3, #3
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d022      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800316e:	f7ff f96d 	bl	800244c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6919      	ldr	r1, [r3, #16]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	461a      	mov	r2, r3
 8003180:	f7ff f9b9 	bl	80024f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_ADC_ConfigChannel+0x126>
 8003194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003198:	e000      	b.n	800319c <HAL_ADC_ConfigChannel+0x128>
 800319a:	2300      	movs	r3, #0
 800319c:	461a      	mov	r2, r3
 800319e:	f7ff f9c5 	bl	800252c <LL_ADC_SetOffsetSaturation>
 80031a2:	e17b      	b.n	800349c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f972 	bl	8002494 <LL_ADC_GetOffsetChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x15c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f967 	bl	8002494 <LL_ADC_GetOffsetChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	f003 021f 	and.w	r2, r3, #31
 80031ce:	e01e      	b.n	800320e <HAL_ADC_ConfigChannel+0x19a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f95c 	bl	8002494 <LL_ADC_GetOffsetChannel>
 80031dc:	4603      	mov	r3, r0
 80031de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e004      	b.n	800320c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x1b2>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	e018      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1e4>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800323a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800323e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e004      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800324e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f92b 	bl	80024c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f90f 	bl	8002494 <LL_ADC_GetOffsetChannel>
 8003276:	4603      	mov	r3, r0
 8003278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x222>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f904 	bl	8002494 <LL_ADC_GetOffsetChannel>
 800328c:	4603      	mov	r3, r0
 800328e:	0e9b      	lsrs	r3, r3, #26
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	e01e      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x260>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f8f9 	bl	8002494 <LL_ADC_GetOffsetChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80032c4:	2320      	movs	r3, #32
 80032c6:	e004      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80032c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x278>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	e018      	b.n	800331e <HAL_ADC_ConfigChannel+0x2aa>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e004      	b.n	800331e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800331e:	429a      	cmp	r2, r3
 8003320:	d106      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2200      	movs	r2, #0
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff f8c8 	bl	80024c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff f8ac 	bl	8002494 <LL_ADC_GetOffsetChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <HAL_ADC_ConfigChannel+0x2e8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff f8a1 	bl	8002494 <LL_ADC_GetOffsetChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	0e9b      	lsrs	r3, r3, #26
 8003356:	f003 021f 	and.w	r2, r3, #31
 800335a:	e01e      	b.n	800339a <HAL_ADC_ConfigChannel+0x326>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f896 	bl	8002494 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800337a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e004      	b.n	8003398 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800338e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d105      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x33e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0e9b      	lsrs	r3, r3, #26
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	e016      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x36c>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e004      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2102      	movs	r1, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f867 	bl	80024c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2103      	movs	r1, #3
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f84b 	bl	8002494 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_ADC_ConfigChannel+0x3aa>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2103      	movs	r1, #3
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f840 	bl	8002494 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	e017      	b.n	800344e <HAL_ADC_ConfigChannel+0x3da>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2103      	movs	r1, #3
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f835 	bl	8002494 <LL_ADC_GetOffsetChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003438:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800343a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003440:	2320      	movs	r3, #32
 8003442:	e003      	b.n	800344c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x3f2>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	e011      	b.n	800348a <HAL_ADC_ConfigChannel+0x416>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800347e:	2320      	movs	r3, #32
 8003480:	e003      	b.n	800348a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800348a:	429a      	cmp	r2, r3
 800348c:	d106      	bne.n	800349c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	2103      	movs	r1, #3
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff f812 	bl	80024c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f97d 	bl	80027a0 <LL_ADC_IsEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 813d 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f7ff f8e2 	bl	8002684 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4aa2      	ldr	r2, [pc, #648]	; (8003750 <HAL_ADC_ConfigChannel+0x6dc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f040 812e 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x480>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0e9b      	lsrs	r3, r3, #26
 80034e2:	3301      	adds	r3, #1
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	bf94      	ite	ls
 80034ec:	2301      	movls	r3, #1
 80034ee:	2300      	movhi	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e019      	b.n	8003528 <HAL_ADC_ConfigChannel+0x4b4>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003504:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e003      	b.n	8003518 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2b09      	cmp	r3, #9
 8003520:	bf94      	ite	ls
 8003522:	2301      	movls	r3, #1
 8003524:	2300      	movhi	r3, #0
 8003526:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003528:	2b00      	cmp	r3, #0
 800352a:	d079      	beq.n	8003620 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x4d4>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	3301      	adds	r3, #1
 8003540:	069b      	lsls	r3, r3, #26
 8003542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003546:	e015      	b.n	8003574 <HAL_ADC_ConfigChannel+0x500>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003558:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800355a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x520>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	3301      	adds	r3, #1
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	e017      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x550>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80035ac:	2320      	movs	r3, #32
 80035ae:	e003      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80035b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x576>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	051b      	lsls	r3, r3, #20
 80035e8:	e018      	b.n	800361c <HAL_ADC_ConfigChannel+0x5a8>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003602:	2320      	movs	r3, #32
 8003604:	e003      	b.n	800360e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800361c:	430b      	orrs	r3, r1
 800361e:	e07e      	b.n	800371e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_ADC_ConfigChannel+0x5c8>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	069b      	lsls	r3, r3, #26
 8003636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363a:	e015      	b.n	8003668 <HAL_ADC_ConfigChannel+0x5f4>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003654:	2320      	movs	r3, #32
 8003656:	e003      	b.n	8003660 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3301      	adds	r3, #1
 8003662:	069b      	lsls	r3, r3, #26
 8003664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x614>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	3301      	adds	r3, #1
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	e017      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x644>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	61fb      	str	r3, [r7, #28]
  return result;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e003      	b.n	80036ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	2101      	movs	r1, #1
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	ea42 0103 	orr.w	r1, r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x670>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	3301      	adds	r3, #1
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	3b1e      	subs	r3, #30
 80036dc:	051b      	lsls	r3, r3, #20
 80036de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036e2:	e01b      	b.n	800371c <HAL_ADC_ConfigChannel+0x6a8>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	613b      	str	r3, [r7, #16]
  return result;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	3b1e      	subs	r3, #30
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003722:	4619      	mov	r1, r3
 8003724:	f7fe ff82 	bl	800262c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_ADC_ConfigChannel+0x6e0>)
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80be 	beq.w	80038b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800373e:	d004      	beq.n	800374a <HAL_ADC_ConfigChannel+0x6d6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_ADC_ConfigChannel+0x6e4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10a      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x6ec>
 800374a:	4b04      	ldr	r3, [pc, #16]	; (800375c <HAL_ADC_ConfigChannel+0x6e8>)
 800374c:	e009      	b.n	8003762 <HAL_ADC_ConfigChannel+0x6ee>
 800374e:	bf00      	nop
 8003750:	407f0000 	.word	0x407f0000
 8003754:	80080000 	.word	0x80080000
 8003758:	50000100 	.word	0x50000100
 800375c:	50000300 	.word	0x50000300
 8003760:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_ADC_ConfigChannel+0x854>)
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fe64 	bl	8002430 <LL_ADC_GetCommonPathInternalCh>
 8003768:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_ADC_ConfigChannel+0x858>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x70c>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a55      	ldr	r2, [pc, #340]	; (80038d0 <HAL_ADC_ConfigChannel+0x85c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d13a      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d134      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d005      	beq.n	80037a2 <HAL_ADC_ConfigChannel+0x72e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_ADC_ConfigChannel+0x860>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f040 8085 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037aa:	d004      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x742>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_ADC_ConfigChannel+0x864>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x746>
 80037b6:	4a49      	ldr	r2, [pc, #292]	; (80038dc <HAL_ADC_ConfigChannel+0x868>)
 80037b8:	e000      	b.n	80037bc <HAL_ADC_ConfigChannel+0x748>
 80037ba:	4a43      	ldr	r2, [pc, #268]	; (80038c8 <HAL_ADC_ConfigChannel+0x854>)
 80037bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7fe fe1f 	bl	800240a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037cc:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_ADC_ConfigChannel+0x86c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	4a44      	ldr	r2, [pc, #272]	; (80038e4 <HAL_ADC_ConfigChannel+0x870>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037e6:	e002      	b.n	80037ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f9      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037f4:	e05a      	b.n	80038ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3b      	ldr	r2, [pc, #236]	; (80038e8 <HAL_ADC_ConfigChannel+0x874>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d125      	bne.n	800384c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11f      	bne.n	800384c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a31      	ldr	r2, [pc, #196]	; (80038d8 <HAL_ADC_ConfigChannel+0x864>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d104      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x7ac>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <HAL_ADC_ConfigChannel+0x878>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d047      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003828:	d004      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x7c0>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_ADC_ConfigChannel+0x864>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x7c4>
 8003834:	4a29      	ldr	r2, [pc, #164]	; (80038dc <HAL_ADC_ConfigChannel+0x868>)
 8003836:	e000      	b.n	800383a <HAL_ADC_ConfigChannel+0x7c6>
 8003838:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <HAL_ADC_ConfigChannel+0x854>)
 800383a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7fe fde0 	bl	800240a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800384a:	e031      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <HAL_ADC_ConfigChannel+0x87c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d12d      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d127      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_ADC_ConfigChannel+0x864>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003874:	d004      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x80c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_ADC_ConfigChannel+0x864>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x810>
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_ADC_ConfigChannel+0x868>)
 8003882:	e000      	b.n	8003886 <HAL_ADC_ConfigChannel+0x812>
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <HAL_ADC_ConfigChannel+0x854>)
 8003886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800388a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe fdba 	bl	800240a <LL_ADC_SetCommonPathInternalCh>
 8003896:	e00c      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80038aa:	e002      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ac:	bf00      	nop
 80038ae:	e000      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038be:	4618      	mov	r0, r3
 80038c0:	37d8      	adds	r7, #216	; 0xd8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	50000700 	.word	0x50000700
 80038cc:	c3210000 	.word	0xc3210000
 80038d0:	90c00010 	.word	0x90c00010
 80038d4:	50000600 	.word	0x50000600
 80038d8:	50000100 	.word	0x50000100
 80038dc:	50000300 	.word	0x50000300
 80038e0:	20000000 	.word	0x20000000
 80038e4:	053e2d63 	.word	0x053e2d63
 80038e8:	c7520000 	.word	0xc7520000
 80038ec:	50000500 	.word	0x50000500
 80038f0:	cb840000 	.word	0xcb840000

080038f4 <LL_ADC_IsEnabled>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <LL_ADC_IsEnabled+0x18>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_ADC_IsEnabled+0x1a>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_REG_IsConversionOngoing>:
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d101      	bne.n	8003932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b0a1      	sub	sp, #132	; 0x84
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0e7      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039ca:	2300      	movs	r3, #0
 80039cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039ce:	2300      	movs	r3, #0
 80039d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039da:	d102      	bne.n	80039e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039dc:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	e009      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6e      	ldr	r2, [pc, #440]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d102      	bne.n	80039f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039ec:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	e001      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0be      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ff7f 	bl	800391a <LL_ADC_REG_IsConversionOngoing>
 8003a1c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff79 	bl	800391a <LL_ADC_REG_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 80a0 	bne.w	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 809c 	bne.w	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a40:	d004      	beq.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a55      	ldr	r2, [pc, #340]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a4e:	e000      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a50:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d04b      	beq.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a6e:	035b      	lsls	r3, r3, #13
 8003a70:	430b      	orrs	r3, r1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a80:	d004      	beq.n	8003a8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a45      	ldr	r2, [pc, #276]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10f      	bne.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a90:	f7ff ff30 	bl	80038f4 <LL_ADC_IsEnabled>
 8003a94:	4604      	mov	r4, r0
 8003a96:	4841      	ldr	r0, [pc, #260]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a98:	f7ff ff2c 	bl	80038f4 <LL_ADC_IsEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4323      	orrs	r3, r4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e012      	b.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003aac:	483c      	ldr	r0, [pc, #240]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003aae:	f7ff ff21 	bl	80038f4 <LL_ADC_IsEnabled>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	483b      	ldr	r0, [pc, #236]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ab6:	f7ff ff1d 	bl	80038f4 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	431c      	orrs	r4, r3
 8003abe:	483c      	ldr	r0, [pc, #240]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ac0:	f7ff ff18 	bl	80038f4 <LL_ADC_IsEnabled>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4323      	orrs	r3, r4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d056      	beq.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ade:	f023 030f 	bic.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	6811      	ldr	r1, [r2, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003af2:	e047      	b.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b08:	d004      	beq.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10f      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b18:	f7ff feec 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	481f      	ldr	r0, [pc, #124]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b20:	f7ff fee8 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4323      	orrs	r3, r4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e012      	b.n	8003b5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b34:	481a      	ldr	r0, [pc, #104]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b36:	f7ff fedd 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	4819      	ldr	r0, [pc, #100]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b3e:	f7ff fed9 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b42:	4603      	mov	r3, r0
 8003b44:	431c      	orrs	r4, r3
 8003b46:	481a      	ldr	r0, [pc, #104]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b48:	f7ff fed4 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4323      	orrs	r3, r4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d012      	beq.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b66:	f023 030f 	bic.w	r3, r3, #15
 8003b6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6e:	e009      	b.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b82:	e000      	b.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3784      	adds	r7, #132	; 0x84
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd90      	pop	{r4, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	50000100 	.word	0x50000100
 8003ba0:	50000400 	.word	0x50000400
 8003ba4:	50000500 	.word	0x50000500
 8003ba8:	50000300 	.word	0x50000300
 8003bac:	50000700 	.word	0x50000700
 8003bb0:	50000600 	.word	0x50000600

08003bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003be6:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	60d3      	str	r3, [r2, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <__NVIC_GetPriorityGrouping+0x18>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 0307 	and.w	r3, r3, #7
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	db0b      	blt.n	8003c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4907      	ldr	r1, [pc, #28]	; (8003c50 <__NVIC_EnableIRQ+0x38>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2001      	movs	r0, #1
 8003c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e100 	.word	0xe000e100

08003c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	db0a      	blt.n	8003c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	490c      	ldr	r1, [pc, #48]	; (8003ca0 <__NVIC_SetPriority+0x4c>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	440b      	add	r3, r1
 8003c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c7c:	e00a      	b.n	8003c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4908      	ldr	r1, [pc, #32]	; (8003ca4 <__NVIC_SetPriority+0x50>)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	3b04      	subs	r3, #4
 8003c8c:	0112      	lsls	r2, r2, #4
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	440b      	add	r3, r1
 8003c92:	761a      	strb	r2, [r3, #24]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	; 0x24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f1c3 0307 	rsb	r3, r3, #7
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf28      	it	cs
 8003cc6:	2304      	movcs	r3, #4
 8003cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d902      	bls.n	8003cd8 <NVIC_EncodePriority+0x30>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3b03      	subs	r3, #3
 8003cd6:	e000      	b.n	8003cda <NVIC_EncodePriority+0x32>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	401a      	ands	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	43d9      	mvns	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	4313      	orrs	r3, r2
         );
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d20:	d301      	bcc.n	8003d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00f      	b.n	8003d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <SysTick_Config+0x40>)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d2e:	210f      	movs	r1, #15
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	f7ff ff8e 	bl	8003c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <SysTick_Config+0x40>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <SysTick_Config+0x40>)
 8003d40:	2207      	movs	r2, #7
 8003d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	e000e010 	.word	0xe000e010

08003d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff ff29 	bl	8003bb4 <__NVIC_SetPriorityGrouping>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d78:	f7ff ff40 	bl	8003bfc <__NVIC_GetPriorityGrouping>
 8003d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	6978      	ldr	r0, [r7, #20]
 8003d84:	f7ff ff90 	bl	8003ca8 <NVIC_EncodePriority>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff5f 	bl	8003c54 <__NVIC_SetPriority>
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff33 	bl	8003c18 <__NVIC_EnableIRQ>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ffa4 	bl	8003d10 <SysTick_Config>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e08d      	b.n	8003f02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <HAL_DMA_Init+0x138>)
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d80f      	bhi.n	8003e12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b45      	ldr	r3, [pc, #276]	; (8003f10 <HAL_DMA_Init+0x13c>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4a45      	ldr	r2, [pc, #276]	; (8003f14 <HAL_DMA_Init+0x140>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	009a      	lsls	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a42      	ldr	r2, [pc, #264]	; (8003f18 <HAL_DMA_Init+0x144>)
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e10:	e00e      	b.n	8003e30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b40      	ldr	r3, [pc, #256]	; (8003f1c <HAL_DMA_Init+0x148>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a3d      	ldr	r2, [pc, #244]	; (8003f14 <HAL_DMA_Init+0x140>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	009a      	lsls	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a3c      	ldr	r2, [pc, #240]	; (8003f20 <HAL_DMA_Init+0x14c>)
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8fe 	bl	8004084 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e90:	d102      	bne.n	8003e98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d010      	beq.n	8003ed8 <HAL_DMA_Init+0x104>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d80c      	bhi.n	8003ed8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f91e 	bl	8004100 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e008      	b.n	8003eea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40020407 	.word	0x40020407
 8003f10:	bffdfff8 	.word	0xbffdfff8
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	bffdfbf8 	.word	0xbffdfbf8
 8003f20:	40020400 	.word	0x40020400

08003f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d026      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x7a>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d021      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	2104      	movs	r1, #4
 8003f86:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d071      	beq.n	8004078 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f9c:	e06c      	b.n	8004078 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d02e      	beq.n	8004010 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d029      	beq.n	8004010 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 020a 	bic.w	r2, r2, #10
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f003 021f 	and.w	r2, r3, #31
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2102      	movs	r1, #2
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d038      	beq.n	8004078 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800400e:	e033      	b.n	8004078 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2208      	movs	r2, #8
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d02a      	beq.n	800407a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d025      	beq.n	800407a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 020e 	bic.w	r2, r2, #14
 800403c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f003 021f 	and.w	r2, r3, #31
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2101      	movs	r1, #1
 800404c:	fa01 f202 	lsl.w	r2, r1, r2
 8004050:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004078:	bf00      	nop
 800407a:	bf00      	nop
}
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	4b16      	ldr	r3, [pc, #88]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004094:	429a      	cmp	r2, r3
 8004096:	d802      	bhi.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e001      	b.n	80040a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040a0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3b08      	subs	r3, #8
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	009a      	lsls	r2, r3, #2
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a0b      	ldr	r2, [pc, #44]	; (80040fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	2201      	movs	r2, #1
 80040d8:	409a      	lsls	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40020407 	.word	0x40020407
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020820 	.word	0x40020820
 80040f8:	cccccccd 	.word	0xcccccccd
 80040fc:	40020880 	.word	0x40020880

08004100 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	461a      	mov	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004122:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3b01      	subs	r3, #1
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2201      	movs	r2, #1
 800412e:	409a      	lsls	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	1000823f 	.word	0x1000823f
 8004144:	40020940 	.word	0x40020940

08004148 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e147      	b.n	80043ea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fb2c 	bl	80017cc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0210 	bic.w	r2, r2, #16
 8004182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004184:	f7fe f900 	bl	8002388 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800418a:	e012      	b.n	80041b2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800418c:	f7fe f8fc 	bl	8002388 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b0a      	cmp	r3, #10
 8004198:	d90b      	bls.n	80041b2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e11b      	b.n	80043ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d0e5      	beq.n	800418c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d0:	f7fe f8da 	bl	8002388 <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041d6:	e012      	b.n	80041fe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041d8:	f7fe f8d6 	bl	8002388 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b0a      	cmp	r3, #10
 80041e4:	d90b      	bls.n	80041fe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	f043 0201 	orr.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0f5      	b.n	80043ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0e5      	beq.n	80041d8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0202 	orr.w	r2, r2, #2
 800421a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <HAL_FDCAN_Init+0x2ac>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d103      	bne.n	800422e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004226:	4a74      	ldr	r2, [pc, #464]	; (80043f8 <HAL_FDCAN_Init+0x2b0>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7c1b      	ldrb	r3, [r3, #16]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d108      	bne.n	8004248 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004244:	619a      	str	r2, [r3, #24]
 8004246:	e007      	b.n	8004258 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004256:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7c5b      	ldrb	r3, [r3, #17]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d108      	bne.n	8004272 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800426e:	619a      	str	r2, [r3, #24]
 8004270:	e007      	b.n	8004282 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004280:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7c9b      	ldrb	r3, [r3, #18]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d108      	bne.n	800429c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004298:	619a      	str	r2, [r3, #24]
 800429a:	e007      	b.n	80042ac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042aa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80042d0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0210 	bic.w	r2, r2, #16
 80042e0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0204 	orr.w	r2, r2, #4
 80042f8:	619a      	str	r2, [r3, #24]
 80042fa:	e02c      	b.n	8004356 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d028      	beq.n	8004356 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d01c      	beq.n	8004346 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800431a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0210 	orr.w	r2, r2, #16
 800432a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d110      	bne.n	8004356 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0220 	orr.w	r2, r2, #32
 8004342:	619a      	str	r2, [r3, #24]
 8004344:	e007      	b.n	8004356 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	3b01      	subs	r3, #1
 800435c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	3b01      	subs	r3, #1
 8004364:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004366:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800436e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	3b01      	subs	r3, #1
 8004378:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800437e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004380:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438a:	d115      	bne.n	80043b8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	3b01      	subs	r3, #1
 8004398:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800439a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	3b01      	subs	r3, #1
 80043a2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043a4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	3b01      	subs	r3, #1
 80043ae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043b4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043b6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fbca 	bl	8004b68 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40006400 	.word	0x40006400
 80043f8:	40006500 	.word	0x40006500

080043fc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d12c      	bne.n	800446e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800441c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e023      	b.n	800447c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fbf8 	bl	8004c40 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004460:	2201      	movs	r2, #1
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	409a      	lsls	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e006      	b.n	800447c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004484:	b480      	push	{r7}
 8004486:	b08b      	sub	sp, #44	; 0x2c
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800449c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800449e:	7efb      	ldrb	r3, [r7, #27]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	f040 80e8 	bne.w	8004676 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d137      	bne.n	800451c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0db      	b.n	8004684 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d10a      	bne.n	80044f4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e6:	0a5b      	lsrs	r3, r3, #9
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	e036      	b.n	800458a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0a3      	b.n	8004684 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004544:	0e1b      	lsrs	r3, r3, #24
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10a      	bne.n	8004564 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004560:	2301      	movs	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0c9b      	lsrs	r3, r3, #18
 80045a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e005      	b.n	80045ba <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	3304      	adds	r3, #4
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	f003 020f 	and.w	r2, r3, #15
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0e1b      	lsrs	r3, r3, #24
 800460e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0fda      	lsrs	r2, r3, #31
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3304      	adds	r3, #4
 8004624:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	e00a      	b.n	8004646 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	441a      	add	r2, r3
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	440b      	add	r3, r1
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	3301      	adds	r3, #1
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <HAL_FDCAN_GetRxMessage+0x20c>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	461a      	mov	r2, r3
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	4293      	cmp	r3, r2
 8004654:	d3ec      	bcc.n	8004630 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d105      	bne.n	8004668 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004666:	e004      	b.n	8004672 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e006      	b.n	8004684 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	f043 0208 	orr.w	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	372c      	adds	r7, #44	; 0x2c
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	0800820c 	.word	0x0800820c

08004694 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046a6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d003      	beq.n	80046b6 <HAL_FDCAN_ActivateNotification+0x22>
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f040 80c8 	bne.w	8004846 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d03b      	beq.n	800474a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d031      	beq.n	800474a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d027      	beq.n	800474a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01d      	beq.n	800474a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d13b      	bne.n	80047e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d131      	bne.n	80047e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d127      	bne.n	80047e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11d      	bne.n	80047e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0202 	orr.w	r2, r2, #2
 80047f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	430a      	orrs	r2, r1
 8004810:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	430a      	orrs	r2, r1
 800482e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	430a      	orrs	r2, r1
 8004840:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e006      	b.n	8004854 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f043 0202 	orr.w	r2, r3, #2
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487c:	4013      	ands	r3, r2
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004894:	4013      	ands	r3, r2
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ac:	4013      	ands	r3, r2
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80048ba:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	4013      	ands	r3, r2
 80048c6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80048d2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	4013      	ands	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ee:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f90b 	bl	8004b28 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d019      	beq.n	8004950 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d014      	beq.n	8004950 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800492e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004946:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f8cd 	bl	8004aea <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800495e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f8a2 	bl	8004aaa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004972:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fb fe5c 	bl	8000634 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800498a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fb fecb 	bl	8000728 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00c      	beq.n	80049b6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f885 	bl	8004ac0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d018      	beq.n	80049f2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80049d2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4013      	ands	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2280      	movs	r2, #128	; 0x80
 80049e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f871 	bl	8004ad4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a0e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f875 	bl	8004b00 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a32:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f86d 	bl	8004b14 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00f      	beq.n	8004a64 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004a72:	69f9      	ldr	r1, [r7, #28]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f86b 	bl	8004b50 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f84d 	bl	8004b3c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3730      	adds	r7, #48	; 0x30
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004b72:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d103      	bne.n	8004b86 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b84:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d103      	bne.n	8004b98 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004b96:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	041a      	lsls	r2, r3, #16
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bcc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	061a      	lsls	r2, r3, #24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e005      	b.n	8004c1a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3304      	adds	r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d3f3      	bcc.n	8004c0e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	4000a400 	.word	0x4000a400
 8004c38:	40006800 	.word	0x40006800
 8004c3c:	40006c00 	.word	0x40006c00

08004c40 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	; 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004c5e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e00a      	b.n	8004c82 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004c74:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004c7a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c80:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c8c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004c92:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004c98:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	440b      	add	r3, r1
 8004cb4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e020      	b.n	8004d16 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3303      	adds	r3, #3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	440b      	add	r3, r1
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004cec:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	440b      	add	r3, r1
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004cfa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	440a      	add	r2, r1
 8004d02:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004d04:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3304      	adds	r3, #4
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a06      	ldr	r2, [pc, #24]	; (8004d34 <FDCAN_CopyMessageToRAM+0xf4>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d3d6      	bcc.n	8004cd4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	3724      	adds	r7, #36	; 0x24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	0800820c 	.word	0x0800820c

08004d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d46:	e15a      	b.n	8004ffe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 814c 	beq.w	8004ff8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d005      	beq.n	8004d78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d130      	bne.n	8004dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	2203      	movs	r2, #3
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dae:	2201      	movs	r2, #1
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f003 0201 	and.w	r2, r3, #1
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d017      	beq.n	8004e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	2203      	movs	r2, #3
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d123      	bne.n	8004e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	08da      	lsrs	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3208      	adds	r2, #8
 8004e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	220f      	movs	r2, #15
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	08da      	lsrs	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3208      	adds	r2, #8
 8004e64:	6939      	ldr	r1, [r7, #16]
 8004e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 0203 	and.w	r2, r3, #3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80a6 	beq.w	8004ff8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eac:	4b5b      	ldr	r3, [pc, #364]	; (800501c <HAL_GPIO_Init+0x2e4>)
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	4a5a      	ldr	r2, [pc, #360]	; (800501c <HAL_GPIO_Init+0x2e4>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8004eb8:	4b58      	ldr	r3, [pc, #352]	; (800501c <HAL_GPIO_Init+0x2e4>)
 8004eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec4:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_GPIO_Init+0x2e8>)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	089b      	lsrs	r3, r3, #2
 8004eca:	3302      	adds	r3, #2
 8004ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	220f      	movs	r2, #15
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004eee:	d01f      	beq.n	8004f30 <HAL_GPIO_Init+0x1f8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a4c      	ldr	r2, [pc, #304]	; (8005024 <HAL_GPIO_Init+0x2ec>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d019      	beq.n	8004f2c <HAL_GPIO_Init+0x1f4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a4b      	ldr	r2, [pc, #300]	; (8005028 <HAL_GPIO_Init+0x2f0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <HAL_GPIO_Init+0x1f0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a4a      	ldr	r2, [pc, #296]	; (800502c <HAL_GPIO_Init+0x2f4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00d      	beq.n	8004f24 <HAL_GPIO_Init+0x1ec>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a49      	ldr	r2, [pc, #292]	; (8005030 <HAL_GPIO_Init+0x2f8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <HAL_GPIO_Init+0x1e8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a48      	ldr	r2, [pc, #288]	; (8005034 <HAL_GPIO_Init+0x2fc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_GPIO_Init+0x1e4>
 8004f18:	2305      	movs	r3, #5
 8004f1a:	e00a      	b.n	8004f32 <HAL_GPIO_Init+0x1fa>
 8004f1c:	2306      	movs	r3, #6
 8004f1e:	e008      	b.n	8004f32 <HAL_GPIO_Init+0x1fa>
 8004f20:	2304      	movs	r3, #4
 8004f22:	e006      	b.n	8004f32 <HAL_GPIO_Init+0x1fa>
 8004f24:	2303      	movs	r3, #3
 8004f26:	e004      	b.n	8004f32 <HAL_GPIO_Init+0x1fa>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e002      	b.n	8004f32 <HAL_GPIO_Init+0x1fa>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_GPIO_Init+0x1fa>
 8004f30:	2300      	movs	r3, #0
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	f002 0203 	and.w	r2, r2, #3
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	4093      	lsls	r3, r2
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f42:	4937      	ldr	r1, [pc, #220]	; (8005020 <HAL_GPIO_Init+0x2e8>)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f50:	4b39      	ldr	r3, [pc, #228]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f7a:	4b2f      	ldr	r3, [pc, #188]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4013      	ands	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f9e:	4a26      	ldr	r2, [pc, #152]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fa4:	4b24      	ldr	r3, [pc, #144]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ff2:	4a11      	ldr	r2, [pc, #68]	; (8005038 <HAL_GPIO_Init+0x300>)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	f47f ae9d 	bne.w	8004d48 <HAL_GPIO_Init+0x10>
  }
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40021000 	.word	0x40021000
 8005020:	40010000 	.word	0x40010000
 8005024:	48000400 	.word	0x48000400
 8005028:	48000800 	.word	0x48000800
 800502c:	48000c00 	.word	0x48000c00
 8005030:	48001000 	.word	0x48001000
 8005034:	48001400 	.word	0x48001400
 8005038:	40010400 	.word	0x40010400

0800503c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
 8005048:	4613      	mov	r3, r2
 800504a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800504c:	787b      	ldrb	r3, [r7, #1]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005052:	887a      	ldrh	r2, [r7, #2]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005058:	e002      	b.n	8005060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4013      	ands	r3, r2
 8005084:	041a      	lsls	r2, r3, #16
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	43d9      	mvns	r1, r3
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	400b      	ands	r3, r1
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	619a      	str	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e08d      	b.n	80051ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc fc98 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005100:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d107      	bne.n	800511a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	e006      	b.n	8005128 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005126:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d108      	bne.n	8005142 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513e:	605a      	str	r2, [r3, #4]
 8005140:	e007      	b.n	8005152 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d138      	bne.n	800525e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e032      	b.n	8005260 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2224      	movs	r2, #36	; 0x24
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005228:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	d139      	bne.n	80052f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800528c:	2302      	movs	r3, #2
 800528e:	e033      	b.n	80052f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e041      	b.n	800539a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800531e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f245 5255 	movw	r2, #21845	; 0x5555
 8005328:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6852      	ldr	r2, [r2, #4]
 8005332:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800533e:	f7fd f823 	bl	8002388 <HAL_GetTick>
 8005342:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005344:	e00f      	b.n	8005366 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005346:	f7fd f81f 	bl	8002388 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b31      	cmp	r3, #49	; 0x31
 8005352:	d908      	bls.n	8005366 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e019      	b.n	800539a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e8      	bne.n	8005346 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	429a      	cmp	r2, r3
 8005380:	d005      	beq.n	800538e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68d2      	ldr	r2, [r2, #12]
 800538a:	611a      	str	r2, [r3, #16]
 800538c:	e004      	b.n	8005398 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0c0      	b.n	8005536 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fc fe3f 	bl	800204c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 fdcc 	bl	8007f78 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]
 80053e4:	e03e      	b.n	8005464 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053e6:	7bfa      	ldrb	r2, [r7, #15]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	440b      	add	r3, r1
 80053f4:	3311      	adds	r3, #17
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	3310      	adds	r3, #16
 800540a:	7bfa      	ldrb	r2, [r7, #15]
 800540c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800540e:	7bfa      	ldrb	r2, [r7, #15]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	440b      	add	r3, r1
 800541c:	3313      	adds	r3, #19
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	440b      	add	r3, r1
 8005430:	3320      	adds	r3, #32
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	3301      	adds	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	791b      	ldrb	r3, [r3, #4]
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	429a      	cmp	r2, r3
 800546c:	d3bb      	bcc.n	80053e6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e044      	b.n	80054fe <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	440b      	add	r3, r1
 8005482:	f203 1351 	addw	r3, r3, #337	; 0x151
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	440b      	add	r3, r1
 8005498:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800549c:	7bfa      	ldrb	r2, [r7, #15]
 800549e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	f203 1353 	addw	r3, r3, #339	; 0x153
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054b6:	7bfa      	ldrb	r2, [r7, #15]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	440b      	add	r3, r1
 80054c4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054cc:	7bfa      	ldrb	r2, [r7, #15]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	440b      	add	r3, r1
 80054da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	3301      	adds	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	791b      	ldrb	r3, [r3, #4]
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	429a      	cmp	r2, r3
 8005506:	d3b5      	bcc.n	8005474 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005514:	f002 fd4b 	bl	8007fae <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7a9b      	ldrb	r3, [r3, #10]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d102      	bne.n	8005534 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f805 	bl	800553e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005562:	b29b      	uxth	r3, r3
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005576:	b29b      	uxth	r3, r3
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d141      	bne.n	8005626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055a2:	4b4b      	ldr	r3, [pc, #300]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ae:	d131      	bne.n	8005614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055b0:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b6:	4a46      	ldr	r2, [pc, #280]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055c0:	4b43      	ldr	r3, [pc, #268]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055c8:	4a41      	ldr	r2, [pc, #260]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055d0:	4b40      	ldr	r3, [pc, #256]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2232      	movs	r2, #50	; 0x32
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	4a3f      	ldr	r2, [pc, #252]	; (80056d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	0c9b      	lsrs	r3, r3, #18
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055e6:	e002      	b.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ee:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055fa:	d102      	bne.n	8005602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f2      	bne.n	80055e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005602:	4b33      	ldr	r3, [pc, #204]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560e:	d158      	bne.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e057      	b.n	80056c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005614:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561a:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005624:	e04d      	b.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d141      	bne.n	80056b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800562e:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d131      	bne.n	80056a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005642:	4a23      	ldr	r2, [pc, #140]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800564c:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005654:	4a1e      	ldr	r2, [pc, #120]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800565a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800565c:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2232      	movs	r2, #50	; 0x32
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	0c9b      	lsrs	r3, r3, #18
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005672:	e002      	b.n	800567a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3b01      	subs	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005686:	d102      	bne.n	800568e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f2      	bne.n	8005674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	d112      	bne.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e011      	b.n	80056c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056b0:	e007      	b.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056ba:	4a05      	ldr	r2, [pc, #20]	; (80056d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40007000 	.word	0x40007000
 80056d4:	20000000 	.word	0x20000000
 80056d8:	431bde83 	.word	0x431bde83

080056dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80056e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ea:	6093      	str	r3, [r2, #8]
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40007000 	.word	0x40007000

080056fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e2fe      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d075      	beq.n	8005806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	4b97      	ldr	r3, [pc, #604]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005724:	4b94      	ldr	r3, [pc, #592]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d102      	bne.n	800573a <HAL_RCC_OscConfig+0x3e>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d002      	beq.n	8005740 <HAL_RCC_OscConfig+0x44>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d10b      	bne.n	8005758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005740:	4b8d      	ldr	r3, [pc, #564]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d05b      	beq.n	8005804 <HAL_RCC_OscConfig+0x108>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d157      	bne.n	8005804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e2d9      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d106      	bne.n	8005770 <HAL_RCC_OscConfig+0x74>
 8005762:	4b85      	ldr	r3, [pc, #532]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a84      	ldr	r2, [pc, #528]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e01d      	b.n	80057ac <HAL_RCC_OscConfig+0xb0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005778:	d10c      	bne.n	8005794 <HAL_RCC_OscConfig+0x98>
 800577a:	4b7f      	ldr	r3, [pc, #508]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a7e      	ldr	r2, [pc, #504]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b7c      	ldr	r3, [pc, #496]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a7b      	ldr	r2, [pc, #492]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e00b      	b.n	80057ac <HAL_RCC_OscConfig+0xb0>
 8005794:	4b78      	ldr	r3, [pc, #480]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a77      	ldr	r2, [pc, #476]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800579a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b75      	ldr	r3, [pc, #468]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a74      	ldr	r2, [pc, #464]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80057a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d013      	beq.n	80057dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fc fde8 	bl	8002388 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fc fde4 	bl	8002388 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e29e      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ce:	4b6a      	ldr	r3, [pc, #424]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0xc0>
 80057da:	e014      	b.n	8005806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fc fdd4 	bl	8002388 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e4:	f7fc fdd0 	bl	8002388 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	; 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e28a      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f6:	4b60      	ldr	r3, [pc, #384]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0xe8>
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d075      	beq.n	80058fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005812:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800581c:	4b56      	ldr	r3, [pc, #344]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b0c      	cmp	r3, #12
 800582a:	d102      	bne.n	8005832 <HAL_RCC_OscConfig+0x136>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d002      	beq.n	8005838 <HAL_RCC_OscConfig+0x13c>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d11f      	bne.n	8005878 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005838:	4b4f      	ldr	r3, [pc, #316]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_OscConfig+0x154>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e25d      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b49      	ldr	r3, [pc, #292]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	4946      	ldr	r1, [pc, #280]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005864:	4b45      	ldr	r3, [pc, #276]	; (800597c <HAL_RCC_OscConfig+0x280>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f7fc fd41 	bl	80022f0 <HAL_InitTick>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d043      	beq.n	80058fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e249      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005880:	4b3d      	ldr	r3, [pc, #244]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fc fd7c 	bl	8002388 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005894:	f7fc fd78 	bl	8002388 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e232      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a6:	4b34      	ldr	r3, [pc, #208]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b2:	4b31      	ldr	r3, [pc, #196]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	492d      	ldr	r1, [pc, #180]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
 80058c6:	e01a      	b.n	80058fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80058ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fc fd58 	bl	8002388 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fc fd54 	bl	8002388 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e20e      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058ee:	4b22      	ldr	r3, [pc, #136]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x1e0>
 80058fa:	e000      	b.n	80058fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d041      	beq.n	800598e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01c      	beq.n	800594c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005918:	4a17      	ldr	r2, [pc, #92]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fc fd31 	bl	8002388 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800592a:	f7fc fd2d 	bl	8002388 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e1e7      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800593e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ef      	beq.n	800592a <HAL_RCC_OscConfig+0x22e>
 800594a:	e020      	b.n	800598e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 800594e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <HAL_RCC_OscConfig+0x27c>)
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fc fd14 	bl	8002388 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005962:	e00d      	b.n	8005980 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005964:	f7fc fd10 	bl	8002388 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d906      	bls.n	8005980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e1ca      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005980:	4b8c      	ldr	r3, [pc, #560]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ea      	bne.n	8005964 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a6 	beq.w	8005ae8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599c:	2300      	movs	r3, #0
 800599e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059a0:	4b84      	ldr	r3, [pc, #528]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_OscConfig+0x2b4>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x2b6>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00d      	beq.n	80059d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b6:	4b7f      	ldr	r3, [pc, #508]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	4a7e      	ldr	r2, [pc, #504]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 80059bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c0:	6593      	str	r3, [r2, #88]	; 0x58
 80059c2:	4b7c      	ldr	r3, [pc, #496]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059ce:	2301      	movs	r3, #1
 80059d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d2:	4b79      	ldr	r3, [pc, #484]	; (8005bb8 <HAL_RCC_OscConfig+0x4bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d118      	bne.n	8005a10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059de:	4b76      	ldr	r3, [pc, #472]	; (8005bb8 <HAL_RCC_OscConfig+0x4bc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a75      	ldr	r2, [pc, #468]	; (8005bb8 <HAL_RCC_OscConfig+0x4bc>)
 80059e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ea:	f7fc fccd 	bl	8002388 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f2:	f7fc fcc9 	bl	8002388 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e183      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a04:	4b6c      	ldr	r3, [pc, #432]	; (8005bb8 <HAL_RCC_OscConfig+0x4bc>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d108      	bne.n	8005a2a <HAL_RCC_OscConfig+0x32e>
 8005a18:	4b66      	ldr	r3, [pc, #408]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	4a65      	ldr	r2, [pc, #404]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a28:	e024      	b.n	8005a74 <HAL_RCC_OscConfig+0x378>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d110      	bne.n	8005a54 <HAL_RCC_OscConfig+0x358>
 8005a32:	4b60      	ldr	r3, [pc, #384]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a38:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a3a:	f043 0304 	orr.w	r3, r3, #4
 8005a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a42:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	4a5a      	ldr	r2, [pc, #360]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a52:	e00f      	b.n	8005a74 <HAL_RCC_OscConfig+0x378>
 8005a54:	4b57      	ldr	r3, [pc, #348]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	4a56      	ldr	r2, [pc, #344]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a64:	4b53      	ldr	r3, [pc, #332]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	4a52      	ldr	r2, [pc, #328]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fc fc84 	bl	8002388 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7fc fc80 	bl	8002388 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e138      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a9a:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ed      	beq.n	8005a84 <HAL_RCC_OscConfig+0x388>
 8005aa8:	e015      	b.n	8005ad6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aaa:	f7fc fc6d 	bl	8002388 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fc fc69 	bl	8002388 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e121      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ac8:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1ed      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ad6:	7ffb      	ldrb	r3, [r7, #31]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d105      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005adc:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae0:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d03c      	beq.n	8005b6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01c      	beq.n	8005b36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b02:	4a2c      	ldr	r2, [pc, #176]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fc3c 	bl	8002388 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b14:	f7fc fc38 	bl	8002388 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e0f2      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0ef      	beq.n	8005b14 <HAL_RCC_OscConfig+0x418>
 8005b34:	e01b      	b.n	8005b6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b46:	f7fc fc1f 	bl	8002388 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b4e:	f7fc fc1b 	bl	8002388 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e0d5      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b60:	4b14      	ldr	r3, [pc, #80]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ef      	bne.n	8005b4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80c9 	beq.w	8005d0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b78:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 030c 	and.w	r3, r3, #12
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	f000 8083 	beq.w	8005c8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d15e      	bne.n	8005c4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fc fbf5 	bl	8002388 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba0:	e00c      	b.n	8005bbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba2:	f7fc fbf1 	bl	8002388 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d905      	bls.n	8005bbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e0ab      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bbc:	4b55      	ldr	r3, [pc, #340]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1ec      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc8:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	4b52      	ldr	r3, [pc, #328]	; (8005d18 <HAL_RCC_OscConfig+0x61c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6a11      	ldr	r1, [r2, #32]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	0112      	lsls	r2, r2, #4
 8005bdc:	4311      	orrs	r1, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005be2:	0212      	lsls	r2, r2, #8
 8005be4:	4311      	orrs	r1, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bea:	0852      	lsrs	r2, r2, #1
 8005bec:	3a01      	subs	r2, #1
 8005bee:	0552      	lsls	r2, r2, #21
 8005bf0:	4311      	orrs	r1, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bf6:	0852      	lsrs	r2, r2, #1
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	0652      	lsls	r2, r2, #25
 8005bfc:	4311      	orrs	r1, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c02:	06d2      	lsls	r2, r2, #27
 8005c04:	430a      	orrs	r2, r1
 8005c06:	4943      	ldr	r1, [pc, #268]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c0c:	4b41      	ldr	r3, [pc, #260]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a40      	ldr	r2, [pc, #256]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c18:	4b3e      	ldr	r3, [pc, #248]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a3d      	ldr	r2, [pc, #244]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fc fbb0 	bl	8002388 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fc fbac 	bl	8002388 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e066      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c3e:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x530>
 8005c4a:	e05e      	b.n	8005d0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fc fb96 	bl	8002388 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c60:	f7fc fb92 	bl	8002388 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e04c      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c72:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c7e:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	4924      	ldr	r1, [pc, #144]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <HAL_RCC_OscConfig+0x620>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	60cb      	str	r3, [r1, #12]
 8005c8a:	e03e      	b.n	8005d0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e039      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <HAL_RCC_OscConfig+0x618>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f003 0203 	and.w	r2, r3, #3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d12c      	bne.n	8005d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d123      	bne.n	8005d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d11b      	bne.n	8005d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d113      	bne.n	8005d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	3b01      	subs	r3, #1
 8005cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d001      	beq.n	8005d0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40021000 	.word	0x40021000
 8005d18:	019f800c 	.word	0x019f800c
 8005d1c:	feeefffc 	.word	0xfeeefffc

08005d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e11e      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d38:	4b91      	ldr	r3, [pc, #580]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d910      	bls.n	8005d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b8e      	ldr	r3, [pc, #568]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f023 020f 	bic.w	r2, r3, #15
 8005d4e:	498c      	ldr	r1, [pc, #560]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d56:	4b8a      	ldr	r3, [pc, #552]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e106      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d073      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d129      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7c:	4b81      	ldr	r3, [pc, #516]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0f4      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d8c:	f000 f99e 	bl	80060cc <RCC_GetSysClockFreqFromPLLSource>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4a7c      	ldr	r2, [pc, #496]	; (8005f88 <HAL_RCC_ClockConfig+0x268>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d93f      	bls.n	8005e1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d9a:	4b7a      	ldr	r3, [pc, #488]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d033      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12f      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dba:	4b72      	ldr	r3, [pc, #456]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc2:	4a70      	ldr	r2, [pc, #448]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e024      	b.n	8005e1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd8:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0c6      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de8:	4b66      	ldr	r3, [pc, #408]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0be      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005df8:	f000 f8ce 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4a61      	ldr	r2, [pc, #388]	; (8005f88 <HAL_RCC_ClockConfig+0x268>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d909      	bls.n	8005e1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e06:	4b5f      	ldr	r3, [pc, #380]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0e:	4a5d      	ldr	r2, [pc, #372]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e1a:	4b5a      	ldr	r3, [pc, #360]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 0203 	bic.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4957      	ldr	r1, [pc, #348]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2c:	f7fc faac 	bl	8002388 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e34:	f7fc faa8 	bl	8002388 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e095      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4a:	4b4e      	ldr	r3, [pc, #312]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 020c 	and.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d1eb      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d023      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e74:	4b43      	ldr	r3, [pc, #268]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a42      	ldr	r2, [pc, #264]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e8c:	4b3d      	ldr	r3, [pc, #244]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e94:	4a3b      	ldr	r2, [pc, #236]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e9c:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4936      	ldr	r1, [pc, #216]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b80      	cmp	r3, #128	; 0x80
 8005eb4:	d105      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005eb6:	4b33      	ldr	r3, [pc, #204]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4a32      	ldr	r2, [pc, #200]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d21d      	bcs.n	8005f0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f023 020f 	bic.w	r2, r3, #15
 8005ed8:	4929      	ldr	r1, [pc, #164]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ee0:	f7fc fa52 	bl	8002388 <HAL_GetTick>
 8005ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	e00a      	b.n	8005efe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee8:	f7fc fa4e 	bl	8002388 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e03b      	b.n	8005f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <HAL_RCC_ClockConfig+0x260>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d1ed      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4917      	ldr	r1, [pc, #92]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	490f      	ldr	r1, [pc, #60]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f4a:	f000 f825 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <HAL_RCC_ClockConfig+0x264>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	490c      	ldr	r1, [pc, #48]	; (8005f8c <HAL_RCC_ClockConfig+0x26c>)
 8005f5c:	5ccb      	ldrb	r3, [r1, r3]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	fa22 f303 	lsr.w	r3, r2, r3
 8005f66:	4a0a      	ldr	r2, [pc, #40]	; (8005f90 <HAL_RCC_ClockConfig+0x270>)
 8005f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <HAL_RCC_ClockConfig+0x274>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fc f9be 	bl	80022f0 <HAL_InitTick>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40022000 	.word	0x40022000
 8005f84:	40021000 	.word	0x40021000
 8005f88:	04c4b400 	.word	0x04c4b400
 8005f8c:	080081f4 	.word	0x080081f4
 8005f90:	20000000 	.word	0x20000000
 8005f94:	20000004 	.word	0x20000004

08005f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f9e:	4b2c      	ldr	r3, [pc, #176]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d102      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005faa:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e047      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 030c 	and.w	r3, r3, #12
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d102      	bne.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fbc:	4b26      	ldr	r3, [pc, #152]	; (8006058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	e03e      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	2b0c      	cmp	r3, #12
 8005fcc:	d136      	bne.n	800603c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fce:	4b20      	ldr	r3, [pc, #128]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d10c      	bne.n	8006006 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fec:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ff6:	68d2      	ldr	r2, [r2, #12]
 8005ff8:	0a12      	lsrs	r2, r2, #8
 8005ffa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	617b      	str	r3, [r7, #20]
      break;
 8006004:	e00c      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006006:	4a13      	ldr	r2, [pc, #76]	; (8006054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	fbb2 f3f3 	udiv	r3, r2, r3
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006010:	68d2      	ldr	r2, [r2, #12]
 8006012:	0a12      	lsrs	r2, r2, #8
 8006014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]
      break;
 800601e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	0e5b      	lsrs	r3, r3, #25
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	3301      	adds	r3, #1
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	e001      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006040:	693b      	ldr	r3, [r7, #16]
}
 8006042:	4618      	mov	r0, r3
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40021000 	.word	0x40021000
 8006054:	00f42400 	.word	0x00f42400
 8006058:	007a1200 	.word	0x007a1200

0800605c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006060:	4b03      	ldr	r3, [pc, #12]	; (8006070 <HAL_RCC_GetHCLKFreq+0x14>)
 8006062:	681b      	ldr	r3, [r3, #0]
}
 8006064:	4618      	mov	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000000 	.word	0x20000000

08006074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006078:	f7ff fff0 	bl	800605c <HAL_RCC_GetHCLKFreq>
 800607c:	4602      	mov	r2, r0
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4904      	ldr	r1, [pc, #16]	; (800609c <HAL_RCC_GetPCLK1Freq+0x28>)
 800608a:	5ccb      	ldrb	r3, [r1, r3]
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000
 800609c:	08008204 	.word	0x08008204

080060a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060a4:	f7ff ffda 	bl	800605c <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0adb      	lsrs	r3, r3, #11
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4904      	ldr	r1, [pc, #16]	; (80060c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40021000 	.word	0x40021000
 80060c8:	08008204 	.word	0x08008204

080060cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060d2:	4b1e      	ldr	r3, [pc, #120]	; (800614c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d10c      	bne.n	800610a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	4a14      	ldr	r2, [pc, #80]	; (800614c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060fa:	68d2      	ldr	r2, [r2, #12]
 80060fc:	0a12      	lsrs	r2, r2, #8
 80060fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	617b      	str	r3, [r7, #20]
    break;
 8006108:	e00c      	b.n	8006124 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	4a0e      	ldr	r2, [pc, #56]	; (800614c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006114:	68d2      	ldr	r2, [r2, #12]
 8006116:	0a12      	lsrs	r2, r2, #8
 8006118:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800611c:	fb02 f303 	mul.w	r3, r2, r3
 8006120:	617b      	str	r3, [r7, #20]
    break;
 8006122:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	0e5b      	lsrs	r3, r3, #25
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	3301      	adds	r3, #1
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800613e:	687b      	ldr	r3, [r7, #4]
}
 8006140:	4618      	mov	r0, r3
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40021000 	.word	0x40021000
 8006150:	007a1200 	.word	0x007a1200
 8006154:	00f42400 	.word	0x00f42400

08006158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006160:	2300      	movs	r3, #0
 8006162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006164:	2300      	movs	r3, #0
 8006166:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8098 	beq.w	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006176:	2300      	movs	r3, #0
 8006178:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800617a:	4b43      	ldr	r3, [pc, #268]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10d      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006186:	4b40      	ldr	r3, [pc, #256]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	4a3f      	ldr	r2, [pc, #252]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006190:	6593      	str	r3, [r2, #88]	; 0x58
 8006192:	4b3d      	ldr	r3, [pc, #244]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619a:	60bb      	str	r3, [r7, #8]
 800619c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800619e:	2301      	movs	r3, #1
 80061a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061a2:	4b3a      	ldr	r3, [pc, #232]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a39      	ldr	r2, [pc, #228]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ae:	f7fc f8eb 	bl	8002388 <HAL_GetTick>
 80061b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b4:	e009      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b6:	f7fc f8e7 	bl	8002388 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d902      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	74fb      	strb	r3, [r7, #19]
        break;
 80061c8:	e005      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ca:	4b30      	ldr	r3, [pc, #192]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ef      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d159      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061dc:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01e      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d019      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061f8:	4b23      	ldr	r3, [pc, #140]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006204:	4b20      	ldr	r3, [pc, #128]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006214:	4b1c      	ldr	r3, [pc, #112]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800621c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006224:	4a18      	ldr	r2, [pc, #96]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006236:	f7fc f8a7 	bl	8002388 <HAL_GetTick>
 800623a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623c:	e00b      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fc f8a3 	bl	8002388 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	; 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d902      	bls.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	74fb      	strb	r3, [r7, #19]
            break;
 8006254:	e006      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ec      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006264:	7cfb      	ldrb	r3, [r7, #19]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	4903      	ldr	r1, [pc, #12]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006280:	e008      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006282:	7cfb      	ldrb	r3, [r7, #19]
 8006284:	74bb      	strb	r3, [r7, #18]
 8006286:	e005      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006288:	40021000 	.word	0x40021000
 800628c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006294:	7c7b      	ldrb	r3, [r7, #17]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629a:	4ba7      	ldr	r3, [pc, #668]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	4aa6      	ldr	r2, [pc, #664]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b2:	4ba1      	ldr	r3, [pc, #644]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b8:	f023 0203 	bic.w	r2, r3, #3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	499d      	ldr	r1, [pc, #628]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d4:	4b98      	ldr	r3, [pc, #608]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062da:	f023 020c 	bic.w	r2, r3, #12
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4995      	ldr	r1, [pc, #596]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062f6:	4b90      	ldr	r3, [pc, #576]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	498c      	ldr	r1, [pc, #560]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006318:	4b87      	ldr	r3, [pc, #540]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	4984      	ldr	r1, [pc, #528]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800633a:	4b7f      	ldr	r3, [pc, #508]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	497b      	ldr	r1, [pc, #492]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800635c:	4b76      	ldr	r3, [pc, #472]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	4973      	ldr	r1, [pc, #460]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800637e:	4b6e      	ldr	r3, [pc, #440]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	496a      	ldr	r1, [pc, #424]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063a0:	4b65      	ldr	r3, [pc, #404]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	4962      	ldr	r1, [pc, #392]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063c2:	4b5d      	ldr	r3, [pc, #372]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	4959      	ldr	r1, [pc, #356]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063e4:	4b54      	ldr	r3, [pc, #336]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ea:	f023 0203 	bic.w	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	4951      	ldr	r1, [pc, #324]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006406:	4b4c      	ldr	r3, [pc, #304]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4948      	ldr	r1, [pc, #288]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006424:	2b00      	cmp	r3, #0
 8006426:	d015      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006428:	4b43      	ldr	r3, [pc, #268]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	4940      	ldr	r1, [pc, #256]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006446:	d105      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006448:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4a3a      	ldr	r2, [pc, #232]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006452:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d015      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006460:	4b35      	ldr	r3, [pc, #212]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	4932      	ldr	r1, [pc, #200]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647e:	d105      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006480:	4b2d      	ldr	r3, [pc, #180]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4a2c      	ldr	r2, [pc, #176]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800648a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d015      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006498:	4b27      	ldr	r3, [pc, #156]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	4924      	ldr	r1, [pc, #144]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064b6:	d105      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064b8:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4a1e      	ldr	r2, [pc, #120]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d015      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064d0:	4b19      	ldr	r3, [pc, #100]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	4916      	ldr	r1, [pc, #88]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ee:	d105      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064f0:	4b11      	ldr	r3, [pc, #68]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a10      	ldr	r2, [pc, #64]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d019      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	4908      	ldr	r1, [pc, #32]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006526:	d109      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a02      	ldr	r2, [pc, #8]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006532:	60d3      	str	r3, [r2, #12]
 8006534:	e002      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006548:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	4926      	ldr	r1, [pc, #152]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006566:	d105      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006568:	4b21      	ldr	r3, [pc, #132]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a20      	ldr	r2, [pc, #128]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800656e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006572:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006580:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006586:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658e:	4918      	ldr	r1, [pc, #96]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659e:	d105      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065a0:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	490a      	ldr	r1, [pc, #40]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065d6:	d105      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a04      	ldr	r2, [pc, #16]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80065e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000

080065f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e09d      	b.n	8006742 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d108      	bne.n	8006620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006616:	d009      	beq.n	800662c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	61da      	str	r2, [r3, #28]
 800661e:	e005      	b.n	800662c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb fc4a 	bl	8001ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800666c:	d902      	bls.n	8006674 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e002      	b.n	800667a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006678:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006682:	d007      	beq.n	8006694 <HAL_SPI_Init+0xa0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800668c:	d002      	beq.n	8006694 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	ea42 0103 	orr.w	r1, r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	0c1b      	lsrs	r3, r3, #16
 80066f0:	f003 0204 	and.w	r2, r3, #4
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006710:	ea42 0103 	orr.w	r1, r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e049      	b.n	80067f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fb fc2b 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2202      	movs	r2, #2
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f000 faf1 	bl	8006d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	f241 1311 	movw	r3, #4369	; 0x1111
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10f      	bne.n	8006840 <HAL_TIM_Base_Stop_IT+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	f244 4344 	movw	r3, #17476	; 0x4444
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <HAL_TIM_Base_Stop_IT+0x48>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01b      	beq.n	80068ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f06f 0202 	mvn.w	r2, #2
 800688a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa47 	bl	8006d34 <HAL_TIM_IC_CaptureCallback>
 80068a6:	e005      	b.n	80068b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa39 	bl	8006d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa4a 	bl	8006d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d020      	beq.n	8006906 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f06f 0204 	mvn.w	r2, #4
 80068d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa21 	bl	8006d34 <HAL_TIM_IC_CaptureCallback>
 80068f2:	e005      	b.n	8006900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa13 	bl	8006d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa24 	bl	8006d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01b      	beq.n	8006952 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f06f 0208 	mvn.w	r2, #8
 8006922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2204      	movs	r2, #4
 8006928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f9fb 	bl	8006d34 <HAL_TIM_IC_CaptureCallback>
 800693e:	e005      	b.n	800694c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f9ed 	bl	8006d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9fe 	bl	8006d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f06f 0210 	mvn.w	r2, #16
 800696e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2208      	movs	r2, #8
 8006974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9d5 	bl	8006d34 <HAL_TIM_IC_CaptureCallback>
 800698a:	e005      	b.n	8006998 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f9c7 	bl	8006d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f9d8 	bl	8006d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0201 	mvn.w	r2, #1
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fa fd81 	bl	80014c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fbb0 	bl	8007150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fba8 	bl	8007164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f992 	bl	8006d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00c      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0220 	mvn.w	r2, #32
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb70 	bl	800713c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fb7c 	bl	8007178 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fb74 	bl	800718c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb6c 	bl	80071a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb64 	bl	80071b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIM_ConfigClockSource+0x1c>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0f6      	b.n	8006cfe <HAL_TIM_ConfigClockSource+0x20a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006b2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6f      	ldr	r2, [pc, #444]	; (8006d08 <HAL_TIM_ConfigClockSource+0x214>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	f000 80c1 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006b50:	4a6d      	ldr	r2, [pc, #436]	; (8006d08 <HAL_TIM_ConfigClockSource+0x214>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	f200 80c6 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b58:	4a6c      	ldr	r2, [pc, #432]	; (8006d0c <HAL_TIM_ConfigClockSource+0x218>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f000 80b9 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006b60:	4a6a      	ldr	r2, [pc, #424]	; (8006d0c <HAL_TIM_ConfigClockSource+0x218>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	f200 80be 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b68:	4a69      	ldr	r2, [pc, #420]	; (8006d10 <HAL_TIM_ConfigClockSource+0x21c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	f000 80b1 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006b70:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_TIM_ConfigClockSource+0x21c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	f200 80b6 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b78:	4a66      	ldr	r2, [pc, #408]	; (8006d14 <HAL_TIM_ConfigClockSource+0x220>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	f000 80a9 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006b80:	4a64      	ldr	r2, [pc, #400]	; (8006d14 <HAL_TIM_ConfigClockSource+0x220>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	f200 80ae 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b88:	4a63      	ldr	r2, [pc, #396]	; (8006d18 <HAL_TIM_ConfigClockSource+0x224>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f000 80a1 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006b90:	4a61      	ldr	r2, [pc, #388]	; (8006d18 <HAL_TIM_ConfigClockSource+0x224>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	f200 80a6 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b98:	4a60      	ldr	r2, [pc, #384]	; (8006d1c <HAL_TIM_ConfigClockSource+0x228>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f000 8099 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ba0:	4a5e      	ldr	r2, [pc, #376]	; (8006d1c <HAL_TIM_ConfigClockSource+0x228>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	f200 809e 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ba8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006bac:	f000 8091 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006bb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006bb4:	f200 8096 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbc:	f000 8089 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc4:	f200 808e 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bcc:	d03e      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0x158>
 8006bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd2:	f200 8087 	bhi.w	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bda:	f000 8086 	beq.w	8006cea <HAL_TIM_ConfigClockSource+0x1f6>
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	d87f      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006be4:	2b70      	cmp	r3, #112	; 0x70
 8006be6:	d01a      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x12a>
 8006be8:	2b70      	cmp	r3, #112	; 0x70
 8006bea:	d87b      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bec:	2b60      	cmp	r3, #96	; 0x60
 8006bee:	d050      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x19e>
 8006bf0:	2b60      	cmp	r3, #96	; 0x60
 8006bf2:	d877      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d03c      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0x17e>
 8006bf8:	2b50      	cmp	r3, #80	; 0x50
 8006bfa:	d873      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d058      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0x1be>
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d86f      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d064      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c08:	2b30      	cmp	r3, #48	; 0x30
 8006c0a:	d86b      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d060      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d867      	bhi.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d05c      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d05a      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c1c:	e062      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c2e:	f000 f9cf 	bl	8006fd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	609a      	str	r2, [r3, #8]
      break;
 8006c4a:	e04f      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c5c:	f000 f9b8 	bl	8006fd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6e:	609a      	str	r2, [r3, #8]
      break;
 8006c70:	e03c      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f000 f92a 	bl	8006ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2150      	movs	r1, #80	; 0x50
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f983 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006c90:	e02c      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f000 f949 	bl	8006f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2160      	movs	r1, #96	; 0x60
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f973 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006cb0:	e01c      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f000 f90a 	bl	8006ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2140      	movs	r1, #64	; 0x40
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f963 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006cd0:	e00c      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f000 f95a 	bl	8006f96 <TIM_ITRx_SetConfig>
      break;
 8006ce2:	e003      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce8:	e000      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	00100070 	.word	0x00100070
 8006d0c:	00100060 	.word	0x00100060
 8006d10:	00100050 	.word	0x00100050
 8006d14:	00100040 	.word	0x00100040
 8006d18:	00100030 	.word	0x00100030
 8006d1c:	00100020 	.word	0x00100020

08006d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a4c      	ldr	r2, [pc, #304]	; (8006eb4 <TIM_Base_SetConfig+0x144>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d017      	beq.n	8006db8 <TIM_Base_SetConfig+0x48>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8e:	d013      	beq.n	8006db8 <TIM_Base_SetConfig+0x48>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a49      	ldr	r2, [pc, #292]	; (8006eb8 <TIM_Base_SetConfig+0x148>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00f      	beq.n	8006db8 <TIM_Base_SetConfig+0x48>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a48      	ldr	r2, [pc, #288]	; (8006ebc <TIM_Base_SetConfig+0x14c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00b      	beq.n	8006db8 <TIM_Base_SetConfig+0x48>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a47      	ldr	r2, [pc, #284]	; (8006ec0 <TIM_Base_SetConfig+0x150>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_Base_SetConfig+0x48>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a46      	ldr	r2, [pc, #280]	; (8006ec4 <TIM_Base_SetConfig+0x154>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_Base_SetConfig+0x48>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a45      	ldr	r2, [pc, #276]	; (8006ec8 <TIM_Base_SetConfig+0x158>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d108      	bne.n	8006dca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a39      	ldr	r2, [pc, #228]	; (8006eb4 <TIM_Base_SetConfig+0x144>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d023      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd8:	d01f      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a36      	ldr	r2, [pc, #216]	; (8006eb8 <TIM_Base_SetConfig+0x148>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01b      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a35      	ldr	r2, [pc, #212]	; (8006ebc <TIM_Base_SetConfig+0x14c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d017      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a34      	ldr	r2, [pc, #208]	; (8006ec0 <TIM_Base_SetConfig+0x150>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a33      	ldr	r2, [pc, #204]	; (8006ec4 <TIM_Base_SetConfig+0x154>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00f      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a33      	ldr	r2, [pc, #204]	; (8006ecc <TIM_Base_SetConfig+0x15c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00b      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a32      	ldr	r2, [pc, #200]	; (8006ed0 <TIM_Base_SetConfig+0x160>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a31      	ldr	r2, [pc, #196]	; (8006ed4 <TIM_Base_SetConfig+0x164>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_Base_SetConfig+0xaa>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2c      	ldr	r2, [pc, #176]	; (8006ec8 <TIM_Base_SetConfig+0x158>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d108      	bne.n	8006e2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a18      	ldr	r2, [pc, #96]	; (8006eb4 <TIM_Base_SetConfig+0x144>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d013      	beq.n	8006e80 <TIM_Base_SetConfig+0x110>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <TIM_Base_SetConfig+0x154>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00f      	beq.n	8006e80 <TIM_Base_SetConfig+0x110>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1a      	ldr	r2, [pc, #104]	; (8006ecc <TIM_Base_SetConfig+0x15c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_Base_SetConfig+0x110>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a19      	ldr	r2, [pc, #100]	; (8006ed0 <TIM_Base_SetConfig+0x160>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_Base_SetConfig+0x110>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <TIM_Base_SetConfig+0x164>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_Base_SetConfig+0x110>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <TIM_Base_SetConfig+0x158>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d103      	bne.n	8006e88 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d105      	bne.n	8006ea6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]
  }
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40012c00 	.word	0x40012c00
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	40013400 	.word	0x40013400
 8006ec8:	40015000 	.word	0x40015000
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800

08006ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f023 0201 	bic.w	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 030a 	bic.w	r3, r3, #10
 8006f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b087      	sub	sp, #28
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f023 0210 	bic.w	r2, r3, #16
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	031b      	lsls	r3, r3, #12
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	621a      	str	r2, [r3, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f043 0307 	orr.w	r3, r3, #7
 8006fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	021a      	lsls	r2, r3, #8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007024:	2302      	movs	r3, #2
 8007026:	e074      	b.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a34      	ldr	r2, [pc, #208]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d009      	beq.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a33      	ldr	r2, [pc, #204]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a31      	ldr	r2, [pc, #196]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d108      	bne.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800706c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a21      	ldr	r2, [pc, #132]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a8:	d01d      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1f      	ldr	r2, [pc, #124]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1d      	ldr	r2, [pc, #116]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1c      	ldr	r2, [pc, #112]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a15      	ldr	r2, [pc, #84]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a18      	ldr	r2, [pc, #96]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a11      	ldr	r2, [pc, #68]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d10c      	bne.n	8007100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40013400 	.word	0x40013400
 8007128:	40015000 	.word	0x40015000
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40014000 	.word	0x40014000

0800713c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e042      	b.n	8007260 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7fa fdb9 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2224      	movs	r2, #36	; 0x24
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0201 	bic.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb24 	bl	8007860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f825 	bl	8007268 <UART_SetConfig>
 800721e:	4603      	mov	r3, r0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e01b      	b.n	8007260 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fba3 	bl	80079a4 <UART_CheckIdleState>
 800725e:	4603      	mov	r3, r0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800726c:	b08c      	sub	sp, #48	; 0x30
 800726e:	af00      	add	r7, sp, #0
 8007270:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	431a      	orrs	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	431a      	orrs	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	4313      	orrs	r3, r2
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4baa      	ldr	r3, [pc, #680]	; (8007540 <UART_SetConfig+0x2d8>)
 8007298:	4013      	ands	r3, r2
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072a0:	430b      	orrs	r3, r1
 80072a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a9f      	ldr	r2, [pc, #636]	; (8007544 <UART_SetConfig+0x2dc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d0:	4313      	orrs	r3, r2
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	f023 010f 	bic.w	r1, r3, #15
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a90      	ldr	r2, [pc, #576]	; (8007548 <UART_SetConfig+0x2e0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d125      	bne.n	8007358 <UART_SetConfig+0xf0>
 800730c:	4b8f      	ldr	r3, [pc, #572]	; (800754c <UART_SetConfig+0x2e4>)
 800730e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b03      	cmp	r3, #3
 8007318:	d81a      	bhi.n	8007350 <UART_SetConfig+0xe8>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0xb8>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	08007341 	.word	0x08007341
 8007328:	08007339 	.word	0x08007339
 800732c:	08007349 	.word	0x08007349
 8007330:	2301      	movs	r3, #1
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007336:	e116      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007338:	2302      	movs	r3, #2
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733e:	e112      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007346:	e10e      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734e:	e10a      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007356:	e106      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a7c      	ldr	r2, [pc, #496]	; (8007550 <UART_SetConfig+0x2e8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d138      	bne.n	80073d4 <UART_SetConfig+0x16c>
 8007362:	4b7a      	ldr	r3, [pc, #488]	; (800754c <UART_SetConfig+0x2e4>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007368:	f003 030c 	and.w	r3, r3, #12
 800736c:	2b0c      	cmp	r3, #12
 800736e:	d82d      	bhi.n	80073cc <UART_SetConfig+0x164>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0x110>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	080073ad 	.word	0x080073ad
 800737c:	080073cd 	.word	0x080073cd
 8007380:	080073cd 	.word	0x080073cd
 8007384:	080073cd 	.word	0x080073cd
 8007388:	080073bd 	.word	0x080073bd
 800738c:	080073cd 	.word	0x080073cd
 8007390:	080073cd 	.word	0x080073cd
 8007394:	080073cd 	.word	0x080073cd
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073cd 	.word	0x080073cd
 80073a0:	080073cd 	.word	0x080073cd
 80073a4:	080073cd 	.word	0x080073cd
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	2300      	movs	r3, #0
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b2:	e0d8      	b.n	8007566 <UART_SetConfig+0x2fe>
 80073b4:	2302      	movs	r3, #2
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ba:	e0d4      	b.n	8007566 <UART_SetConfig+0x2fe>
 80073bc:	2304      	movs	r3, #4
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c2:	e0d0      	b.n	8007566 <UART_SetConfig+0x2fe>
 80073c4:	2308      	movs	r3, #8
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ca:	e0cc      	b.n	8007566 <UART_SetConfig+0x2fe>
 80073cc:	2310      	movs	r3, #16
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d2:	e0c8      	b.n	8007566 <UART_SetConfig+0x2fe>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a5e      	ldr	r2, [pc, #376]	; (8007554 <UART_SetConfig+0x2ec>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d125      	bne.n	800742a <UART_SetConfig+0x1c2>
 80073de:	4b5b      	ldr	r3, [pc, #364]	; (800754c <UART_SetConfig+0x2e4>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d016      	beq.n	800741a <UART_SetConfig+0x1b2>
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	d818      	bhi.n	8007422 <UART_SetConfig+0x1ba>
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d00a      	beq.n	800740a <UART_SetConfig+0x1a2>
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d814      	bhi.n	8007422 <UART_SetConfig+0x1ba>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <UART_SetConfig+0x19a>
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d008      	beq.n	8007412 <UART_SetConfig+0x1aa>
 8007400:	e00f      	b.n	8007422 <UART_SetConfig+0x1ba>
 8007402:	2300      	movs	r3, #0
 8007404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007408:	e0ad      	b.n	8007566 <UART_SetConfig+0x2fe>
 800740a:	2302      	movs	r3, #2
 800740c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007410:	e0a9      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007412:	2304      	movs	r3, #4
 8007414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007418:	e0a5      	b.n	8007566 <UART_SetConfig+0x2fe>
 800741a:	2308      	movs	r3, #8
 800741c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007420:	e0a1      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007422:	2310      	movs	r3, #16
 8007424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007428:	e09d      	b.n	8007566 <UART_SetConfig+0x2fe>
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a4a      	ldr	r2, [pc, #296]	; (8007558 <UART_SetConfig+0x2f0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d125      	bne.n	8007480 <UART_SetConfig+0x218>
 8007434:	4b45      	ldr	r3, [pc, #276]	; (800754c <UART_SetConfig+0x2e4>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800743e:	2bc0      	cmp	r3, #192	; 0xc0
 8007440:	d016      	beq.n	8007470 <UART_SetConfig+0x208>
 8007442:	2bc0      	cmp	r3, #192	; 0xc0
 8007444:	d818      	bhi.n	8007478 <UART_SetConfig+0x210>
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d00a      	beq.n	8007460 <UART_SetConfig+0x1f8>
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	d814      	bhi.n	8007478 <UART_SetConfig+0x210>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <UART_SetConfig+0x1f0>
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d008      	beq.n	8007468 <UART_SetConfig+0x200>
 8007456:	e00f      	b.n	8007478 <UART_SetConfig+0x210>
 8007458:	2300      	movs	r3, #0
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e082      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007460:	2302      	movs	r3, #2
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e07e      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007468:	2304      	movs	r3, #4
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746e:	e07a      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007470:	2308      	movs	r3, #8
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007476:	e076      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007478:	2310      	movs	r3, #16
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747e:	e072      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a35      	ldr	r2, [pc, #212]	; (800755c <UART_SetConfig+0x2f4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d12a      	bne.n	80074e0 <UART_SetConfig+0x278>
 800748a:	4b30      	ldr	r3, [pc, #192]	; (800754c <UART_SetConfig+0x2e4>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007498:	d01a      	beq.n	80074d0 <UART_SetConfig+0x268>
 800749a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800749e:	d81b      	bhi.n	80074d8 <UART_SetConfig+0x270>
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a4:	d00c      	beq.n	80074c0 <UART_SetConfig+0x258>
 80074a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074aa:	d815      	bhi.n	80074d8 <UART_SetConfig+0x270>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <UART_SetConfig+0x250>
 80074b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b4:	d008      	beq.n	80074c8 <UART_SetConfig+0x260>
 80074b6:	e00f      	b.n	80074d8 <UART_SetConfig+0x270>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e052      	b.n	8007566 <UART_SetConfig+0x2fe>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c6:	e04e      	b.n	8007566 <UART_SetConfig+0x2fe>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ce:	e04a      	b.n	8007566 <UART_SetConfig+0x2fe>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d6:	e046      	b.n	8007566 <UART_SetConfig+0x2fe>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074de:	e042      	b.n	8007566 <UART_SetConfig+0x2fe>
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a17      	ldr	r2, [pc, #92]	; (8007544 <UART_SetConfig+0x2dc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d13a      	bne.n	8007560 <UART_SetConfig+0x2f8>
 80074ea:	4b18      	ldr	r3, [pc, #96]	; (800754c <UART_SetConfig+0x2e4>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074f8:	d01a      	beq.n	8007530 <UART_SetConfig+0x2c8>
 80074fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074fe:	d81b      	bhi.n	8007538 <UART_SetConfig+0x2d0>
 8007500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007504:	d00c      	beq.n	8007520 <UART_SetConfig+0x2b8>
 8007506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750a:	d815      	bhi.n	8007538 <UART_SetConfig+0x2d0>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <UART_SetConfig+0x2b0>
 8007510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007514:	d008      	beq.n	8007528 <UART_SetConfig+0x2c0>
 8007516:	e00f      	b.n	8007538 <UART_SetConfig+0x2d0>
 8007518:	2300      	movs	r3, #0
 800751a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751e:	e022      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007520:	2302      	movs	r3, #2
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007526:	e01e      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007528:	2304      	movs	r3, #4
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752e:	e01a      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007530:	2308      	movs	r3, #8
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007536:	e016      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007538:	2310      	movs	r3, #16
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753e:	e012      	b.n	8007566 <UART_SetConfig+0x2fe>
 8007540:	cfff69f3 	.word	0xcfff69f3
 8007544:	40008000 	.word	0x40008000
 8007548:	40013800 	.word	0x40013800
 800754c:	40021000 	.word	0x40021000
 8007550:	40004400 	.word	0x40004400
 8007554:	40004800 	.word	0x40004800
 8007558:	40004c00 	.word	0x40004c00
 800755c:	40005000 	.word	0x40005000
 8007560:	2310      	movs	r3, #16
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4aae      	ldr	r2, [pc, #696]	; (8007824 <UART_SetConfig+0x5bc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	f040 8097 	bne.w	80076a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007576:	2b08      	cmp	r3, #8
 8007578:	d823      	bhi.n	80075c2 <UART_SetConfig+0x35a>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0x318>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075c3 	.word	0x080075c3
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075c3 	.word	0x080075c3
 8007590:	080075b3 	.word	0x080075b3
 8007594:	080075c3 	.word	0x080075c3
 8007598:	080075c3 	.word	0x080075c3
 800759c:	080075c3 	.word	0x080075c3
 80075a0:	080075bb 	.word	0x080075bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fe fd66 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 80075a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075aa:	e010      	b.n	80075ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ac:	4b9e      	ldr	r3, [pc, #632]	; (8007828 <UART_SetConfig+0x5c0>)
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075b0:	e00d      	b.n	80075ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fe fcf1 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075b8:	e009      	b.n	80075ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c0:	e005      	b.n	80075ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8130 	beq.w	8007836 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	4a94      	ldr	r2, [pc, #592]	; (800782c <UART_SetConfig+0x5c4>)
 80075dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4413      	add	r3, r2
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d305      	bcc.n	8007606 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	429a      	cmp	r2, r3
 8007604:	d903      	bls.n	800760e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800760c:	e113      	b.n	8007836 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	2200      	movs	r2, #0
 8007612:	60bb      	str	r3, [r7, #8]
 8007614:	60fa      	str	r2, [r7, #12]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	4a84      	ldr	r2, [pc, #528]	; (800782c <UART_SetConfig+0x5c4>)
 800761c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007620:	b29b      	uxth	r3, r3
 8007622:	2200      	movs	r2, #0
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007630:	f7f8 fdf2 	bl	8000218 <__aeabi_uldivmod>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4610      	mov	r0, r2
 800763a:	4619      	mov	r1, r3
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	020b      	lsls	r3, r1, #8
 8007646:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800764a:	0202      	lsls	r2, r0, #8
 800764c:	6979      	ldr	r1, [r7, #20]
 800764e:	6849      	ldr	r1, [r1, #4]
 8007650:	0849      	lsrs	r1, r1, #1
 8007652:	2000      	movs	r0, #0
 8007654:	460c      	mov	r4, r1
 8007656:	4605      	mov	r5, r0
 8007658:	eb12 0804 	adds.w	r8, r2, r4
 800765c:	eb43 0905 	adc.w	r9, r3, r5
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	469a      	mov	sl, r3
 8007668:	4693      	mov	fp, r2
 800766a:	4652      	mov	r2, sl
 800766c:	465b      	mov	r3, fp
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	f7f8 fdd1 	bl	8000218 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4613      	mov	r3, r2
 800767c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007684:	d308      	bcc.n	8007698 <UART_SetConfig+0x430>
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768c:	d204      	bcs.n	8007698 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	60da      	str	r2, [r3, #12]
 8007696:	e0ce      	b.n	8007836 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800769e:	e0ca      	b.n	8007836 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a8:	d166      	bne.n	8007778 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80076aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d827      	bhi.n	8007702 <UART_SetConfig+0x49a>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0x450>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076ed 	.word	0x080076ed
 80076c4:	08007703 	.word	0x08007703
 80076c8:	080076f3 	.word	0x080076f3
 80076cc:	08007703 	.word	0x08007703
 80076d0:	08007703 	.word	0x08007703
 80076d4:	08007703 	.word	0x08007703
 80076d8:	080076fb 	.word	0x080076fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076dc:	f7fe fcca 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076e2:	e014      	b.n	800770e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076e4:	f7fe fcdc 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 80076e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ea:	e010      	b.n	800770e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ec:	4b4e      	ldr	r3, [pc, #312]	; (8007828 <UART_SetConfig+0x5c0>)
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076f0:	e00d      	b.n	800770e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f2:	f7fe fc51 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076f8:	e009      	b.n	800770e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007700:	e005      	b.n	800770e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800770c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8090 	beq.w	8007836 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	4a44      	ldr	r2, [pc, #272]	; (800782c <UART_SetConfig+0x5c4>)
 800771c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007720:	461a      	mov	r2, r3
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	fbb3 f3f2 	udiv	r3, r3, r2
 8007728:	005a      	lsls	r2, r3, #1
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	085b      	lsrs	r3, r3, #1
 8007730:	441a      	add	r2, r3
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	fbb2 f3f3 	udiv	r3, r2, r3
 800773a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	2b0f      	cmp	r3, #15
 8007740:	d916      	bls.n	8007770 <UART_SetConfig+0x508>
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007748:	d212      	bcs.n	8007770 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f023 030f 	bic.w	r3, r3, #15
 8007752:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	b29b      	uxth	r3, r3
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	b29a      	uxth	r2, r3
 8007760:	8bfb      	ldrh	r3, [r7, #30]
 8007762:	4313      	orrs	r3, r2
 8007764:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	8bfa      	ldrh	r2, [r7, #30]
 800776c:	60da      	str	r2, [r3, #12]
 800776e:	e062      	b.n	8007836 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007776:	e05e      	b.n	8007836 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800777c:	2b08      	cmp	r3, #8
 800777e:	d828      	bhi.n	80077d2 <UART_SetConfig+0x56a>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x520>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077d3 	.word	0x080077d3
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fe fc62 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 80077b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077b2:	e014      	b.n	80077de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fe fc74 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 80077b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077ba:	e010      	b.n	80077de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <UART_SetConfig+0x5c0>)
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077c0:	e00d      	b.n	80077de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe fbe9 	bl	8005f98 <HAL_RCC_GetSysClockFreq>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077d0:	e005      	b.n	80077de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077dc:	bf00      	nop
    }

    if (pclk != 0U)
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d028      	beq.n	8007836 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	4a10      	ldr	r2, [pc, #64]	; (800782c <UART_SetConfig+0x5c4>)
 80077ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	441a      	add	r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	fbb2 f3f3 	udiv	r3, r2, r3
 8007806:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	2b0f      	cmp	r3, #15
 800780c:	d910      	bls.n	8007830 <UART_SetConfig+0x5c8>
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d20c      	bcs.n	8007830 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	b29a      	uxth	r2, r3
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	e009      	b.n	8007836 <UART_SetConfig+0x5ce>
 8007822:	bf00      	nop
 8007824:	40008000 	.word	0x40008000
 8007828:	00f42400 	.word	0x00f42400
 800782c:	0800821c 	.word	0x0800821c
      }
      else
      {
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2201      	movs	r2, #1
 800783a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2201      	movs	r2, #1
 8007842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2200      	movs	r2, #0
 8007850:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007852:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007856:	4618      	mov	r0, r3
 8007858:	3730      	adds	r7, #48	; 0x30
 800785a:	46bd      	mov	sp, r7
 800785c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800795e:	d10a      	bne.n	8007976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
  }
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b098      	sub	sp, #96	; 0x60
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079b4:	f7fa fce8 	bl	8002388 <HAL_GetTick>
 80079b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d12f      	bne.n	8007a28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d0:	2200      	movs	r2, #0
 80079d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f88e 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d022      	beq.n	8007a28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f6:	653b      	str	r3, [r7, #80]	; 0x50
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a00:	647b      	str	r3, [r7, #68]	; 0x44
 8007a02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e6      	bne.n	80079e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e063      	b.n	8007af0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d149      	bne.n	8007aca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f857 	bl	8007af8 <UART_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d03c      	beq.n	8007aca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e6      	bne.n	8007a50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa2:	61fa      	str	r2, [r7, #28]
 8007aa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	69b9      	ldr	r1, [r7, #24]
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e5      	bne.n	8007a82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e012      	b.n	8007af0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3758      	adds	r7, #88	; 0x58
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b08:	e04f      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d04b      	beq.n	8007baa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b12:	f7fa fc39 	bl	8002388 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d302      	bcc.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e04e      	b.n	8007bca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d037      	beq.n	8007baa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d034      	beq.n	8007baa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d031      	beq.n	8007baa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d110      	bne.n	8007b76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2208      	movs	r2, #8
 8007b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f838 	bl	8007bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2208      	movs	r2, #8
 8007b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e029      	b.n	8007bca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b84:	d111      	bne.n	8007baa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f81e 	bl	8007bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e00f      	b.n	8007bca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d0a0      	beq.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b095      	sub	sp, #84	; 0x54
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3308      	adds	r3, #8
 8007c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e3      	bne.n	8007c0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d118      	bne.n	8007c7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f023 0310 	bic.w	r3, r3, #16
 8007c60:	647b      	str	r3, [r7, #68]	; 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6979      	ldr	r1, [r7, #20]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	613b      	str	r3, [r7, #16]
   return(result);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e6      	bne.n	8007c4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c92:	bf00      	nop
 8007c94:	3754      	adds	r7, #84	; 0x54
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e058      	b.n	8007d68 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7fa f84b 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2224      	movs	r2, #36	; 0x24
 8007cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff fdb6 	bl	8007860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fab7 	bl	8007268 <UART_SetConfig>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e031      	b.n	8007d68 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d12:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	055b      	lsls	r3, r3, #21
 8007d2c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007d42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	6979      	ldr	r1, [r7, #20]
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fe1f 	bl	80079a4 <UART_CheckIdleState>
 8007d66:	4603      	mov	r3, r0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e027      	b.n	8007dd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2224      	movs	r2, #36	; 0x24
 8007d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007db4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e02d      	b.n	8007e56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2224      	movs	r2, #36	; 0x24
 8007e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f850 	bl	8007edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e02d      	b.n	8007ed2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2224      	movs	r2, #36	; 0x24
 8007e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0201 	bic.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f812 	bl	8007edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007efc:	e031      	b.n	8007f62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007efe:	2308      	movs	r3, #8
 8007f00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f02:	2308      	movs	r3, #8
 8007f04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	0e5b      	lsrs	r3, r3, #25
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	0f5b      	lsrs	r3, r3, #29
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	7b3a      	ldrb	r2, [r7, #12]
 8007f2a:	4911      	ldr	r1, [pc, #68]	; (8007f70 <UARTEx_SetNbDataToProcess+0x94>)
 8007f2c:	5c8a      	ldrb	r2, [r1, r2]
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f32:	7b3a      	ldrb	r2, [r7, #12]
 8007f34:	490f      	ldr	r1, [pc, #60]	; (8007f74 <UARTEx_SetNbDataToProcess+0x98>)
 8007f36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	7b7a      	ldrb	r2, [r7, #13]
 8007f48:	4909      	ldr	r1, [pc, #36]	; (8007f70 <UARTEx_SetNbDataToProcess+0x94>)
 8007f4a:	5c8a      	ldrb	r2, [r1, r2]
 8007f4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f50:	7b7a      	ldrb	r2, [r7, #13]
 8007f52:	4908      	ldr	r1, [pc, #32]	; (8007f74 <UARTEx_SetNbDataToProcess+0x98>)
 8007f54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f56:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f62:	bf00      	nop
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	08008234 	.word	0x08008234
 8007f74:	0800823c 	.word	0x0800823c

08007f78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f80:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007f84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	43db      	mvns	r3, r3
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4013      	ands	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <atoi>:
 8007fea:	220a      	movs	r2, #10
 8007fec:	2100      	movs	r1, #0
 8007fee:	f000 b883 	b.w	80080f8 <strtol>
	...

08007ff4 <_strtol_l.constprop.0>:
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffa:	d001      	beq.n	8008000 <_strtol_l.constprop.0+0xc>
 8007ffc:	2b24      	cmp	r3, #36	; 0x24
 8007ffe:	d906      	bls.n	800800e <_strtol_l.constprop.0+0x1a>
 8008000:	f000 f88c 	bl	800811c <__errno>
 8008004:	2316      	movs	r3, #22
 8008006:	6003      	str	r3, [r0, #0]
 8008008:	2000      	movs	r0, #0
 800800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80080f4 <_strtol_l.constprop.0+0x100>
 8008012:	460d      	mov	r5, r1
 8008014:	462e      	mov	r6, r5
 8008016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800801a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800801e:	f017 0708 	ands.w	r7, r7, #8
 8008022:	d1f7      	bne.n	8008014 <_strtol_l.constprop.0+0x20>
 8008024:	2c2d      	cmp	r4, #45	; 0x2d
 8008026:	d132      	bne.n	800808e <_strtol_l.constprop.0+0x9a>
 8008028:	782c      	ldrb	r4, [r5, #0]
 800802a:	2701      	movs	r7, #1
 800802c:	1cb5      	adds	r5, r6, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d05b      	beq.n	80080ea <_strtol_l.constprop.0+0xf6>
 8008032:	2b10      	cmp	r3, #16
 8008034:	d109      	bne.n	800804a <_strtol_l.constprop.0+0x56>
 8008036:	2c30      	cmp	r4, #48	; 0x30
 8008038:	d107      	bne.n	800804a <_strtol_l.constprop.0+0x56>
 800803a:	782c      	ldrb	r4, [r5, #0]
 800803c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008040:	2c58      	cmp	r4, #88	; 0x58
 8008042:	d14d      	bne.n	80080e0 <_strtol_l.constprop.0+0xec>
 8008044:	786c      	ldrb	r4, [r5, #1]
 8008046:	2310      	movs	r3, #16
 8008048:	3502      	adds	r5, #2
 800804a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800804e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008052:	f04f 0e00 	mov.w	lr, #0
 8008056:	fbb8 f9f3 	udiv	r9, r8, r3
 800805a:	4676      	mov	r6, lr
 800805c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008060:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008064:	f1bc 0f09 	cmp.w	ip, #9
 8008068:	d816      	bhi.n	8008098 <_strtol_l.constprop.0+0xa4>
 800806a:	4664      	mov	r4, ip
 800806c:	42a3      	cmp	r3, r4
 800806e:	dd24      	ble.n	80080ba <_strtol_l.constprop.0+0xc6>
 8008070:	f1be 3fff 	cmp.w	lr, #4294967295
 8008074:	d008      	beq.n	8008088 <_strtol_l.constprop.0+0x94>
 8008076:	45b1      	cmp	r9, r6
 8008078:	d31c      	bcc.n	80080b4 <_strtol_l.constprop.0+0xc0>
 800807a:	d101      	bne.n	8008080 <_strtol_l.constprop.0+0x8c>
 800807c:	45a2      	cmp	sl, r4
 800807e:	db19      	blt.n	80080b4 <_strtol_l.constprop.0+0xc0>
 8008080:	fb06 4603 	mla	r6, r6, r3, r4
 8008084:	f04f 0e01 	mov.w	lr, #1
 8008088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800808c:	e7e8      	b.n	8008060 <_strtol_l.constprop.0+0x6c>
 800808e:	2c2b      	cmp	r4, #43	; 0x2b
 8008090:	bf04      	itt	eq
 8008092:	782c      	ldrbeq	r4, [r5, #0]
 8008094:	1cb5      	addeq	r5, r6, #2
 8008096:	e7ca      	b.n	800802e <_strtol_l.constprop.0+0x3a>
 8008098:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800809c:	f1bc 0f19 	cmp.w	ip, #25
 80080a0:	d801      	bhi.n	80080a6 <_strtol_l.constprop.0+0xb2>
 80080a2:	3c37      	subs	r4, #55	; 0x37
 80080a4:	e7e2      	b.n	800806c <_strtol_l.constprop.0+0x78>
 80080a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080aa:	f1bc 0f19 	cmp.w	ip, #25
 80080ae:	d804      	bhi.n	80080ba <_strtol_l.constprop.0+0xc6>
 80080b0:	3c57      	subs	r4, #87	; 0x57
 80080b2:	e7db      	b.n	800806c <_strtol_l.constprop.0+0x78>
 80080b4:	f04f 3eff 	mov.w	lr, #4294967295
 80080b8:	e7e6      	b.n	8008088 <_strtol_l.constprop.0+0x94>
 80080ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80080be:	d105      	bne.n	80080cc <_strtol_l.constprop.0+0xd8>
 80080c0:	2322      	movs	r3, #34	; 0x22
 80080c2:	6003      	str	r3, [r0, #0]
 80080c4:	4646      	mov	r6, r8
 80080c6:	b942      	cbnz	r2, 80080da <_strtol_l.constprop.0+0xe6>
 80080c8:	4630      	mov	r0, r6
 80080ca:	e79e      	b.n	800800a <_strtol_l.constprop.0+0x16>
 80080cc:	b107      	cbz	r7, 80080d0 <_strtol_l.constprop.0+0xdc>
 80080ce:	4276      	negs	r6, r6
 80080d0:	2a00      	cmp	r2, #0
 80080d2:	d0f9      	beq.n	80080c8 <_strtol_l.constprop.0+0xd4>
 80080d4:	f1be 0f00 	cmp.w	lr, #0
 80080d8:	d000      	beq.n	80080dc <_strtol_l.constprop.0+0xe8>
 80080da:	1e69      	subs	r1, r5, #1
 80080dc:	6011      	str	r1, [r2, #0]
 80080de:	e7f3      	b.n	80080c8 <_strtol_l.constprop.0+0xd4>
 80080e0:	2430      	movs	r4, #48	; 0x30
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1b1      	bne.n	800804a <_strtol_l.constprop.0+0x56>
 80080e6:	2308      	movs	r3, #8
 80080e8:	e7af      	b.n	800804a <_strtol_l.constprop.0+0x56>
 80080ea:	2c30      	cmp	r4, #48	; 0x30
 80080ec:	d0a5      	beq.n	800803a <_strtol_l.constprop.0+0x46>
 80080ee:	230a      	movs	r3, #10
 80080f0:	e7ab      	b.n	800804a <_strtol_l.constprop.0+0x56>
 80080f2:	bf00      	nop
 80080f4:	08008245 	.word	0x08008245

080080f8 <strtol>:
 80080f8:	4613      	mov	r3, r2
 80080fa:	460a      	mov	r2, r1
 80080fc:	4601      	mov	r1, r0
 80080fe:	4802      	ldr	r0, [pc, #8]	; (8008108 <strtol+0x10>)
 8008100:	6800      	ldr	r0, [r0, #0]
 8008102:	f7ff bf77 	b.w	8007ff4 <_strtol_l.constprop.0>
 8008106:	bf00      	nop
 8008108:	20000058 	.word	0x20000058

0800810c <memset>:
 800810c:	4402      	add	r2, r0
 800810e:	4603      	mov	r3, r0
 8008110:	4293      	cmp	r3, r2
 8008112:	d100      	bne.n	8008116 <memset+0xa>
 8008114:	4770      	bx	lr
 8008116:	f803 1b01 	strb.w	r1, [r3], #1
 800811a:	e7f9      	b.n	8008110 <memset+0x4>

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	; (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000058 	.word	0x20000058

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	; (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	; (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	; (800816c <__libc_init_array+0x44>)
 800813c:	f000 f818 	bl	8008170 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	08008350 	.word	0x08008350
 8008164:	08008350 	.word	0x08008350
 8008168:	08008350 	.word	0x08008350
 800816c:	08008354 	.word	0x08008354

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
